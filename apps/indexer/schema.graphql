type TournamentCombat_CombatResolved {
  id: ID!
  combatId: BigInt!
  player1: String!
  player2: String!
  p1CardsBurned: BigInt!
  p2CardsBurned: BigInt!
  rpsOutcome: BigInt!
  decision: BigInt!
  modifierApplied: Boolean!
  p1LifeDelta: BigInt!
  p2LifeDelta: BigInt!
  p1CoinDelta: BigInt!
  p2CoinDelta: BigInt!
  proofHash: String
  timestamp: BigInt!
}

type TournamentCombat_CombatStarted {
  id: ID!
  combatId: BigInt!
  p1: String!
  p2: String!
  timestamp: BigInt!
}

type TournamentCombat_CombatTimedOut {
  id: ID!
  combatId: BigInt!
  p1: String!
  p2: String!
  timestamp: BigInt!
}

type TournamentDeckCatalog_CardPaused {
  id: ID!
  cardId: BigInt!
  timestamp: BigInt!
}

type TournamentDeckCatalog_CardRegistered {
  id: ID!
  cardId: BigInt!
  category: BigInt!
  trigger: BigInt!
  mysteryGrantCard: BigInt!
  baseWeight: BigInt!
  effectData: String!
}

type TournamentDeckCatalog_CardUnpaused {
  id: ID!
  cardId: BigInt!
  timestamp: BigInt!
}

type TournamentDeckCatalog_ObjectivePaused {
  id: ID!
  objectiveId: BigInt!
  timestamp: BigInt!
}

type TournamentDeckCatalog_ObjectiveRegistered {
  id: ID!
  objectiveId: BigInt!
  objectiveType: BigInt!
  targetData: String!
}

type TournamentDeckCatalog_ObjectiveUnpaused {
  id: ID!
  objectiveId: BigInt!
  timestamp: BigInt!
}

type TournamentFactory_OwnershipTransferred {
  id: ID!
  previousOwner: String!
  newOwner: String!
}

type TournamentFactory_PlatformFeeUpdated {
  id: ID!
  newFee: BigInt!
}

type TournamentFactory_RngOracleUpdated {
  id: ID!
  newOracle: String!
}

type TournamentFactory_TournamentSystemCreated {
  id: ID!
  hub: String!
  combat: String!
  mysteryDeck: String!
  trading: String!
  randomizer: String!
  creator: String!
  startTimestamp: BigInt!
  duration: BigInt!
  gameInterval: BigInt!
  minPlayers: BigInt!
  maxPlayers: BigInt!
  startPlayerCount: BigInt!
  startPoolAmount: BigInt!
  stakeToken: String!
  minStake: BigInt!
  maxStake: BigInt!
  coinConversionRate: BigInt!
  decayAmount: BigInt!
  initialLives: BigInt!
  cardsPerType: BigInt!
  exitLivesRequired: BigInt!
  exitCostBasePercentBPS: BigInt!
  exitCostCompoundRateBPS: BigInt!
  creatorFeePercent: BigInt!
  platformFeePercent: BigInt!
  forfeitAllowed: Boolean!
  forfeitPenaltyType: BigInt!
  forfeitMaxPenalty: BigInt!
  forfeitMinPenalty: BigInt!
  deckCatalog: String!
  excludedCardIds: [BigInt!]!
  deckDrawCost: BigInt!
  deckShuffleCost: BigInt!
  deckPeekCost: BigInt!
  
}

type TournamentHub_TournamentLocked {
  id: ID!
  timestamp: BigInt!
}

type TournamentHub_TournamentUnlocked {
  id: ID!
  timestamp: BigInt!
}

type TournamentRevertedToOpen {
  id: ID!
  timestamp: BigInt!
}

type TournamentHub_TournamentCancelled {
  id: ID!
  timestamp: BigInt!
}

type TournamentHub_TournamentStarted {
  id: ID!
  startTime: BigInt!
  endTime: BigInt!
  exitWindowStart: BigInt!
}

type TournamentHub_TournamentEnded {
  id: ID!
  winnerCount: BigInt!
  prizePool: BigInt!
  timestamp: BigInt!
}

type TournamentHub_TournamentPendingStart {
  id: ID!
  timestamp: BigInt!
}

type TournamentHub_TournamentRevertedToOpen {
  id: ID!
  timestamp: BigInt!
}

type TournamentHub_PlayerJoined {
  id: ID!
  player: String!
  stakeAmount: BigInt!
  initialCoins: BigInt!
  timestamp: BigInt!
}

type TournamentHub_PlayerExited {
  id: ID!
  player: String!
  timestamp: BigInt!
}

type TournamentHub_PlayerForfeited {
  id: ID!
  player: String!
  penaltyAmount: BigInt!
  refundAmount: BigInt!
  timestamp: BigInt!
}

type TournamentHub_RefundClaimed {
  id: ID!
  player: String!
  amount: BigInt!
}

type TournamentHub_PrizeClaimed {
  id: ID!
  player: String!
  amount: BigInt!
}

type TournamentHub_EmergencyCancellation {
  id: ID!
  platformAdmin: String!
  timestamp: BigInt!
}

type TournamentHub_ExitWindowOpened {
  id: ID!
  windowStart: BigInt!
  windowEnd: BigInt!
}

type TournamentHub_RandomnessFailure {
  id: ID!
  timestamp: BigInt!
}

type TournamentMysteryDeck_CardDrawn {
  id: ID!
  player: String!
  costPaid: BigInt!
  newDrawCount: BigInt!
  cardsRemaining: BigInt!
  timestamp: BigInt!
}

type TournamentMysteryDeck_CardsAdded {
  id: ID!
  player: String!
  cardCount: BigInt!
  costPaid: BigInt!
  newCardsRemaining: BigInt!
  timestamp: BigInt!
}

type TournamentMysteryDeck_CardsPeeked {
  id: ID!
  player: String!
  cardCount: BigInt!
  costPaid: BigInt!
  timestamp: BigInt!
}

type TournamentMysteryDeck_CardsRemoved {
  id: ID!
  player: String!
  cardCount: BigInt!
  costPaid: BigInt!
  newCardsRemaining: BigInt!
  timestamp: BigInt!
}

type TournamentMysteryDeck_DeckInitialized {
  id: ID!
  deckSize: BigInt!
  sequenceNumber: BigInt!
  timestamp: BigInt!
}

type TournamentMysteryDeck_DeckShuffled {
  id: ID!
  player: String!
  costPaid: BigInt!
  newShuffleCount: BigInt!
  timestamp: BigInt!
}

type TournamentMysteryDeck_ShuffleSeedUpdated {
  id: ID!
  newSeed: BigInt!
  backendSecretHash: String!
  timestamp: BigInt!
}

type TournamentRandomizer_CompleteSeedRevealed {
  id: ID!
  completeSeed: String!
  backendSecret: String!
  timestamp: BigInt!
}

type TournamentRandomizer_MysteryDeckSet {
  id: ID!
  mysteryDeck: String!
}

type TournamentRandomizer_SeedGenerated {
  id: ID!
  sequenceNumber: BigInt!
  seedIndex: BigInt!
  seed: String!
  timestamp: BigInt!
}

type TournamentRandomizer_SeedRequestCancelled {
  id: ID!
  sequenceNumber: BigInt!
  timestamp: BigInt!
}

type TournamentRandomizer_SeedRequested {
  id: ID!
  sequenceNumber: BigInt!
  requester: String!
  seedIndex: BigInt!
  timestamp: BigInt!
}

type TournamentRegistry_TournamentStatusUpdated {
  id: ID!
  hub: String!
  oldStatus: BigInt!
  newStatus: BigInt!
}

type TournamentRegistry_TournamentSystemRegistered {
  id: ID!
  hub: String!
  combat: String!
  mysteryDeck: String!
  trading: String!
  randomizer: String!
  initialStatus: BigInt!
}

type TournamentTokenWhitelist_TokenPaused {
  id: ID!
  token: String!
  reason: String!
}

type TournamentTokenWhitelist_TokenUnpaused {
  id: ID!
  token: String!
}

type TournamentTokenWhitelist_TokenWhitelisted {
  id: ID!
  token: String!
}

type TournamentTrading_OfferCancelled {
  id: ID!
  offerId: BigInt!
  creator: String!
  timestamp: BigInt!
}

type TournamentTrading_OfferCreated {
  id: ID!
  offerId: BigInt!
  creator: String!
  offeredLives: BigInt!
  offeredCoins: BigInt!
  offeredRock: BigInt!
  offeredPaper: BigInt!
  offeredScissors: BigInt!
  requestedLives: BigInt!
  requestedCoins: BigInt!
  requestedRock: BigInt!
  requestedPaper: BigInt!
  requestedScissors: BigInt!
  expiresAt: BigInt!
  createdAt: BigInt!
}

type TournamentTrading_TradeExecuted {
  id: ID!
  offerId: BigInt!
  creator: String!
  acceptor: String!
  creatorTotalCardsDelta: BigInt!
  acceptorTotalCardsDelta: BigInt!
  timestamp: BigInt!
}
