{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-242543c7be063b3ecbc32dbe644b60a0f1fe2c44",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/tournament/core/libraries/lifecycle/Lifecycle.sol": "project/contracts/tournament/core/libraries/lifecycle/Lifecycle.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ],
      "viaIR": true
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "project/contracts/tournament/core/libraries/lifecycle/Lifecycle.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {TournamentCore} from \"./../../TournamentCore.sol\";\nimport {TournamentRegistry} from \"./../../../infrastructure/registry/TournamentRegistry.sol\";\n\nlibrary TournamentLifecycle {\n    event TournamentLocked(uint32 timestamp);\n    event TournamentUnlocked(uint32 timestamp);\n    event TournamentPendingStart(uint32 timestamp);\n    event TournamentRevertedToOpen(uint32 timestamp);\n    event TournamentStarted(\n        uint32 startTime,\n        uint32 endTime,\n        uint32 exitWindowStart\n    );\n    event TournamentEnded(\n        uint256 winnerCount,\n        uint256 prizePool,\n        uint32 timestamp\n    );\n    event TournamentCancelled(uint32 timestamp);\n    event EmergencyCancellation(\n        address indexed platformAdmin,\n        uint256 timestamp\n    );\n\n    function transitionToLocked(TournamentRegistry registry) internal {\n        registry.updateTournamentStatus(TournamentCore.Status.Locked);\n        emit TournamentLocked(uint32(block.timestamp));\n    }\n\n    function transitionToOpen(TournamentRegistry registry) internal {\n        registry.updateTournamentStatus(TournamentCore.Status.Open);\n        emit TournamentUnlocked(uint32(block.timestamp));\n    }\n\n    function transitionToPendingStart(TournamentRegistry registry) internal {\n        registry.updateTournamentStatus(TournamentCore.Status.PendingStart);\n        emit TournamentPendingStart(uint32(block.timestamp));\n    }\n\n    function transitionToActive(\n        TournamentRegistry registry,\n        uint32 duration,\n        uint32 gameInterval\n    )\n        internal\n        returns (uint32 actualStartTime, uint32 endTime, uint32 exitWindowStart)\n    {\n        actualStartTime = uint32(block.timestamp);\n        endTime = actualStartTime + duration;\n        exitWindowStart = endTime - gameInterval;\n\n        registry.updateTournamentStatus(TournamentCore.Status.Active);\n        emit TournamentStarted(actualStartTime, endTime, exitWindowStart);\n\n        return (actualStartTime, endTime, exitWindowStart);\n    }\n\n    function transitionToEnded(\n        TournamentRegistry registry,\n        uint256 totalStaked,\n        uint256 totalForfeitPenalties,\n        uint256 winnerCount\n    ) internal {\n        registry.updateTournamentStatus(TournamentCore.Status.Ended);\n\n        uint256 prizePool = totalStaked + totalForfeitPenalties;\n        emit TournamentEnded(winnerCount, prizePool, uint32(block.timestamp));\n    }\n\n    function transitionToCancelled(TournamentRegistry registry) internal {\n        registry.updateTournamentStatus(TournamentCore.Status.Cancelled);\n        emit TournamentCancelled(uint32(block.timestamp));\n    }\n\n    function emergencyCancel(\n        TournamentRegistry registry,\n        address platformAdmin\n    ) internal {\n        registry.updateTournamentStatus(TournamentCore.Status.Cancelled);\n        emit EmergencyCancellation(platformAdmin, block.timestamp);\n    }\n\n    function emitRevertToOpen() internal {\n        emit TournamentRevertedToOpen(uint32(block.timestamp));\n    }\n\n    function checkAndTransition(\n        TournamentCore.Status currentStatus,\n        TournamentCore.Params memory params,\n        uint16 playerCount,\n        uint256 totalStaked,\n        TournamentRegistry registry\n    )\n        external\n        returns (\n            TournamentCore.Status newStatus,\n            uint32 actualStartTime,\n            uint32 endTime,\n            uint32 exitWindowStart\n        )\n    {\n        newStatus = currentStatus;\n\n        if (currentStatus == TournamentCore.Status.Open) {\n            if (params.maxPlayers > 0 && playerCount >= params.maxPlayers) {\n                newStatus = TournamentCore.Status.Locked;\n                transitionToLocked(registry);\n            }\n        }\n\n        if (\n            currentStatus == TournamentCore.Status.Open ||\n            currentStatus == TournamentCore.Status.Locked\n        ) {\n            if (block.timestamp >= params.startTimestamp) {\n                newStatus = TournamentCore.Status.PendingStart;\n                transitionToPendingStart(registry);\n\n                if (\n                    areStartConditionsMet(\n                        params.startPlayerCount,\n                        params.startPoolAmount,\n                        playerCount,\n                        totalStaked\n                    )\n                ) {\n                    newStatus = TournamentCore.Status.Active;\n                    (\n                        actualStartTime,\n                        endTime,\n                        exitWindowStart\n                    ) = transitionToActive(\n                        registry,\n                        params.duration,\n                        params.gameInterval\n                    );\n                } else {\n                    newStatus = TournamentCore.Status.Cancelled;\n                    transitionToCancelled(registry);\n                }\n            }\n        }\n    }\n\n    function areStartConditionsMet(\n        uint16 startPlayerCount,\n        uint256 startPoolAmount,\n        uint16 currentPlayerCount,\n        uint256 currentTotalStaked\n    ) public pure returns (bool) {\n        if (startPlayerCount > 0 && currentPlayerCount < startPlayerCount) {\n            return false;\n        }\n        if (startPoolAmount > 0 && currentTotalStaked < startPoolAmount) {\n            return false;\n        }\n        return true;\n    }\n}\n"
      },
      "project/contracts/tournament/core/TournamentCore.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nlibrary TournamentCore {\n    enum Status {\n        Open,\n        Locked,\n        PendingStart,\n        Active,\n        Ended,\n        Cancelled\n    }\n\n    enum PlayerStatus {\n        Active,\n        Exited,\n        Forfeited,\n        PrizeClaimed,\n        Refunded\n    }\n\n    enum ForfeitPenaltyType {\n        Fixed,\n        TimeBased\n    }\n\n    struct Params {\n        uint32 startTimestamp;\n        uint32 duration;\n        uint32 gameInterval;\n        uint16 minPlayers;\n        uint16 maxPlayers;\n        uint16 startPlayerCount;\n        uint256 startPoolAmount;\n        address stakeToken;\n        uint256 minStake;\n        uint256 maxStake;\n        uint40 coinConversionRate;\n        uint256 decayAmount;\n        uint8 initialLives;\n        uint8 cardsPerType;\n        uint8 exitLivesRequired;\n        uint16 exitCostBasePercentBPS;\n        uint16 exitCostCompoundRateBPS;\n        uint8 creatorFeePercent;\n        uint8 platformFeePercent;\n        bool forfeitAllowed;\n        ForfeitPenaltyType forfeitPenaltyType;\n        uint8 forfeitMaxPenalty;\n        uint8 forfeitMinPenalty;\n        address deckCatalog;\n        uint8[] excludedCardIds;\n        uint256 deckDrawCost;\n        uint256 deckShuffleCost;\n        uint256 deckPeekCost;\n    }\n\n    struct PlayerResources {\n        uint256 initialCoins;\n        uint256 coins;\n        uint256 stakeAmount;\n        uint32 lastDecayTimestamp;\n        uint16 combatCount;\n        uint8 lives;\n        uint8 totalCards;\n        PlayerStatus status;\n        bool exists;\n        bool inCombat;\n    }\n\n    uint32 public constant RECOMMENDED_SECONDS_PER_CARD = 360;\n    uint32 public constant MIN_DURATION = 1200;\n    uint8 public constant MIN_CARDS_PER_TYPE = 1;\n    uint8 public constant MAX_CARDS_PER_TYPE = 10;\n    uint16 public constant MIN_PLAYERS_REQUIRED = 2;\n    uint16 public constant MAX_PLAYERS_LIMIT = 10000;\n    uint32 public constant MIN_GAME_INTERVAL = 60;\n    uint32 public constant MAX_GAME_INTERVAL = 3600;\n    uint8 public constant MAX_CREATOR_FEE_PERCENT = 5;\n    uint8 public constant MAX_PLATFORM_FEE = 5;\n    uint8 public constant MAX_COMBINED_FEE_PERCENT = 10;\n    uint8 public constant MIN_INTERVALS_REQUIRED = 3;\n}\n"
      },
      "project/contracts/tournament/infrastructure/registry/TournamentRegistry.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {TournamentCore} from \"./../../core/TournamentCore.sol\";\n\n/**\n * Architecture:\n * - Each tournament = 5 contracts (Hub and 4 modules: Combat, Deck, Trading, Randomizer)\n * - Hub is the primary contract - owns player state, updates status\n * - Registry tracks complete systems and provides reverse lookups\n */\ncontract TournamentRegistry is Ownable {\n    struct TournamentSystem {\n        address hub;\n        address combat;\n        address mysteryDeck;\n        address trading;\n        address randomizer;\n        bool exists;\n    }\n\n    mapping(address => bool) private _hasFactoryRole;\n\n    // Tournament tracking (by hub address - primary)\n    address[] private _allTournaments;\n    mapping(address => TournamentSystem) private _tournamentSystems;\n    mapping(address => bool) private _isRegistered;\n\n    // Status tracking (by hub address)\n    mapping(address => TournamentCore.Status) private _tournamentStatus;\n    mapping(TournamentCore.Status => address[]) private _tournamentsByStatus;\n    mapping(address => mapping(TournamentCore.Status => uint256))\n        private _tournamentStatusIndex;\n\n    // Reverse lookups (module address => hub address)\n    mapping(address => address) private _moduleToHub;\n\n    event FactoryRoleGranted(address indexed factory);\n    event FactoryRoleRevoked(address indexed factory);\n    event TournamentSystemRegistered(\n        address indexed hub,\n        address indexed combat,\n        address mysteryDeck,\n        address trading,\n        address randomizer,\n        TournamentCore.Status initialStatus\n    );\n    event TournamentStatusUpdated(\n        address indexed hub,\n        TournamentCore.Status oldStatus,\n        TournamentCore.Status newStatus\n    );\n\n    error InvalidAddress();\n    error OnlyFactory();\n    error AlreadyRegistered();\n    error NotRegistered();\n    error ModuleAlreadyUsed();\n\n    modifier onlyRegisteredHub(address hub) {\n        if (!_isRegistered[hub]) revert NotRegistered();\n        _;\n    }\n\n    constructor() Ownable(msg.sender) {}\n\n    function grantFactoryRole(address factory) external onlyOwner {\n        if (factory == address(0)) revert InvalidAddress();\n        _hasFactoryRole[factory] = true;\n        emit FactoryRoleGranted(factory);\n    }\n\n    function revokeFactoryRole(address factory) external onlyOwner {\n        _hasFactoryRole[factory] = false;\n        emit FactoryRoleRevoked(factory);\n    }\n\n    function hasFactoryRole(address factory) external view returns (bool) {\n        return _hasFactoryRole[factory];\n    }\n\n    /**\n     * @notice Register a complete tournament system (5 contracts)\n     * @dev Called by TournamentFactory after deploying all 5 minimal proxies\n     * Validates all addresses and ensures no module is reused across tournaments\n     */\n    function registerTournamentSystem(\n        address hub,\n        address combat,\n        address mysteryDeck,\n        address trading,\n        address randomizer\n    ) external {\n        if (!_hasFactoryRole[msg.sender]) revert OnlyFactory();\n        if (_isRegistered[hub]) revert AlreadyRegistered();\n        if (\n            hub == address(0) ||\n            combat == address(0) ||\n            randomizer == address(0) ||\n            trading == address(0) ||\n            mysteryDeck == address(0)\n        ) revert InvalidAddress();\n\n        if (\n            _moduleToHub[combat] != address(0) ||\n            _moduleToHub[randomizer] != address(0) ||\n            _moduleToHub[mysteryDeck] != address(0) ||\n            _moduleToHub[trading] != address(0)\n        ) revert ModuleAlreadyUsed();\n\n        _tournamentSystems[hub] = TournamentSystem({\n            hub: hub,\n            combat: combat,\n            mysteryDeck: mysteryDeck,\n            trading: trading,\n            randomizer: randomizer,\n            exists: true\n        });\n\n        _isRegistered[hub] = true;\n        _allTournaments.push(hub);\n\n        // Setup reverse lookup\n        _moduleToHub[hub] = hub; // Hub points to itself\n        _moduleToHub[combat] = hub;\n        _moduleToHub[mysteryDeck] = hub;\n        _moduleToHub[trading] = hub;\n        _moduleToHub[randomizer] = hub;\n\n        // Status tracking\n        TournamentCore.Status initialStatus = TournamentCore.Status.Open;\n        _tournamentStatus[hub] = initialStatus;\n\n        uint256 statusArrayLength = _tournamentsByStatus[initialStatus].length;\n        _tournamentStatusIndex[hub][initialStatus] = statusArrayLength;\n        _tournamentsByStatus[initialStatus].push(hub);\n\n        emit TournamentSystemRegistered(\n            hub,\n            combat,\n            mysteryDeck,\n            trading,\n            randomizer,\n            initialStatus\n        );\n    }\n\n    function updateTournamentStatus(TournamentCore.Status newStatus) external {\n        address hub = msg.sender;\n\n        if (!_isRegistered[hub]) revert NotRegistered();\n\n        TournamentCore.Status oldStatus = _tournamentStatus[hub];\n\n        // Early exit if status hasn't changed\n        if (oldStatus == newStatus) return;\n\n        // Remove from old status array\n        _removeFromStatusArray(hub, oldStatus);\n\n        // Add to new status array\n        uint256 newStatusArrayLength = _tournamentsByStatus[newStatus].length;\n        _tournamentStatusIndex[hub][newStatus] = newStatusArrayLength;\n        _tournamentsByStatus[newStatus].push(hub);\n        _tournamentStatus[hub] = newStatus;\n\n        emit TournamentStatusUpdated(hub, oldStatus, newStatus);\n    }\n\n    function _removeFromStatusArray(\n        address hub,\n        TournamentCore.Status status\n    ) private onlyRegisteredHub(hub) {\n        uint256 indexToRemove = _tournamentStatusIndex[hub][status];\n\n        unchecked {\n            // Safe: array length is always > 0 when removing (hub is registered in this status)\n            uint256 lastIndex = _tournamentsByStatus[status].length - 1;\n\n            if (indexToRemove != lastIndex) {\n                address lastTournament = _tournamentsByStatus[status][\n                    lastIndex\n                ];\n                _tournamentsByStatus[status][indexToRemove] = lastTournament;\n                _tournamentStatusIndex[lastTournament][status] = indexToRemove;\n            }\n\n            _tournamentsByStatus[status].pop();\n        }\n    }\n\n    /**\n     * @notice Get complete tournament system by hub address\n     */\n    function getTournamentSystem(\n        address hub\n    ) external view onlyRegisteredHub(hub) returns (TournamentSystem memory) {\n        return _tournamentSystems[hub];\n    }\n\n    /**\n     * @notice Get hub address from any module address\n     * @dev Useful when you have a Combat/Deck/Trading/Randomizer address\n     */\n    function getHubAddress(\n        address moduleAddress\n    ) external view returns (address) {\n        address hub = _moduleToHub[moduleAddress];\n        if (hub == address(0)) revert NotRegistered();\n        return hub;\n    }\n\n    /**\n     * @notice Get tournament system by any module address\n     */\n    function getTournamentSystemByModule(\n        address moduleAddress\n    ) external view returns (TournamentSystem memory) {\n        address hub = _moduleToHub[moduleAddress];\n        if (hub == address(0)) revert NotRegistered();\n        return _tournamentSystems[hub];\n    }\n\n    /**\n     * @notice Get all tournament hub addresses\n     */\n    function getAllTournaments() external view returns (address[] memory) {\n        return _allTournaments;\n    }\n\n    /**\n     * @notice Get tournaments by status (returns hub addresses)\n     */\n    function getTournamentsByStatus(\n        TournamentCore.Status status\n    ) external view returns (address[] memory) {\n        return _tournamentsByStatus[status];\n    }\n\n    function getTournamentStatus(\n        address hub\n    ) external view onlyRegisteredHub(hub) returns (uint8) {\n        return uint8(_tournamentStatus[hub]);\n    }\n\n    function isTournamentRegistered(address hub) external view returns (bool) {\n        return _isRegistered[hub];\n    }\n\n    function isModuleRegistered(\n        address moduleAddress\n    ) external view returns (bool) {\n        return _moduleToHub[moduleAddress] != address(0);\n    }\n\n    function getTournamentCount() external view returns (uint256) {\n        return _allTournaments.length;\n    }\n}\n"
      }
    }
  }
}