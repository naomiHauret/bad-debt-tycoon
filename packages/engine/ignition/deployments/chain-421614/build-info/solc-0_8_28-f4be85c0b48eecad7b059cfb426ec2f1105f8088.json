{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-f4be85c0b48eecad7b059cfb426ec2f1105f8088",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/tournament/modules/hub/TournamentHub.sol": "project/contracts/tournament/modules/hub/TournamentHub.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ],
      "viaIR": true
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC1363.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/proxy/utils/Initializable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\n     *\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\n     */\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\n        return INITIALIZABLE_STORAGE;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        bytes32 slot = _initializableStorageSlot();\n        assembly {\n            $.slot := slot\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/utils/SafeERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "project/contracts/tournament/core/libraries/calculations/Calculations.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {TournamentCore} from \"./../../TournamentCore.sol\";\n\nlibrary TournamentCalculations {\n    function calculateExitCost(\n        uint256 initialCoins,\n        uint32 actualStartTime,\n        uint16 exitCostBasePercentBPS,\n        uint16 exitCostCompoundRateBPS,\n        uint32 gameInterval\n    ) internal view returns (uint256) {\n        uint32 currentTime = uint32(block.timestamp);\n\n        uint256 intervalsPassed = (currentTime - actualStartTime) /\n            gameInterval;\n        uint256 baseCost = (initialCoins * exitCostBasePercentBPS) / 10000;\n        uint256 multiplier = 10000 +\n            (exitCostCompoundRateBPS * intervalsPassed);\n        return (baseCost * multiplier) / 10000;\n    }\n\n    function calculateCurrentCoins(\n        uint256 storedCoins,\n        uint32 lastDecayTimestamp,\n        uint256 decayAmount,\n        uint32 gameInterval\n    ) internal view returns (uint256) {\n        // Cast block.timestamp to uint32 for consistent arithmetic\n        uint32 currentTime = uint32(block.timestamp);\n\n        if (currentTime <= lastDecayTimestamp) {\n            return storedCoins;\n        }\n\n        uint256 intervalsPassed = (currentTime - lastDecayTimestamp) /\n            gameInterval;\n        uint256 totalDecay = decayAmount * intervalsPassed;\n        return storedCoins > totalDecay ? storedCoins - totalDecay : 0;\n    }\n\n    function calculateForfeitPenalty(\n        uint256 stakeAmount,\n        uint32 endTime,\n        uint32 duration,\n        uint8 forfeitPenaltyType, // 0 = Fixed, 1 = TimeBased\n        uint8 forfeitMaxPenalty,\n        uint8 forfeitMinPenalty\n    ) internal view returns (uint256) {\n        uint256 penaltyPercent;\n\n        if (\n            forfeitPenaltyType == uint8(TournamentCore.ForfeitPenaltyType.Fixed)\n        ) {\n            // For fixed penalty, apply the minimum penalty\n            penaltyPercent = forfeitMinPenalty;\n        } else {\n            // For time-base penalty, calculate the percentage to apply\n            uint32 currentTime = uint32(block.timestamp);\n\n            uint32 timeRemaining = endTime > currentTime\n                ? endTime - currentTime\n                : 0;\n            penaltyPercent =\n                (uint256(forfeitMaxPenalty) * timeRemaining) /\n                duration;\n\n            if (penaltyPercent < forfeitMinPenalty) {\n                // Clamp to min penalty value in case calculated % is too low\n                penaltyPercent = forfeitMinPenalty;\n            }\n            if (penaltyPercent > forfeitMaxPenalty) {\n                // Clamp to max penalty value in case calculated % is too high\n                penaltyPercent = forfeitMaxPenalty;\n            }\n        }\n        return (stakeAmount * penaltyPercent) / 100;\n    }\n\n    function calculatePrizePerWinner(\n        uint256 totalStaked,\n        uint256 totalForfeitPenalties,\n        uint8 platformFeePercent,\n        uint8 creatorFeePercent,\n        uint256 winnerCount\n    ) internal pure returns (uint256) {\n        if (winnerCount == 0) return 0;\n\n        uint256 totalPrizePool = totalStaked + totalForfeitPenalties;\n        uint256 platformFee = (totalPrizePool * platformFeePercent) / 100;\n        uint256 creatorFee = (totalPrizePool * creatorFeePercent) / 100;\n        uint256 distributionPool = totalPrizePool - platformFee - creatorFee;\n\n        return distributionPool / winnerCount;\n    }\n}\n"
      },
      "project/contracts/tournament/core/libraries/lifecycle/Lifecycle.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {TournamentCore} from \"./../../TournamentCore.sol\";\nimport {TournamentRegistry} from \"./../../../infrastructure/registry/TournamentRegistry.sol\";\n\nlibrary TournamentLifecycle {\n    event TournamentLocked(uint32 timestamp);\n    event TournamentUnlocked(uint32 timestamp);\n    event TournamentPendingStart(uint32 timestamp);\n    event TournamentRevertedToOpen(uint32 timestamp);\n    event TournamentStarted(\n        uint32 startTime,\n        uint32 endTime,\n        uint32 exitWindowStart\n    );\n    event TournamentEnded(\n        uint256 winnerCount,\n        uint256 prizePool,\n        uint32 timestamp\n    );\n    event TournamentCancelled(uint32 timestamp);\n    event EmergencyCancellation(\n        address indexed platformAdmin,\n        uint256 timestamp\n    );\n\n    function transitionToLocked(TournamentRegistry registry) internal {\n        registry.updateTournamentStatus(TournamentCore.Status.Locked);\n        emit TournamentLocked(uint32(block.timestamp));\n    }\n\n    function transitionToOpen(TournamentRegistry registry) internal {\n        registry.updateTournamentStatus(TournamentCore.Status.Open);\n        emit TournamentUnlocked(uint32(block.timestamp));\n    }\n\n    function transitionToPendingStart(TournamentRegistry registry) internal {\n        registry.updateTournamentStatus(TournamentCore.Status.PendingStart);\n        emit TournamentPendingStart(uint32(block.timestamp));\n    }\n\n    function transitionToActive(\n        TournamentRegistry registry,\n        uint32 duration,\n        uint32 gameInterval\n    )\n        internal\n        returns (uint32 actualStartTime, uint32 endTime, uint32 exitWindowStart)\n    {\n        actualStartTime = uint32(block.timestamp);\n        endTime = actualStartTime + duration;\n        exitWindowStart = endTime - gameInterval;\n\n        registry.updateTournamentStatus(TournamentCore.Status.Active);\n        emit TournamentStarted(actualStartTime, endTime, exitWindowStart);\n\n        return (actualStartTime, endTime, exitWindowStart);\n    }\n\n    function transitionToEnded(\n        TournamentRegistry registry,\n        uint256 totalStaked,\n        uint256 totalForfeitPenalties,\n        uint256 winnerCount\n    ) internal {\n        registry.updateTournamentStatus(TournamentCore.Status.Ended);\n\n        uint256 prizePool = totalStaked + totalForfeitPenalties;\n        emit TournamentEnded(winnerCount, prizePool, uint32(block.timestamp));\n    }\n\n    function transitionToCancelled(TournamentRegistry registry) internal {\n        registry.updateTournamentStatus(TournamentCore.Status.Cancelled);\n        emit TournamentCancelled(uint32(block.timestamp));\n    }\n\n    function emergencyCancel(\n        TournamentRegistry registry,\n        address platformAdmin\n    ) internal {\n        registry.updateTournamentStatus(TournamentCore.Status.Cancelled);\n        emit EmergencyCancellation(platformAdmin, block.timestamp);\n    }\n\n    function emitRevertToOpen() internal {\n        emit TournamentRevertedToOpen(uint32(block.timestamp));\n    }\n\n    function checkAndTransition(\n        TournamentCore.Status currentStatus,\n        TournamentCore.Params memory params,\n        uint16 playerCount,\n        uint256 totalStaked,\n        TournamentRegistry registry\n    )\n        external\n        returns (\n            TournamentCore.Status newStatus,\n            uint32 actualStartTime,\n            uint32 endTime,\n            uint32 exitWindowStart\n        )\n    {\n        newStatus = currentStatus;\n\n        if (currentStatus == TournamentCore.Status.Open) {\n            if (params.maxPlayers > 0 && playerCount >= params.maxPlayers) {\n                newStatus = TournamentCore.Status.Locked;\n                transitionToLocked(registry);\n            }\n        }\n\n        if (\n            currentStatus == TournamentCore.Status.Open ||\n            currentStatus == TournamentCore.Status.Locked\n        ) {\n            if (block.timestamp >= params.startTimestamp) {\n                newStatus = TournamentCore.Status.PendingStart;\n                transitionToPendingStart(registry);\n\n                if (\n                    areStartConditionsMet(\n                        params.startPlayerCount,\n                        params.startPoolAmount,\n                        playerCount,\n                        totalStaked\n                    )\n                ) {\n                    newStatus = TournamentCore.Status.Active;\n                    (\n                        actualStartTime,\n                        endTime,\n                        exitWindowStart\n                    ) = transitionToActive(\n                        registry,\n                        params.duration,\n                        params.gameInterval\n                    );\n                } else {\n                    newStatus = TournamentCore.Status.Cancelled;\n                    transitionToCancelled(registry);\n                }\n            }\n        }\n    }\n\n    function areStartConditionsMet(\n        uint16 startPlayerCount,\n        uint256 startPoolAmount,\n        uint16 currentPlayerCount,\n        uint256 currentTotalStaked\n    ) public pure returns (bool) {\n        if (startPlayerCount > 0 && currentPlayerCount < startPlayerCount) {\n            return false;\n        }\n        if (startPoolAmount > 0 && currentTotalStaked < startPoolAmount) {\n            return false;\n        }\n        return true;\n    }\n}\n"
      },
      "project/contracts/tournament/core/libraries/player-actions/PlayerActions.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {TournamentCore} from \"./../../TournamentCore.sol\";\n\nlibrary TournamentPlayerActions {\n    using SafeERC20 for IERC20;\n\n    event PlayerJoined(\n        address indexed player,\n        uint256 stakeAmount,\n        uint256 initialCoins,\n        uint32 timestamp\n    );\n    event PlayerExited(address indexed player, uint32 timestamp);\n    event PlayerForfeited(\n        address indexed player,\n        uint256 penaltyAmount,\n        uint256 refundAmount,\n        uint32 timestamp\n    );\n    event DecayApplied(\n        address indexed player,\n        uint256 decayAmount,\n        uint256 remainingCoins\n    );\n\n    error StakeTooLow();\n    error StakeTooHigh();\n    error TournamentFull();\n\n    function validateEntry(\n        uint256 minStake,\n        uint256 maxStake,\n        uint16 maxPlayers,\n        uint256 stakeAmount,\n        uint16 playerCount\n    ) external pure {\n        if (minStake > 0 && stakeAmount < minStake) revert StakeTooLow();\n        if (maxStake > 0 && stakeAmount > maxStake) revert StakeTooHigh();\n        if (maxPlayers > 0 && playerCount >= maxPlayers)\n            revert TournamentFull();\n    }\n\n    function processJoin(\n        TournamentCore.PlayerResources storage player,\n        address stakeToken,\n        address sender,\n        uint256 stakeAmount,\n        uint40 coinConversionRate,\n        uint8 initialLives,\n        uint8 cardsPerType\n    ) external returns (uint256 initialCoins) {\n        IERC20(stakeToken).safeTransferFrom(sender, address(this), stakeAmount);\n\n        initialCoins = stakeAmount * coinConversionRate;\n        uint32 timestamp = uint32(block.timestamp);\n\n        player.initialCoins = initialCoins;\n        player.coins = initialCoins;\n        player.stakeAmount = stakeAmount;\n        player.lastDecayTimestamp = timestamp;\n        player.lives = initialLives;\n        player.totalCards = cardsPerType * 3;\n        player.status = TournamentCore.PlayerStatus.Active;\n        player.exists = true;\n        player.inCombat = false;\n\n        emit PlayerJoined(sender, stakeAmount, initialCoins, timestamp);\n    }\n\n    function processExit(\n        TournamentCore.PlayerResources storage player,\n        address sender\n    ) external {\n        player.status = TournamentCore.PlayerStatus.Exited;\n        emit PlayerExited(sender, uint32(block.timestamp));\n    }\n\n    function processForfeit(\n        TournamentCore.PlayerResources storage player,\n        address stakeToken,\n        address sender,\n        uint256 penaltyAmount\n    ) external returns (uint256 refundAmount) {\n        unchecked {\n            refundAmount = player.stakeAmount - penaltyAmount;\n        }\n        player.status = TournamentCore.PlayerStatus.Forfeited;\n\n        IERC20(stakeToken).safeTransfer(sender, refundAmount);\n        emit PlayerForfeited(\n            sender,\n            penaltyAmount,\n            refundAmount,\n            uint32(block.timestamp)\n        );\n    }\n\n    function applyDecay(\n        TournamentCore.PlayerResources storage player,\n        address sender,\n        uint256 decayAmount,\n        uint32 gameInterval\n    ) external {\n        uint32 timestamp = uint32(block.timestamp);\n        uint256 intervalsPassed;\n\n        unchecked {\n            // Safe: tournament duration limits + validated decayAmount\n            // make overflow mathematically impossible\n            intervalsPassed =\n                (timestamp - player.lastDecayTimestamp) /\n                gameInterval;\n        }\n\n        if (intervalsPassed > 0) {\n            uint256 currentCoins = player.coins;\n            uint256 totalDecay;\n            uint256 remainingCoins;\n\n            totalDecay = decayAmount * intervalsPassed;\n\n            // Clamp to available coins\n            if (currentCoins > totalDecay) {\n                unchecked {\n                    remainingCoins = currentCoins - totalDecay;\n                }\n            } else {\n                totalDecay = currentCoins; // Adjust to actual decay\n                remainingCoins = 0;\n            }\n\n            player.coins = remainingCoins;\n            player.lastDecayTimestamp = timestamp;\n\n            emit DecayApplied(sender, totalDecay, remainingCoins);\n        }\n    }\n}\n"
      },
      "project/contracts/tournament/core/libraries/refund/Refund.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {TournamentRegistry} from \"./../../../infrastructure/registry/TournamentRegistry.sol\";\nimport {TournamentCore} from \"./../../TournamentCore.sol\";\nimport {TournamentLifecycle} from \"./../lifecycle/Lifecycle.sol\";\n\nlibrary TournamentRefund {\n    using SafeERC20 for IERC20;\n\n    event RefundClaimed(address indexed player, uint256 amount);\n\n    struct RefundContext {\n        address stakeToken;\n        TournamentCore.Status status;\n        uint16 maxPlayers;\n        uint16 startPlayerCount;\n        uint256 startPoolAmount;\n    }\n\n    function processRefund(\n        TournamentCore.PlayerResources storage player,\n        RefundContext calldata context,\n        TournamentRegistry registry,\n        address sender,\n        uint16 playerCount,\n        uint256 totalStaked\n    )\n        external\n        returns (\n            bool shouldDecrementCount,\n            uint16 newPlayerCount,\n            uint256 newTotalStaked,\n            TournamentCore.Status newStatus\n        )\n    {\n        uint256 refundAmount = player.stakeAmount;\n        TournamentCore.Status currentStatus = context.status;\n\n        // Handle cancelled tournament (simple case)\n        if (currentStatus == TournamentCore.Status.Cancelled) {\n            newStatus = currentStatus;\n            newPlayerCount = playerCount;\n            newTotalStaked = totalStaked;\n            shouldDecrementCount = false;\n        }\n        // Handle voluntary withdrawal\n        else {\n            player.exists = false;\n            shouldDecrementCount = true;\n\n            unchecked {\n                newPlayerCount = playerCount - 1;\n                newTotalStaked = totalStaked - refundAmount;\n            }\n\n            // Determine new status based on current status\n            if (currentStatus == TournamentCore.Status.Locked) {\n                if (\n                    context.maxPlayers == 0 ||\n                    newPlayerCount < context.maxPlayers\n                ) {\n                    newStatus = TournamentCore.Status.Open;\n                    TournamentLifecycle.transitionToOpen(registry);\n                } else {\n                    newStatus = currentStatus;\n                }\n            } else if (currentStatus == TournamentCore.Status.PendingStart) {\n                if (\n                    !_areStartConditionsMet(\n                        context.startPlayerCount,\n                        context.startPoolAmount,\n                        newPlayerCount,\n                        newTotalStaked\n                    )\n                ) {\n                    newStatus = TournamentCore.Status.Open;\n                    TournamentLifecycle.transitionToOpen(registry);\n                    TournamentLifecycle.emitRevertToOpen();\n                } else {\n                    newStatus = currentStatus;\n                }\n            } else {\n                newStatus = currentStatus;\n            }\n        }\n\n        player.status = TournamentCore.PlayerStatus.Refunded;\n        IERC20(context.stakeToken).safeTransfer(sender, refundAmount);\n        emit RefundClaimed(sender, refundAmount);\n    }\n\n    function _areStartConditionsMet(\n        uint16 startPlayerCount,\n        uint256 startPoolAmount,\n        uint16 currentPlayerCount,\n        uint256 currentTotalStaked\n    ) internal pure returns (bool) {\n        if (startPlayerCount > 0 && currentPlayerCount < startPlayerCount) {\n            return false;\n        }\n        if (startPoolAmount > 0 && currentTotalStaked < startPoolAmount) {\n            return false;\n        }\n        return true;\n    }\n}\n"
      },
      "project/contracts/tournament/core/libraries/views/Views.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {TournamentCore} from \"./../../TournamentCore.sol\";\nimport {TournamentCalculations} from \"./../calculations/Calculations.sol\";\n\nlibrary TournamentViews {\n    error NotFound();\n\n    function getCurrentCoins(\n        TournamentCore.PlayerResources calldata player,\n        uint256 decayAmount,\n        uint32 gameInterval\n    ) external view returns (uint256) {\n        if (!player.exists) return 0;\n\n        return\n            TournamentCalculations.calculateCurrentCoins(\n                player.coins,\n                player.lastDecayTimestamp,\n                decayAmount,\n                gameInterval\n            );\n    }\n\n    function calculateExitCost(\n        TournamentCore.Status status,\n        TournamentCore.PlayerResources calldata player,\n        uint32 actualStartTime,\n        uint16 exitCostBasePercentBPS,\n        uint16 exitCostCompoundRateBPS,\n        uint32 gameInterval\n    ) external view returns (uint256) {\n        if (status != TournamentCore.Status.Active || !player.exists) return 0;\n\n        return\n            TournamentCalculations.calculateExitCost(\n                player.initialCoins,\n                actualStartTime,\n                exitCostBasePercentBPS,\n                exitCostCompoundRateBPS,\n                gameInterval\n            );\n    }\n\n    function canExit(\n        TournamentCore.Status status,\n        TournamentCore.PlayerResources calldata player,\n        uint256 currentCoins,\n        uint256 exitCost,\n        uint8 exitLivesRequired\n    ) external pure returns (bool) {\n        if (status != TournamentCore.Status.Active) return false;\n        if (player.status != TournamentCore.PlayerStatus.Active) return false;\n        if (!player.exists) return false;\n        if (player.lives < exitLivesRequired) return false;\n        if (player.totalCards != 0) return false;\n        if (currentCoins < exitCost) return false;\n\n        return true;\n    }\n\n    function calculateForfeitPenalty(\n        TournamentCore.PlayerResources calldata player,\n        uint32 endTime,\n        uint32 duration,\n        uint8 forfeitPenaltyType,\n        uint8 forfeitMaxPenalty,\n        uint8 forfeitMinPenalty\n    ) external view returns (uint256) {\n        if (!player.exists) return 0;\n\n        return\n            TournamentCalculations.calculateForfeitPenalty(\n                player.stakeAmount,\n                endTime,\n                duration,\n                forfeitPenaltyType,\n                forfeitMaxPenalty,\n                forfeitMinPenalty\n            );\n    }\n\n    function getCurrentPlayerResources(\n        TournamentCore.PlayerResources memory player,\n        uint256 currentCoins\n    ) external pure returns (TournamentCore.PlayerResources memory) {\n        player.coins = currentCoins;\n        return player;\n    }\n\n    function calculatePrizePerWinner(\n        uint256 totalStaked,\n        uint256 totalForfeitPenalties,\n        uint8 platformFeePercent,\n        uint8 creatorFeePercent,\n        uint256 winnersLength\n    ) external pure returns (uint256) {\n        return\n            TournamentCalculations.calculatePrizePerWinner(\n                totalStaked,\n                totalForfeitPenalties,\n                platformFeePercent,\n                creatorFeePercent,\n                winnersLength\n            );\n    }\n\n    function getExitWindow(\n        uint32 exitWindowStart,\n        uint32 endTime\n    )\n        external\n        view\n        returns (uint32 windowStart, uint32 windowEnd, bool isOpen)\n    {\n        windowStart = exitWindowStart;\n        windowEnd = endTime;\n\n        if (block.timestamp < exitWindowStart) {\n            isOpen = false;\n            return (windowStart, windowEnd, isOpen);\n        }\n\n        isOpen = block.timestamp < endTime;\n    }\n\n    function getCurrentCoinsFromStorage(\n        mapping(address => TournamentCore.PlayerResources) storage players,\n        TournamentCore.Params storage params,\n        address player\n    ) external view returns (uint256) {\n        return\n            TournamentCalculations.calculateCurrentCoins(\n                players[player].coins,\n                players[player].lastDecayTimestamp,\n                params.decayAmount,\n                params.gameInterval\n            );\n    }\n\n    function calculateExitCostFromStorage(\n        mapping(address => TournamentCore.PlayerResources) storage players,\n        TournamentCore.Params storage params,\n        TournamentCore.Status status,\n        uint32 actualStartTime,\n        address player\n    ) external view returns (uint256) {\n        if (status != TournamentCore.Status.Active) return 0;\n        if (!players[player].exists) return 0;\n\n        return\n            TournamentCalculations.calculateExitCost(\n                players[player].initialCoins,\n                actualStartTime,\n                params.exitCostBasePercentBPS,\n                params.exitCostCompoundRateBPS,\n                params.gameInterval\n            );\n    }\n\n    function canExitFromStorage(\n        mapping(address => TournamentCore.PlayerResources) storage players,\n        TournamentCore.Params storage params,\n        TournamentCore.Status status,\n        uint32 actualStartTime,\n        address player\n    ) external view returns (bool) {\n        if (status != TournamentCore.Status.Active) return false;\n\n        TournamentCore.PlayerResources storage playerData = players[player];\n        if (!playerData.exists) return false;\n        if (playerData.status != TournamentCore.PlayerStatus.Active)\n            return false;\n        if (playerData.lives < params.exitLivesRequired) return false;\n        if (playerData.totalCards != 0) return false;\n\n        uint256 currentCoins = TournamentCalculations.calculateCurrentCoins(\n            playerData.coins,\n            playerData.lastDecayTimestamp,\n            params.decayAmount,\n            params.gameInterval\n        );\n\n        uint256 exitCost = TournamentCalculations.calculateExitCost(\n            playerData.initialCoins,\n            actualStartTime,\n            params.exitCostBasePercentBPS,\n            params.exitCostCompoundRateBPS,\n            params.gameInterval\n        );\n\n        return currentCoins >= exitCost;\n    }\n\n    function calculateForfeitPenaltyFromStorage(\n        mapping(address => TournamentCore.PlayerResources) storage players,\n        TournamentCore.Params storage params,\n        uint32 endTime,\n        address player\n    ) external view returns (uint256) {\n        if (!players[player].exists) return 0;\n\n        return\n            TournamentCalculations.calculateForfeitPenalty(\n                players[player].stakeAmount,\n                endTime,\n                params.duration,\n                uint8(params.forfeitPenaltyType),\n                params.forfeitMaxPenalty,\n                params.forfeitMinPenalty\n            );\n    }\n\n    function getCurrentPlayerResourcesFromStorage(\n        mapping(address => TournamentCore.PlayerResources) storage players,\n        TournamentCore.Params storage params,\n        address player\n    ) external view returns (TournamentCore.PlayerResources memory) {\n        if (!players[player].exists) revert NotFound();\n\n        TournamentCore.PlayerResources memory playerData = players[player];\n\n        playerData.coins = TournamentCalculations.calculateCurrentCoins(\n            playerData.coins,\n            playerData.lastDecayTimestamp,\n            params.decayAmount,\n            params.gameInterval\n        );\n\n        return playerData;\n    }\n\n    function getPlayerFromStorage(\n        mapping(address => TournamentCore.PlayerResources) storage players,\n        address player\n    ) external view returns (TournamentCore.PlayerResources memory) {\n        if (!players[player].exists) revert NotFound();\n        return players[player];\n    }\n}\n"
      },
      "project/contracts/tournament/core/TournamentCore.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nlibrary TournamentCore {\n    enum Status {\n        Open,\n        Locked,\n        PendingStart,\n        Active,\n        Ended,\n        Cancelled\n    }\n\n    enum PlayerStatus {\n        Active,\n        Exited,\n        Forfeited,\n        PrizeClaimed,\n        Refunded\n    }\n\n    enum ForfeitPenaltyType {\n        Fixed,\n        TimeBased\n    }\n\n    struct Params {\n        uint32 startTimestamp;\n        uint32 duration;\n        uint32 gameInterval;\n        uint16 minPlayers;\n        uint16 maxPlayers;\n        uint16 startPlayerCount;\n        uint256 startPoolAmount;\n        address stakeToken;\n        uint256 minStake;\n        uint256 maxStake;\n        uint40 coinConversionRate;\n        uint256 decayAmount;\n        uint8 initialLives;\n        uint8 cardsPerType;\n        uint8 exitLivesRequired;\n        uint16 exitCostBasePercentBPS;\n        uint16 exitCostCompoundRateBPS;\n        uint8 creatorFeePercent;\n        uint8 platformFeePercent;\n        bool forfeitAllowed;\n        ForfeitPenaltyType forfeitPenaltyType;\n        uint8 forfeitMaxPenalty;\n        uint8 forfeitMinPenalty;\n        address deckCatalog;\n        uint8[] excludedCardIds;\n        uint256 deckDrawCost;\n        uint256 deckShuffleCost;\n        uint256 deckPeekCost;\n    }\n\n    struct PlayerResources {\n        uint256 initialCoins;\n        uint256 coins;\n        uint256 stakeAmount;\n        uint32 lastDecayTimestamp;\n        uint16 combatCount;\n        uint8 lives;\n        uint8 totalCards;\n        PlayerStatus status;\n        bool exists;\n        bool inCombat;\n    }\n\n    uint32 public constant RECOMMENDED_SECONDS_PER_CARD = 360;\n    uint32 public constant MIN_DURATION = 1200;\n    uint8 public constant MIN_CARDS_PER_TYPE = 1;\n    uint8 public constant MAX_CARDS_PER_TYPE = 10;\n    uint16 public constant MIN_PLAYERS_REQUIRED = 2;\n    uint16 public constant MAX_PLAYERS_LIMIT = 10000;\n    uint32 public constant MIN_GAME_INTERVAL = 60;\n    uint32 public constant MAX_GAME_INTERVAL = 3600;\n    uint8 public constant MAX_CREATOR_FEE_PERCENT = 5;\n    uint8 public constant MAX_PLATFORM_FEE = 5;\n    uint8 public constant MAX_COMBINED_FEE_PERCENT = 10;\n    uint8 public constant MIN_INTERVALS_REQUIRED = 3;\n}\n"
      },
      "project/contracts/tournament/infrastructure/registry/TournamentRegistry.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {TournamentCore} from \"./../../core/TournamentCore.sol\";\n\n/**\n * Architecture:\n * - Each tournament = 5 contracts (Hub and 4 modules: Combat, Deck, Trading, Randomizer)\n * - Hub is the primary contract - owns player state, updates status\n * - Registry tracks complete systems and provides reverse lookups\n */\ncontract TournamentRegistry is Ownable {\n    struct TournamentSystem {\n        address hub;\n        address combat;\n        address mysteryDeck;\n        address trading;\n        address randomizer;\n        bool exists;\n    }\n\n    mapping(address => bool) private _hasFactoryRole;\n\n    // Tournament tracking (by hub address - primary)\n    address[] private _allTournaments;\n    mapping(address => TournamentSystem) private _tournamentSystems;\n    mapping(address => bool) private _isRegistered;\n\n    // Status tracking (by hub address)\n    mapping(address => TournamentCore.Status) private _tournamentStatus;\n    mapping(TournamentCore.Status => address[]) private _tournamentsByStatus;\n    mapping(address => mapping(TournamentCore.Status => uint256))\n        private _tournamentStatusIndex;\n\n    // Reverse lookups (module address => hub address)\n    mapping(address => address) private _moduleToHub;\n\n    event FactoryRoleGranted(address indexed factory);\n    event FactoryRoleRevoked(address indexed factory);\n    event TournamentSystemRegistered(\n        address indexed hub,\n        address indexed combat,\n        address mysteryDeck,\n        address trading,\n        address randomizer,\n        TournamentCore.Status initialStatus\n    );\n    event TournamentStatusUpdated(\n        address indexed hub,\n        TournamentCore.Status oldStatus,\n        TournamentCore.Status newStatus\n    );\n\n    error InvalidAddress();\n    error OnlyFactory();\n    error AlreadyRegistered();\n    error NotRegistered();\n    error ModuleAlreadyUsed();\n\n    modifier onlyRegisteredHub(address hub) {\n        if (!_isRegistered[hub]) revert NotRegistered();\n        _;\n    }\n\n    constructor() Ownable(msg.sender) {}\n\n    function grantFactoryRole(address factory) external onlyOwner {\n        if (factory == address(0)) revert InvalidAddress();\n        _hasFactoryRole[factory] = true;\n        emit FactoryRoleGranted(factory);\n    }\n\n    function revokeFactoryRole(address factory) external onlyOwner {\n        _hasFactoryRole[factory] = false;\n        emit FactoryRoleRevoked(factory);\n    }\n\n    function hasFactoryRole(address factory) external view returns (bool) {\n        return _hasFactoryRole[factory];\n    }\n\n    /**\n     * @notice Register a complete tournament system (5 contracts)\n     * @dev Called by TournamentFactory after deploying all 5 minimal proxies\n     * Validates all addresses and ensures no module is reused across tournaments\n     */\n    function registerTournamentSystem(\n        address hub,\n        address combat,\n        address mysteryDeck,\n        address trading,\n        address randomizer\n    ) external {\n        if (!_hasFactoryRole[msg.sender]) revert OnlyFactory();\n        if (_isRegistered[hub]) revert AlreadyRegistered();\n        if (\n            hub == address(0) ||\n            combat == address(0) ||\n            randomizer == address(0) ||\n            trading == address(0) ||\n            mysteryDeck == address(0)\n        ) revert InvalidAddress();\n\n        if (\n            _moduleToHub[combat] != address(0) ||\n            _moduleToHub[randomizer] != address(0) ||\n            _moduleToHub[mysteryDeck] != address(0) ||\n            _moduleToHub[trading] != address(0)\n        ) revert ModuleAlreadyUsed();\n\n        _tournamentSystems[hub] = TournamentSystem({\n            hub: hub,\n            combat: combat,\n            mysteryDeck: mysteryDeck,\n            trading: trading,\n            randomizer: randomizer,\n            exists: true\n        });\n\n        _isRegistered[hub] = true;\n        _allTournaments.push(hub);\n\n        // Setup reverse lookup\n        _moduleToHub[hub] = hub; // Hub points to itself\n        _moduleToHub[combat] = hub;\n        _moduleToHub[mysteryDeck] = hub;\n        _moduleToHub[trading] = hub;\n        _moduleToHub[randomizer] = hub;\n\n        // Status tracking\n        TournamentCore.Status initialStatus = TournamentCore.Status.Open;\n        _tournamentStatus[hub] = initialStatus;\n\n        uint256 statusArrayLength = _tournamentsByStatus[initialStatus].length;\n        _tournamentStatusIndex[hub][initialStatus] = statusArrayLength;\n        _tournamentsByStatus[initialStatus].push(hub);\n\n        emit TournamentSystemRegistered(\n            hub,\n            combat,\n            mysteryDeck,\n            trading,\n            randomizer,\n            initialStatus\n        );\n    }\n\n    function updateTournamentStatus(TournamentCore.Status newStatus) external {\n        address hub = msg.sender;\n\n        if (!_isRegistered[hub]) revert NotRegistered();\n\n        TournamentCore.Status oldStatus = _tournamentStatus[hub];\n\n        // Early exit if status hasn't changed\n        if (oldStatus == newStatus) return;\n\n        // Remove from old status array\n        _removeFromStatusArray(hub, oldStatus);\n\n        // Add to new status array\n        uint256 newStatusArrayLength = _tournamentsByStatus[newStatus].length;\n        _tournamentStatusIndex[hub][newStatus] = newStatusArrayLength;\n        _tournamentsByStatus[newStatus].push(hub);\n        _tournamentStatus[hub] = newStatus;\n\n        emit TournamentStatusUpdated(hub, oldStatus, newStatus);\n    }\n\n    function _removeFromStatusArray(\n        address hub,\n        TournamentCore.Status status\n    ) private onlyRegisteredHub(hub) {\n        uint256 indexToRemove = _tournamentStatusIndex[hub][status];\n\n        unchecked {\n            // Safe: array length is always > 0 when removing (hub is registered in this status)\n            uint256 lastIndex = _tournamentsByStatus[status].length - 1;\n\n            if (indexToRemove != lastIndex) {\n                address lastTournament = _tournamentsByStatus[status][\n                    lastIndex\n                ];\n                _tournamentsByStatus[status][indexToRemove] = lastTournament;\n                _tournamentStatusIndex[lastTournament][status] = indexToRemove;\n            }\n\n            _tournamentsByStatus[status].pop();\n        }\n    }\n\n    /**\n     * @notice Get complete tournament system by hub address\n     */\n    function getTournamentSystem(\n        address hub\n    ) external view onlyRegisteredHub(hub) returns (TournamentSystem memory) {\n        return _tournamentSystems[hub];\n    }\n\n    /**\n     * @notice Get hub address from any module address\n     * @dev Useful when you have a Combat/Deck/Trading/Randomizer address\n     */\n    function getHubAddress(\n        address moduleAddress\n    ) external view returns (address) {\n        address hub = _moduleToHub[moduleAddress];\n        if (hub == address(0)) revert NotRegistered();\n        return hub;\n    }\n\n    /**\n     * @notice Get tournament system by any module address\n     */\n    function getTournamentSystemByModule(\n        address moduleAddress\n    ) external view returns (TournamentSystem memory) {\n        address hub = _moduleToHub[moduleAddress];\n        if (hub == address(0)) revert NotRegistered();\n        return _tournamentSystems[hub];\n    }\n\n    /**\n     * @notice Get all tournament hub addresses\n     */\n    function getAllTournaments() external view returns (address[] memory) {\n        return _allTournaments;\n    }\n\n    /**\n     * @notice Get tournaments by status (returns hub addresses)\n     */\n    function getTournamentsByStatus(\n        TournamentCore.Status status\n    ) external view returns (address[] memory) {\n        return _tournamentsByStatus[status];\n    }\n\n    function getTournamentStatus(\n        address hub\n    ) external view onlyRegisteredHub(hub) returns (uint8) {\n        return uint8(_tournamentStatus[hub]);\n    }\n\n    function isTournamentRegistered(address hub) external view returns (bool) {\n        return _isRegistered[hub];\n    }\n\n    function isModuleRegistered(\n        address moduleAddress\n    ) external view returns (bool) {\n        return _moduleToHub[moduleAddress] != address(0);\n    }\n\n    function getTournamentCount() external view returns (uint256) {\n        return _allTournaments.length;\n    }\n}\n"
      },
      "project/contracts/tournament/infrastructure/token-whitelist/TournamentTokenWhitelist.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract TournamentTokenWhitelist is Ownable {\n    struct TokenInfo {\n        bool exists;\n        bool isPaused;\n        uint8 index;\n    }\n\n    uint8 public constant MAX_TOKENS = 255;\n\n    address[] private _tokens;\n    mapping(address => TokenInfo) private _tokenInfo;\n\n    event TokenWhitelisted(address indexed token);\n    event TokenPaused(address indexed token, string reason);\n    event TokenUnpaused(address indexed token);\n\n    error InvalidTokenAddress();\n    error AlreadyExists();\n    error NotFound();\n    error MaxTokensReached();\n\n    constructor() Ownable(msg.sender) {}\n\n    function addToken(address token) external onlyOwner {\n        if (token == address(0)) revert InvalidTokenAddress();\n\n        TokenInfo storage info = _tokenInfo[token];\n        if (info.exists) revert AlreadyExists();\n\n        uint256 currentLength = _tokens.length;\n        if (currentLength >= MAX_TOKENS) revert MaxTokensReached();\n\n        info.exists = true;\n        info.isPaused = false;\n        info.index = uint8(currentLength);\n\n        _tokens.push(token);\n\n        emit TokenWhitelisted(token);\n    }\n\n    function pauseToken(\n        address token,\n        string calldata reason\n    ) external onlyOwner {\n        TokenInfo storage info = _tokenInfo[token];\n        if (!info.exists) revert NotFound();\n\n        info.isPaused = true;\n        emit TokenPaused(token, reason);\n    }\n\n    function unpauseToken(address token) external onlyOwner {\n        TokenInfo storage info = _tokenInfo[token];\n        if (!info.exists) revert NotFound();\n\n        info.isPaused = false;\n        emit TokenUnpaused(token);\n    }\n\n    function isWhitelisted(address token) external view returns (bool) {\n        TokenInfo storage info = _tokenInfo[token];\n        return info.exists && !info.isPaused;\n    }\n\n    function isPaused(address token) external view returns (bool) {\n        return _tokenInfo[token].isPaused;\n    }\n\n    function isTokenRegistered(address token) external view returns (bool) {\n        return _tokenInfo[token].exists;\n    }\n\n    function getTokens() external view returns (address[] memory) {\n        return _tokens;\n    }\n\n    function getTokenCount() external view returns (uint256) {\n        return _tokens.length;\n    }\n\n    function getRemainingCapacity() external view returns (uint256) {\n        unchecked {\n            return MAX_TOKENS - _tokens.length;\n        }\n    }\n\n    function getToken(\n        address token\n    ) external view returns (bool whitelisted, bool paused, uint8 index) {\n        TokenInfo storage info = _tokenInfo[token];\n        return (info.exists, info.isPaused, info.index);\n    }\n}\n"
      },
      "project/contracts/tournament/modules/hub/libraries/player/Player.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {TournamentCore} from \"./../../../../core/TournamentCore.sol\";\nimport {TournamentPlayerActions} from \"./../../../../core/libraries/player-actions/PlayerActions.sol\";\nimport {TournamentLifecycle} from \"./../../../../core/libraries/lifecycle/Lifecycle.sol\";\nimport {TournamentRegistry} from \"./../../../../infrastructure/registry/TournamentRegistry.sol\";\n\nlibrary TournamentHubPlayer {\n    event ExitWindowOpened(uint32 windowStart, uint32 windowEnd);\n\n    error InvalidStatus();\n    error AlreadyJoined();\n    error CannotExit();\n    error ExitWindowNotOpen();\n    error ForfeitNotAllowed();\n    error AlreadyForfeited();\n    error AlreadyExited();\n\n    struct JoinResult {\n        TournamentCore.Status newStatus;\n        uint32 newActualStartTime;\n        uint32 newEndTime;\n        uint32 newExitWindowStart;\n    }\n\n    function processJoin(\n        mapping(address => TournamentCore.PlayerResources) storage players,\n        TournamentCore.Params storage params,\n        TournamentCore.Status status,\n        uint16 playerCount,\n        uint256 totalStaked,\n        TournamentRegistry registry,\n        address sender,\n        uint256 stakeAmount\n    ) external returns (JoinResult memory result) {\n        if (status != TournamentCore.Status.Open) revert InvalidStatus();\n        if (players[sender].exists) revert AlreadyJoined();\n\n        TournamentPlayerActions.validateEntry(\n            params.minStake,\n            params.maxStake,\n            params.maxPlayers,\n            stakeAmount,\n            playerCount\n        );\n\n        TournamentPlayerActions.processJoin(\n            players[sender],\n            params.stakeToken,\n            sender,\n            stakeAmount,\n            params.coinConversionRate,\n            params.initialLives,\n            params.cardsPerType\n        );\n\n        (\n            result.newStatus,\n            result.newActualStartTime,\n            result.newEndTime,\n            result.newExitWindowStart\n        ) = TournamentLifecycle.checkAndTransition(\n            status,\n            params,\n            playerCount + 1,\n            totalStaked + stakeAmount,\n            registry\n        );\n    }\n\n    function processExit(\n        mapping(address => TournamentCore.PlayerResources) storage players,\n        address[] storage winners,\n        TournamentCore.Status status,\n        uint32 exitWindowStart,\n        address sender,\n        bool canExit\n    ) external {\n        if (status != TournamentCore.Status.Active) revert InvalidStatus();\n        if (block.timestamp < exitWindowStart) revert ExitWindowNotOpen();\n        if (!canExit) revert CannotExit();\n\n        TournamentPlayerActions.processExit(players[sender], sender);\n        winners.push(sender);\n    }\n\n    function processForfeit(\n        mapping(address => TournamentCore.PlayerResources) storage players,\n        TournamentCore.Params storage params,\n        TournamentCore.Status status,\n        address sender,\n        uint256 penaltyAmount\n    ) external {\n        if (status != TournamentCore.Status.Active) revert InvalidStatus();\n        if (!params.forfeitAllowed) revert ForfeitNotAllowed();\n\n        TournamentCore.PlayerResources storage player = players[sender];\n        if (player.status == TournamentCore.PlayerStatus.Forfeited)\n            revert AlreadyForfeited();\n        if (player.status == TournamentCore.PlayerStatus.Exited)\n            revert AlreadyExited();\n\n        TournamentPlayerActions.processForfeit(\n            player,\n            params.stakeToken,\n            sender,\n            penaltyAmount\n        );\n    }\n}\n"
      },
      "project/contracts/tournament/modules/hub/libraries/prize/Prize.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {TournamentCore} from \"./../../../../core/TournamentCore.sol\";\nimport {TournamentViews} from \"./../../../../core/libraries/views/Views.sol\";\n\nlibrary TournamentHubPrize {\n    using SafeERC20 for IERC20;\n\n    event PrizeClaimed(address indexed player, uint256 amount);\n    event CreatorFeesCollected(address indexed creator, uint256 amount);\n\n    error NotWinner();\n    error AlreadyClaimed();\n    error InvalidStatus();\n    error NoWinners();\n    error OnlyCreator();\n\n    function claimPrize(\n        mapping(address => TournamentCore.PlayerResources) storage players,\n        TournamentCore.Params storage params,\n        TournamentCore.Status status,\n        uint256 totalStaked,\n        uint256 totalForfeitPenalties,\n        uint256 winnersLength,\n        address sender\n    ) external {\n        if (status != TournamentCore.Status.Ended) revert InvalidStatus();\n        if (winnersLength == 0) revert NoWinners();\n\n        TournamentCore.PlayerResources storage player = players[sender];\n        if (player.status == TournamentCore.PlayerStatus.PrizeClaimed)\n            revert AlreadyClaimed();\n        if (player.status != TournamentCore.PlayerStatus.Exited)\n            revert NotWinner();\n\n        uint256 prizePerWinner = TournamentViews.calculatePrizePerWinner(\n            totalStaked,\n            totalForfeitPenalties,\n            params.platformFeePercent,\n            params.creatorFeePercent,\n            winnersLength\n        );\n\n        player.status = TournamentCore.PlayerStatus.PrizeClaimed;\n\n        IERC20(params.stakeToken).safeTransfer(sender, prizePerWinner);\n        emit PrizeClaimed(sender, prizePerWinner);\n    }\n\n    function collectCreatorFees(\n        TournamentCore.Params storage params,\n        TournamentCore.Status status,\n        uint256 totalStaked,\n        uint256 totalForfeitPenalties,\n        address creator,\n        address sender\n    ) external returns (bool) {\n        if (sender != creator) revert OnlyCreator();\n        if (status != TournamentCore.Status.Ended) revert InvalidStatus();\n\n        uint256 totalPrizePool = totalStaked + totalForfeitPenalties;\n\n        unchecked {\n            uint256 creatorFee = (totalPrizePool * params.creatorFeePercent) /\n                100;\n            IERC20(params.stakeToken).safeTransfer(creator, creatorFee);\n            emit CreatorFeesCollected(creator, creatorFee);\n        }\n\n        return true;\n    }\n}\n"
      },
      "project/contracts/tournament/modules/hub/libraries/status/Status.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {TournamentCore} from \"./../../../../core/TournamentCore.sol\";\nimport {TournamentLifecycle} from \"./../../../../core/libraries/lifecycle/Lifecycle.sol\";\nimport {TournamentPlayerActions} from \"./../../../../core/libraries/player-actions/PlayerActions.sol\";\nimport {TournamentRegistry} from \"./../../../../infrastructure/registry/TournamentRegistry.sol\";\n\nlibrary TournamentHubStatus {\n    struct StatusUpdateResult {\n        TournamentCore.Status newStatus;\n        uint32 newActualStartTime;\n        uint32 newEndTime;\n        uint32 newExitWindowStart;\n        bool shouldEmitExitWindow;\n        bool shouldTransitionToEnded;\n    }\n\n    function applyDecayAndUpdateStatus(\n        mapping(address => TournamentCore.PlayerResources) storage players,\n        TournamentCore.Params storage params,\n        TournamentCore.Status currentStatus,\n        uint16 playerCount,\n        uint256 totalStaked,\n        uint256 totalForfeitPenalties,\n        uint256 endTime,\n        uint256 winnersLength,\n        TournamentRegistry registry,\n        address sender\n    ) external returns (StatusUpdateResult memory result) {\n        // Apply decay first\n        TournamentPlayerActions.applyDecay(\n            players[sender],\n            sender,\n            params.decayAmount,\n            params.gameInterval\n        );\n\n        // Check and transition status\n        (\n            result.newStatus,\n            result.newActualStartTime,\n            result.newEndTime,\n            result.newExitWindowStart\n        ) = TournamentLifecycle.checkAndTransition(\n            currentStatus,\n            params,\n            playerCount,\n            totalStaked,\n            registry\n        );\n\n        result.shouldEmitExitWindow = result.newExitWindowStart > 0;\n\n        // Check if should transition to ended\n        if (\n            result.newStatus == TournamentCore.Status.Active &&\n            block.timestamp >= endTime\n        ) {\n            TournamentLifecycle.transitionToEnded(\n                registry,\n                totalStaked,\n                totalForfeitPenalties,\n                winnersLength\n            );\n            result.newStatus = TournamentCore.Status.Ended;\n            result.shouldTransitionToEnded = true;\n        }\n    }\n\n    function updateStatusOnly(\n        TournamentCore.Params storage params,\n        TournamentCore.Status currentStatus,\n        uint16 playerCount,\n        uint256 totalStaked,\n        uint256 totalForfeitPenalties,\n        uint256 endTime,\n        uint256 winnersLength,\n        TournamentRegistry registry\n    ) external returns (StatusUpdateResult memory result) {\n        (\n            result.newStatus,\n            result.newActualStartTime,\n            result.newEndTime,\n            result.newExitWindowStart\n        ) = TournamentLifecycle.checkAndTransition(\n            currentStatus,\n            params,\n            playerCount,\n            totalStaked,\n            registry\n        );\n\n        result.shouldEmitExitWindow = result.newExitWindowStart > 0;\n\n        if (\n            result.newStatus == TournamentCore.Status.Active &&\n            block.timestamp >= endTime\n        ) {\n            TournamentLifecycle.transitionToEnded(\n                registry,\n                totalStaked,\n                totalForfeitPenalties,\n                winnersLength\n            );\n            result.newStatus = TournamentCore.Status.Ended;\n            result.shouldTransitionToEnded = true;\n        }\n    }\n\n    function checkEarlyEnd(\n        uint16 activePlayerCount,\n        uint256 totalStaked,\n        uint256 totalForfeitPenalties,\n        uint256 winnersLength,\n        TournamentRegistry registry\n    ) external returns (bool shouldEnd) {\n        if (activePlayerCount == 0) {\n            TournamentLifecycle.transitionToEnded(\n                registry,\n                totalStaked,\n                totalForfeitPenalties,\n                winnersLength\n            );\n            return true;\n        }\n        return false;\n    }\n}\n"
      },
      "project/contracts/tournament/modules/hub/TournamentHub.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {Initializable} from \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport {TournamentCore} from \"./../../core/TournamentCore.sol\";\nimport {TournamentLifecycle} from \"./../../core/libraries/lifecycle/Lifecycle.sol\";\nimport {TournamentViews} from \"./../../core/libraries/views/Views.sol\";\nimport {TournamentRefund} from \"./../../core/libraries/refund/Refund.sol\";\nimport {TournamentHubPrize} from \"./libraries/prize/Prize.sol\";\nimport {TournamentHubPlayer} from \"./libraries/player/Player.sol\";\nimport {TournamentHubStatus} from \"./libraries/status/Status.sol\";\nimport {TournamentTokenWhitelist} from \"./../../infrastructure/token-whitelist/TournamentTokenWhitelist.sol\";\nimport {TournamentRegistry} from \"./../../infrastructure/registry/TournamentRegistry.sol\";\n\ncontract TournamentHub is Initializable {\n    address public admin;\n    bool public emergencyCancelled;\n    TournamentCore.Status public status;\n    uint16 public playerCount;\n    uint16 public activePlayerCount;\n    bool public creatorFeesCollected;\n\n    address public creator;\n    uint32 public actualStartTime;\n    uint32 public endTime;\n    uint32 public exitWindowStart;\n\n    address public combat;\n    address public mysteryDeck;\n    address public trading;\n    address public randomizer;\n\n    uint256 public totalStaked;\n    uint256 public totalForfeitPenalties;\n\n    mapping(address => bool) private _hasModuleRole;\n    mapping(address => TournamentCore.PlayerResources) internal players;\n\n    address[] public winners;\n\n    TournamentTokenWhitelist public tokenWhitelist;\n    TournamentCore.Params internal params;\n    TournamentRegistry public registry;\n\n    event ExitWindowOpened(uint32 windowStart, uint32 windowEnd);\n    event PlayerResourcesUpdated(\n        address indexed player,\n        address indexed module\n    );\n    event EmergencyCancellation(address indexed admin, uint32 calledAtTime);\n    event RandomnessFailure(uint32 timestamp);\n\n    error EmergencyCancelled();\n    error OnlyPlatformAdmin();\n    error NotFound();\n    error CannotRefundAfterStart();\n    error AlreadyClaimed();\n    error InvalidStatus();\n    error InvalidAddress();\n    error UnauthorizedRandomizer();\n    error UnauthorizedHub();\n    error AlreadyCancelled();\n    error AlreadyEnded();\n\n    modifier notEmergencyCancelled() {\n        if (emergencyCancelled) revert EmergencyCancelled();\n        _;\n    }\n\n    modifier onlyPlayer() {\n        if (!players[msg.sender].exists) revert NotFound();\n        _;\n    }\n\n    function initialize(\n        TournamentCore.Params calldata _p,\n        address _creator,\n        address _combat,\n        address _deck,\n        address _trading,\n        address _rand,\n        address _registry,\n        address _tokens,\n        address _admin\n    ) external initializer {\n        if (\n            _combat == address(0) ||\n            _deck == address(0) ||\n            _trading == address(0) ||\n            _rand == address(0)\n        ) revert InvalidAddress();\n\n        combat = _combat;\n        mysteryDeck = _deck;\n        trading = _trading;\n        randomizer = _rand;\n\n        _hasModuleRole[_combat] = true;\n        _hasModuleRole[_deck] = true;\n        _hasModuleRole[_trading] = true;\n\n        params = _p;\n        creator = _creator;\n        tokenWhitelist = TournamentTokenWhitelist(_tokens);\n        registry = TournamentRegistry(_registry);\n        status = TournamentCore.Status.Open;\n        admin = _admin;\n    }\n\n    function updatePlayerResources(\n        address p,\n        TournamentCore.PlayerResources calldata resources\n    ) external {\n        if (!_hasModuleRole[msg.sender]) revert UnauthorizedHub();\n        players[p] = resources;\n        emit PlayerResourcesUpdated(p, msg.sender);\n    }\n\n    function emergencyCancel() external {\n        if (msg.sender != admin) revert OnlyPlatformAdmin();\n        if (status == TournamentCore.Status.Ended) revert AlreadyEnded();\n        if (emergencyCancelled) revert AlreadyCancelled();\n\n        emergencyCancelled = true;\n        status = TournamentCore.Status.Cancelled;\n        TournamentLifecycle.emergencyCancel(registry, admin);\n        emit EmergencyCancellation(admin, uint32(block.timestamp));\n    }\n\n    function handleFailedRandomness() external {\n        if (msg.sender != randomizer) revert UnauthorizedRandomizer();\n        if (\n            status != TournamentCore.Status.Open &&\n            status != TournamentCore.Status.Locked\n        ) revert InvalidStatus();\n\n        status = TournamentCore.Status.Cancelled;\n        TournamentLifecycle.emergencyCancel(registry, randomizer);\n        emit RandomnessFailure(uint32(block.timestamp));\n    }\n\n    function joinTournament(uint256 stake) external notEmergencyCancelled {\n        TournamentHubPlayer.JoinResult memory r = TournamentHubPlayer\n            .processJoin(\n                players,\n                params,\n                status,\n                playerCount,\n                totalStaked,\n                registry,\n                msg.sender,\n                stake\n            );\n\n        unchecked {\n            playerCount++;\n            activePlayerCount++;\n        }\n        totalStaked += stake;\n\n        status = r.newStatus;\n        if (r.newActualStartTime > 0) actualStartTime = r.newActualStartTime;\n        if (r.newEndTime > 0) endTime = r.newEndTime;\n        if (r.newExitWindowStart > 0) {\n            exitWindowStart = r.newExitWindowStart;\n            emit ExitWindowOpened(exitWindowStart, endTime);\n        }\n    }\n\n    function exit() external onlyPlayer notEmergencyCancelled {\n        if (status != TournamentCore.Status.Active) revert InvalidStatus();\n\n        TournamentHubStatus.StatusUpdateResult memory r = TournamentHubStatus\n            .applyDecayAndUpdateStatus(\n                players,\n                params,\n                status,\n                playerCount,\n                totalStaked,\n                totalForfeitPenalties,\n                endTime,\n                winners.length,\n                registry,\n                msg.sender\n            );\n\n        _applyStatusUpdate(r);\n\n        TournamentHubPlayer.processExit(\n            players,\n            winners,\n            status,\n            exitWindowStart,\n            msg.sender,\n            TournamentViews.canExitFromStorage(\n                players,\n                params,\n                status,\n                actualStartTime,\n                msg.sender\n            )\n        );\n\n        unchecked {\n            activePlayerCount--;\n        }\n\n        if (\n            TournamentHubStatus.checkEarlyEnd(\n                activePlayerCount,\n                totalStaked,\n                totalForfeitPenalties,\n                winners.length,\n                registry\n            )\n        ) {\n            status = TournamentCore.Status.Ended;\n        }\n    }\n\n    function forfeit() external onlyPlayer {\n        if (status != TournamentCore.Status.Active) revert InvalidStatus();\n\n        TournamentHubStatus.StatusUpdateResult memory r = TournamentHubStatus\n            .applyDecayAndUpdateStatus(\n                players,\n                params,\n                status,\n                playerCount,\n                totalStaked,\n                totalForfeitPenalties,\n                endTime,\n                winners.length,\n                registry,\n                msg.sender\n            );\n\n        _applyStatusUpdate(r);\n\n        uint256 penalty = TournamentViews.calculateForfeitPenaltyFromStorage(\n            players,\n            params,\n            endTime,\n            msg.sender\n        );\n\n        TournamentHubPlayer.processForfeit(\n            players,\n            params,\n            status,\n            msg.sender,\n            penalty\n        );\n\n        unchecked {\n            activePlayerCount--;\n        }\n        totalForfeitPenalties += penalty;\n\n        if (\n            TournamentHubStatus.checkEarlyEnd(\n                activePlayerCount,\n                totalStaked,\n                totalForfeitPenalties,\n                winners.length,\n                registry\n            )\n        ) {\n            status = TournamentCore.Status.Ended;\n        }\n    }\n\n    function claimPrize() external onlyPlayer {\n        TournamentHubStatus.StatusUpdateResult memory r = TournamentHubStatus\n            .updateStatusOnly(\n                params,\n                status,\n                playerCount,\n                totalStaked,\n                totalForfeitPenalties,\n                endTime,\n                winners.length,\n                registry\n            );\n\n        _applyStatusUpdate(r);\n\n        TournamentHubPrize.claimPrize(\n            players,\n            params,\n            status,\n            totalStaked,\n            totalForfeitPenalties,\n            winners.length,\n            msg.sender\n        );\n    }\n\n    function claimRefund() external onlyPlayer {\n        TournamentCore.Status s = status;\n\n        if (\n            s == TournamentCore.Status.Active ||\n            s == TournamentCore.Status.Ended\n        ) revert CannotRefundAfterStart();\n\n        TournamentCore.PlayerResources storage p = players[msg.sender];\n        if (p.status == TournamentCore.PlayerStatus.Refunded)\n            revert AlreadyClaimed();\n\n        (\n            bool shouldDec,\n            uint16 newPC,\n            uint256 newTS,\n            TournamentCore.Status newS\n        ) = TournamentRefund.processRefund(\n                p,\n                TournamentRefund.RefundContext({\n                    stakeToken: params.stakeToken,\n                    status: s,\n                    maxPlayers: params.maxPlayers,\n                    startPlayerCount: params.startPlayerCount,\n                    startPoolAmount: params.startPoolAmount\n                }),\n                registry,\n                msg.sender,\n                playerCount,\n                totalStaked\n            );\n\n        if (shouldDec) {\n            unchecked {\n                playerCount = newPC;\n                totalStaked = newTS;\n            }\n        }\n\n        if (newS != s) status = newS;\n    }\n\n    function collectCreatorFees() external {\n        TournamentHubStatus.StatusUpdateResult memory r = TournamentHubStatus\n            .updateStatusOnly(\n                params,\n                status,\n                playerCount,\n                totalStaked,\n                totalForfeitPenalties,\n                endTime,\n                winners.length,\n                registry\n            );\n\n        _applyStatusUpdate(r);\n\n        if (creatorFeesCollected) revert AlreadyClaimed();\n\n        creatorFeesCollected = TournamentHubPrize.collectCreatorFees(\n            params,\n            status,\n            totalStaked,\n            totalForfeitPenalties,\n            creator,\n            msg.sender\n        );\n    }\n\n    function updateStatus() external {\n        TournamentHubStatus.StatusUpdateResult memory r = TournamentHubStatus\n            .updateStatusOnly(\n                params,\n                status,\n                playerCount,\n                totalStaked,\n                totalForfeitPenalties,\n                endTime,\n                winners.length,\n                registry\n            );\n\n        _applyStatusUpdate(r);\n    }\n\n    function _applyStatusUpdate(\n        TournamentHubStatus.StatusUpdateResult memory r\n    ) private {\n        status = r.newStatus;\n        if (r.newActualStartTime > 0) actualStartTime = r.newActualStartTime;\n        if (r.newEndTime > 0) endTime = r.newEndTime;\n        if (r.shouldEmitExitWindow) {\n            exitWindowStart = r.newExitWindowStart;\n            emit ExitWindowOpened(exitWindowStart, endTime);\n        }\n    }\n\n    function getCurrentCoins(address p) public view returns (uint256) {\n        return TournamentViews.getCurrentCoinsFromStorage(players, params, p);\n    }\n\n    function calculateExitCost(address p) public view returns (uint256) {\n        return\n            TournamentViews.calculateExitCostFromStorage(\n                players,\n                params,\n                status,\n                actualStartTime,\n                p\n            );\n    }\n\n    function canExit(address p) public view returns (bool) {\n        return\n            TournamentViews.canExitFromStorage(\n                players,\n                params,\n                status,\n                actualStartTime,\n                p\n            );\n    }\n\n    function calculateForfeitPenalty(address p) public view returns (uint256) {\n        return\n            TournamentViews.calculateForfeitPenaltyFromStorage(\n                players,\n                params,\n                endTime,\n                p\n            );\n    }\n\n    function getCurrentPlayerResources(\n        address p\n    ) external view returns (TournamentCore.PlayerResources memory) {\n        return\n            TournamentViews.getCurrentPlayerResourcesFromStorage(\n                players,\n                params,\n                p\n            );\n    }\n\n    function getPlayer(\n        address p\n    ) external view returns (TournamentCore.PlayerResources memory) {\n        return TournamentViews.getPlayerFromStorage(players, p);\n    }\n\n    function getParams() external view returns (TournamentCore.Params memory) {\n        return params;\n    }\n\n    function getExitWindow()\n        external\n        view\n        returns (uint32 windowStart, uint32 windowEnd, bool isOpen)\n    {\n        return TournamentViews.getExitWindow(exitWindowStart, endTime);\n    }\n\n    function hasModuleRole(address m) external view returns (bool) {\n        return _hasModuleRole[m];\n    }\n}\n"
      }
    }
  }
}