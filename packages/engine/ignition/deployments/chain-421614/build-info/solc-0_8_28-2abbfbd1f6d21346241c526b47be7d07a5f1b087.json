{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-2abbfbd1f6d21346241c526b47be7d07a5f1b087",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/tournament/infrastructure/factory/TournamentFactory.sol": "project/contracts/tournament/infrastructure/factory/TournamentFactory.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@pythnetwork/entropy-sdk-solidity/=npm/@pythnetwork/entropy-sdk-solidity@2.0.0/",
        "project/:@pythnetwork/entropy-sdk-solidity/=npm/@pythnetwork/entropy-sdk-solidity@2.0.0/"
      ],
      "viaIR": true
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC1363.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/proxy/Clones.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.20;\n\nimport {Create2} from \"../utils/Create2.sol\";\nimport {Errors} from \"../utils/Errors.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[ERC-1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n */\nlibrary Clones {\n    error CloneArgumentsTooLong();\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        return clone(implementation, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Clones-clone-address-}[clone], but with a `value` parameter to send native currency\n     * to the new contract.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     *\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\n     */\n    function clone(address implementation, uint256 value) internal returns (address instance) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        assembly (\"memory-safe\") {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(value, 0x09, 0x37)\n        }\n        if (instance == address(0)) {\n            revert Errors.FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple times will revert, since\n     * the clones cannot be deployed twice at the same address.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        return cloneDeterministic(implementation, salt, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Clones-cloneDeterministic-address-bytes32-}[cloneDeterministic], but with\n     * a `value` parameter to send native currency to the new contract.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     *\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\n     */\n    function cloneDeterministic(\n        address implementation,\n        bytes32 salt,\n        uint256 value\n    ) internal returns (address instance) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        assembly (\"memory-safe\") {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(value, 0x09, 0x37, salt)\n        }\n        if (instance == address(0)) {\n            revert Errors.FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := and(keccak256(add(ptr, 0x43), 0x55), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation` with custom\n     * immutable arguments. These are provided through `args` and cannot be changed after deployment. To\n     * access the arguments within the implementation, use {fetchCloneArgs}.\n     *\n     * This function uses the create opcode, which should never revert.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     */\n    function cloneWithImmutableArgs(address implementation, bytes memory args) internal returns (address instance) {\n        return cloneWithImmutableArgs(implementation, args, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Clones-cloneWithImmutableArgs-address-bytes-}[cloneWithImmutableArgs], but with a `value`\n     * parameter to send native currency to the new contract.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     *\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\n     */\n    function cloneWithImmutableArgs(\n        address implementation,\n        bytes memory args,\n        uint256 value\n    ) internal returns (address instance) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        bytes memory bytecode = _cloneCodeWithImmutableArgs(implementation, args);\n        assembly (\"memory-safe\") {\n            instance := create(value, add(bytecode, 0x20), mload(bytecode))\n        }\n        if (instance == address(0)) {\n            revert Errors.FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation` with custom\n     * immutable arguments. These are provided through `args` and cannot be changed after deployment. To\n     * access the arguments within the implementation, use {fetchCloneArgs}.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy the clone. Using the same\n     * `implementation`, `args` and `salt` multiple times will revert, since the clones cannot be deployed twice\n     * at the same address.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     */\n    function cloneDeterministicWithImmutableArgs(\n        address implementation,\n        bytes memory args,\n        bytes32 salt\n    ) internal returns (address instance) {\n        return cloneDeterministicWithImmutableArgs(implementation, args, salt, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Clones-cloneDeterministicWithImmutableArgs-address-bytes-bytes32-}[cloneDeterministicWithImmutableArgs],\n     * but with a `value` parameter to send native currency to the new contract.\n     *\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\n     *\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\n     */\n    function cloneDeterministicWithImmutableArgs(\n        address implementation,\n        bytes memory args,\n        bytes32 salt,\n        uint256 value\n    ) internal returns (address instance) {\n        bytes memory bytecode = _cloneCodeWithImmutableArgs(implementation, args);\n        return Create2.deploy(value, salt, bytecode);\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministicWithImmutableArgs}.\n     */\n    function predictDeterministicAddressWithImmutableArgs(\n        address implementation,\n        bytes memory args,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        bytes memory bytecode = _cloneCodeWithImmutableArgs(implementation, args);\n        return Create2.computeAddress(salt, keccak256(bytecode), deployer);\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministicWithImmutableArgs}.\n     */\n    function predictDeterministicAddressWithImmutableArgs(\n        address implementation,\n        bytes memory args,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddressWithImmutableArgs(implementation, args, salt, address(this));\n    }\n\n    /**\n     * @dev Get the immutable args attached to a clone.\n     *\n     * - If `instance` is a clone that was deployed using `clone` or `cloneDeterministic`, this\n     *   function will return an empty array.\n     * - If `instance` is a clone that was deployed using `cloneWithImmutableArgs` or\n     *   `cloneDeterministicWithImmutableArgs`, this function will return the args array used at\n     *   creation.\n     * - If `instance` is NOT a clone deployed using this library, the behavior is undefined. This\n     *   function should only be used to check addresses that are known to be clones.\n     */\n    function fetchCloneArgs(address instance) internal view returns (bytes memory) {\n        bytes memory result = new bytes(instance.code.length - 45); // revert if length is too short\n        assembly (\"memory-safe\") {\n            extcodecopy(instance, add(result, 32), 45, mload(result))\n        }\n        return result;\n    }\n\n    /**\n     * @dev Helper that prepares the initcode of the proxy with immutable args.\n     *\n     * An assembly variant of this function requires copying the `args` array, which can be efficiently done using\n     * `mcopy`. Unfortunately, that opcode is not available before cancun. A pure solidity implementation using\n     * abi.encodePacked is more expensive but also more portable and easier to review.\n     *\n     * NOTE: https://eips.ethereum.org/EIPS/eip-170[EIP-170] limits the length of the contract code to 24576 bytes.\n     * With the proxy code taking 45 bytes, that limits the length of the immutable args to 24531 bytes.\n     */\n    function _cloneCodeWithImmutableArgs(\n        address implementation,\n        bytes memory args\n    ) private pure returns (bytes memory) {\n        if (args.length > 24531) revert CloneArgumentsTooLong();\n        return\n            abi.encodePacked(\n                hex\"61\",\n                uint16(args.length + 45),\n                hex\"3d81600a3d39f3363d3d373d3d3d363d73\",\n                implementation,\n                hex\"5af43d82803e903d91602b57fd5bf3\",\n                args\n            );\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/proxy/utils/Initializable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\n     *\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\n     */\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\n        return INITIALIZABLE_STORAGE;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        bytes32 slot = _initializableStorageSlot();\n        assembly {\n            $.slot := slot\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/utils/SafeERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Create2.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Create2.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev There's no code to deploy.\n     */\n    error Create2EmptyBytecode();\n\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n        if (bytecode.length == 0) {\n            revert Create2EmptyBytecode();\n        }\n        assembly (\"memory-safe\") {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n            // if no address was created, and returndata is not empty, bubble revert\n            if and(iszero(addr), not(iszero(returndatasize()))) {\n                let p := mload(0x40)\n                returndatacopy(p, 0, returndatasize())\n                revert(p, returndatasize())\n            }\n        }\n        if (addr == address(0)) {\n            revert Errors.FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := and(keccak256(start, 85), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Errors.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n *\n * _Available since v5.1._\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "npm/@pythnetwork/entropy-sdk-solidity@2.0.0/EntropyEvents.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"./EntropyStructs.sol\";\n\n// Deprecated -- these events are still emitted, but the lack of indexing\n// makes them hard to use.\ninterface EntropyEvents {\n    event Registered(EntropyStructs.ProviderInfo provider);\n\n    event Requested(EntropyStructs.Request request);\n    event RequestedWithCallback(\n        address indexed provider,\n        address indexed requestor,\n        uint64 indexed sequenceNumber,\n        bytes32 userRandomNumber,\n        EntropyStructs.Request request\n    );\n\n    event Revealed(\n        EntropyStructs.Request request,\n        bytes32 userRevelation,\n        bytes32 providerRevelation,\n        bytes32 blockHash,\n        bytes32 randomNumber\n    );\n    event RevealedWithCallback(\n        EntropyStructs.Request request,\n        bytes32 userRandomNumber,\n        bytes32 providerRevelation,\n        bytes32 randomNumber\n    );\n\n    event CallbackFailed(\n        address indexed provider,\n        address indexed requestor,\n        uint64 indexed sequenceNumber,\n        bytes32 userRandomNumber,\n        bytes32 providerRevelation,\n        bytes32 randomNumber,\n        bytes errorCode\n    );\n\n    event ProviderFeeUpdated(address provider, uint128 oldFee, uint128 newFee);\n\n    event ProviderDefaultGasLimitUpdated(\n        address indexed provider,\n        uint32 oldDefaultGasLimit,\n        uint32 newDefaultGasLimit\n    );\n\n    event ProviderUriUpdated(address provider, bytes oldUri, bytes newUri);\n\n    event ProviderFeeManagerUpdated(\n        address provider,\n        address oldFeeManager,\n        address newFeeManager\n    );\n    event ProviderMaxNumHashesAdvanced(\n        address provider,\n        uint32 oldMaxNumHashes,\n        uint32 newMaxNumHashes\n    );\n\n    event Withdrawal(\n        address provider,\n        address recipient,\n        uint128 withdrawnAmount\n    );\n}\n"
      },
      "npm/@pythnetwork/entropy-sdk-solidity@2.0.0/EntropyEventsV2.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"./EntropyStructs.sol\";\n\n/**\n * @title EntropyEventsV2\n * @notice Interface defining events for the Entropy V2 system, which handles random number generation\n * and provider management on Ethereum.\n * @dev This interface is used to emit events that track the lifecycle of random number requests,\n * provider registrations, and system configurations.\n */\ninterface EntropyEventsV2 {\n    /**\n     * @notice Emitted when a new provider registers with the Entropy system\n     * @param provider The address of the registered provider\n     * @param extraArgs A field for extra data for forward compatibility.\n     */\n    event Registered(address indexed provider, bytes extraArgs);\n\n    /**\n     * @notice Emitted when a user requests a random number from a provider\n     * @param provider The address of the provider handling the request\n     * @param caller The address of the user requesting the random number\n     * @param sequenceNumber A unique identifier for this request\n     * @param userContribution The user's contribution to the random number\n     * @param gasLimit The gas limit for the callback.\n     * @param extraArgs A field for extra data for forward compatibility.\n     */\n    event Requested(\n        address indexed provider,\n        address indexed caller,\n        uint64 indexed sequenceNumber,\n        bytes32 userContribution,\n        uint32 gasLimit,\n        bytes extraArgs\n    );\n\n    /**\n     * @notice Emitted when a provider reveals the generated random number\n     * @param provider The address of the provider that generated the random number\n     * @param caller The address of the user who requested the random number (and who receives a callback)\n     * @param sequenceNumber The unique identifier of the request\n     * @param randomNumber The generated random number\n     * @param userContribution The user's contribution to the random number\n     * @param providerContribution The provider's contribution to the random number\n     * @param callbackFailed Whether the callback to the caller failed\n     * @param callbackReturnValue Return value from the callback. If the callback failed, this field contains\n     * the error code and any additional returned data. Note that \"\" often indicates an out-of-gas error.\n     * If the callback returns more than 256 bytes, only the first 256 bytes of the callback return value are included.\n     * @param callbackGasUsed How much gas the callback used.\n     * @param extraArgs A field for extra data for forward compatibility.\n     */\n    event Revealed(\n        address indexed provider,\n        address indexed caller,\n        uint64 indexed sequenceNumber,\n        bytes32 randomNumber,\n        bytes32 userContribution,\n        bytes32 providerContribution,\n        bool callbackFailed,\n        bytes callbackReturnValue,\n        uint32 callbackGasUsed,\n        bytes extraArgs\n    );\n\n    /**\n     * @notice Emitted when a provider updates their fee\n     * @param provider The address of the provider updating their fee\n     * @param oldFee The previous fee amount\n     * @param newFee The new fee amount\n     * @param extraArgs A field for extra data for forward compatibility.\n     */\n    event ProviderFeeUpdated(\n        address indexed provider,\n        uint128 oldFee,\n        uint128 newFee,\n        bytes extraArgs\n    );\n\n    /**\n     * @notice Emitted when a provider updates their default gas limit\n     * @param provider The address of the provider updating their gas limit\n     * @param oldDefaultGasLimit The previous default gas limit\n     * @param newDefaultGasLimit The new default gas limit\n     * @param extraArgs A field for extra data for forward compatibility.\n     */\n    event ProviderDefaultGasLimitUpdated(\n        address indexed provider,\n        uint32 oldDefaultGasLimit,\n        uint32 newDefaultGasLimit,\n        bytes extraArgs\n    );\n\n    /**\n     * @notice Emitted when a provider updates their URI\n     * @param provider The address of the provider updating their URI\n     * @param oldUri The previous URI\n     * @param newUri The new URI\n     * @param extraArgs A field for extra data for forward compatibility.\n     */\n    event ProviderUriUpdated(\n        address indexed provider,\n        bytes oldUri,\n        bytes newUri,\n        bytes extraArgs\n    );\n\n    /**\n     * @notice Emitted when a provider updates their fee manager address\n     * @param provider The address of the provider updating their fee manager\n     * @param oldFeeManager The previous fee manager address\n     * @param newFeeManager The new fee manager address\n     * @param extraArgs A field for extra data for forward compatibility.\n     */\n    event ProviderFeeManagerUpdated(\n        address indexed provider,\n        address oldFeeManager,\n        address newFeeManager,\n        bytes extraArgs\n    );\n\n    /**\n     * @notice Emitted when a provider updates their maximum number of hashes that can be advanced\n     * @param provider The address of the provider updating their max hashes\n     * @param oldMaxNumHashes The previous maximum number of hashes\n     * @param newMaxNumHashes The new maximum number of hashes\n     * @param extraArgs A field for extra data for forward compatibility.\n     */\n    event ProviderMaxNumHashesAdvanced(\n        address indexed provider,\n        uint32 oldMaxNumHashes,\n        uint32 newMaxNumHashes,\n        bytes extraArgs\n    );\n\n    /**\n     * @notice Emitted when a provider withdraws their accumulated fees\n     * @param provider The address of the provider withdrawing fees\n     * @param recipient The address receiving the withdrawn fees\n     * @param withdrawnAmount The amount of fees withdrawn\n     * @param extraArgs A field for extra data for forward compatibility.\n     */\n    event Withdrawal(\n        address indexed provider,\n        address indexed recipient,\n        uint128 withdrawnAmount,\n        bytes extraArgs\n    );\n}\n"
      },
      "npm/@pythnetwork/entropy-sdk-solidity@2.0.0/EntropyStructs.sol": {
        "content": "// SPDX-License-Identifier: Apache 2\n\npragma solidity ^0.8.0;\n\n// This contract holds old versions of the Entropy structs that are no longer used for contract storage.\n// However, they are still used in EntropyEvents to maintain the public interface of prior versions of\n// the Entropy contract.\n//\n// See EntropyStructsV2 for the struct definitions currently in use.\ncontract EntropyStructs {\n    struct ProviderInfo {\n        uint128 feeInWei;\n        uint128 accruedFeesInWei;\n        // The commitment that the provider posted to the blockchain, and the sequence number\n        // where they committed to this. This value is not advanced after the provider commits,\n        // and instead is stored to help providers track where they are in the hash chain.\n        bytes32 originalCommitment;\n        uint64 originalCommitmentSequenceNumber;\n        // Metadata for the current commitment. Providers may optionally use this field to help\n        // manage rotations (i.e., to pick the sequence number from the correct hash chain).\n        bytes commitmentMetadata;\n        // Optional URI where clients can retrieve revelations for the provider.\n        // Client SDKs can use this field to automatically determine how to retrieve random values for each provider.\n        // TODO: specify the API that must be implemented at this URI\n        bytes uri;\n        // The first sequence number that is *not* included in the current commitment (i.e., an exclusive end index).\n        // The contract maintains the invariant that sequenceNumber <= endSequenceNumber.\n        // If sequenceNumber == endSequenceNumber, the provider must rotate their commitment to add additional random values.\n        uint64 endSequenceNumber;\n        // The sequence number that will be assigned to the next inbound user request.\n        uint64 sequenceNumber;\n        // The current commitment represents an index/value in the provider's hash chain.\n        // These values are used to verify requests for future sequence numbers. Note that\n        // currentCommitmentSequenceNumber < sequenceNumber.\n        //\n        // The currentCommitment advances forward through the provider's hash chain as values\n        // are revealed on-chain.\n        bytes32 currentCommitment;\n        uint64 currentCommitmentSequenceNumber;\n        // An address that is authorized to set / withdraw fees on behalf of this provider.\n        address feeManager;\n        // Maximum number of hashes to record in a request. This should be set according to the maximum gas limit\n        // the provider supports for callbacks.\n        uint32 maxNumHashes;\n    }\n\n    struct Request {\n        // Storage slot 1 //\n        address provider;\n        uint64 sequenceNumber;\n        // The number of hashes required to verify the provider revelation.\n        uint32 numHashes;\n        // Storage slot 2 //\n        // The commitment is keccak256(userCommitment, providerCommitment). Storing the hash instead of both saves 20k gas by\n        // eliminating 1 store.\n        bytes32 commitment;\n        // Storage slot 3 //\n        // The number of the block where this request was created.\n        // Note that we're using a uint64 such that we have an additional space for an address and other fields in\n        // this storage slot. Although block.number returns a uint256, 64 bits should be plenty to index all of the\n        // blocks ever generated.\n        uint64 blockNumber;\n        // The address that requested this random number.\n        address requester;\n        // If true, incorporate the blockhash of blockNumber into the generated random value.\n        bool useBlockhash;\n        // True if this is a request that expects a callback.\n        bool isRequestWithCallback;\n    }\n}\n"
      },
      "npm/@pythnetwork/entropy-sdk-solidity@2.0.0/EntropyStructsV2.sol": {
        "content": "// SPDX-License-Identifier: Apache 2\n\npragma solidity ^0.8.0;\n\ncontract EntropyStructsV2 {\n    struct ProviderInfo {\n        uint128 feeInWei;\n        uint128 accruedFeesInWei;\n        // The commitment that the provider posted to the blockchain, and the sequence number\n        // where they committed to this. This value is not advanced after the provider commits,\n        // and instead is stored to help providers track where they are in the hash chain.\n        bytes32 originalCommitment;\n        uint64 originalCommitmentSequenceNumber;\n        // Metadata for the current commitment. Providers may optionally use this field to help\n        // manage rotations (i.e., to pick the sequence number from the correct hash chain).\n        bytes commitmentMetadata;\n        // Optional URI where clients can retrieve revelations for the provider.\n        // Client SDKs can use this field to automatically determine how to retrieve random values for each provider.\n        // TODO: specify the API that must be implemented at this URI\n        bytes uri;\n        // The first sequence number that is *not* included in the current commitment (i.e., an exclusive end index).\n        // The contract maintains the invariant that sequenceNumber <= endSequenceNumber.\n        // If sequenceNumber == endSequenceNumber, the provider must rotate their commitment to add additional random values.\n        uint64 endSequenceNumber;\n        // The sequence number that will be assigned to the next inbound user request.\n        uint64 sequenceNumber;\n        // The current commitment represents an index/value in the provider's hash chain.\n        // These values are used to verify requests for future sequence numbers. Note that\n        // currentCommitmentSequenceNumber < sequenceNumber.\n        //\n        // The currentCommitment advances forward through the provider's hash chain as values\n        // are revealed on-chain.\n        bytes32 currentCommitment;\n        uint64 currentCommitmentSequenceNumber;\n        // An address that is authorized to set / withdraw fees on behalf of this provider.\n        address feeManager;\n        // Maximum number of hashes to record in a request. This should be set according to the maximum gas limit\n        // the provider supports for callbacks.\n        uint32 maxNumHashes;\n        // Default gas limit to use for callbacks.\n        uint32 defaultGasLimit;\n    }\n\n    struct Request {\n        // Storage slot 1 //\n        address provider;\n        uint64 sequenceNumber;\n        // The number of hashes required to verify the provider revelation.\n        uint32 numHashes;\n        // Storage slot 2 //\n        // The commitment is keccak256(userCommitment, providerCommitment). Storing the hash instead of both saves 20k gas by\n        // eliminating 1 store.\n        bytes32 commitment;\n        // Storage slot 3 //\n        // The number of the block where this request was created.\n        // Note that we're using a uint64 such that we have an additional space for an address and other fields in\n        // this storage slot. Although block.number returns a uint256, 64 bits should be plenty to index all of the\n        // blocks ever generated.\n        uint64 blockNumber;\n        // The address that requested this random number.\n        address requester;\n        // If true, incorporate the blockhash of blockNumber into the generated random value.\n        bool useBlockhash;\n        // Status flag for requests with callbacks. See EntropyConstants for the possible values of this flag.\n        uint8 callbackStatus;\n        // The gasLimit in units of 10k gas. (i.e., 2 = 20k gas). We're using units of 10k in order to fit this\n        // field into the remaining 2 bytes of this storage slot. The dynamic range here is 10k - 655M, which should\n        // cover all real-world use cases.\n        uint16 gasLimit10k;\n    }\n}\n"
      },
      "npm/@pythnetwork/entropy-sdk-solidity@2.0.0/IEntropy.sol": {
        "content": "// SPDX-License-Identifier: Apache 2\npragma solidity ^0.8.0;\n\nimport \"./EntropyEvents.sol\";\nimport \"./EntropyEventsV2.sol\";\nimport \"./EntropyStructsV2.sol\";\nimport \"./IEntropyV2.sol\";\n\ninterface IEntropy is EntropyEvents, EntropyEventsV2, IEntropyV2 {\n    // Register msg.sender as a randomness provider. The arguments are the provider's configuration parameters\n    // and initial commitment. Re-registering the same provider rotates the provider's commitment (and updates\n    // the feeInWei).\n    //\n    // chainLength is the number of values in the hash chain *including* the commitment, that is, chainLength >= 1.\n    function register(\n        uint128 feeInWei,\n        bytes32 commitment,\n        bytes calldata commitmentMetadata,\n        uint64 chainLength,\n        bytes calldata uri\n    ) external;\n\n    // Withdraw a portion of the accumulated fees for the provider msg.sender.\n    // Calling this function will transfer `amount` wei to the caller (provided that they have accrued a sufficient\n    // balance of fees in the contract).\n    function withdraw(uint128 amount) external;\n\n    // Withdraw a portion of the accumulated fees for provider. The msg.sender must be the fee manager for this provider.\n    // Calling this function will transfer `amount` wei to the caller (provided that they have accrued a sufficient\n    // balance of fees in the contract).\n    function withdrawAsFeeManager(address provider, uint128 amount) external;\n\n    // As a user, request a random number from `provider`. Prior to calling this method, the user should\n    // generate a random number x and keep it secret. The user should then compute hash(x) and pass that\n    // as the userCommitment argument. (You may call the constructUserCommitment method to compute the hash.)\n    //\n    // This method returns a sequence number. The user should pass this sequence number to\n    // their chosen provider (the exact method for doing so will depend on the provider) to retrieve the provider's\n    // number. The user should then call fulfillRequest to construct the final random number.\n    //\n    // This method will revert unless the caller provides a sufficient fee (at least getFee(provider)) as msg.value.\n    // Note that excess value is *not* refunded to the caller.\n    function request(\n        address provider,\n        bytes32 userCommitment,\n        bool useBlockHash\n    ) external payable returns (uint64 assignedSequenceNumber);\n\n    // Request a random number. The method expects the provider address and a secret random number\n    // in the arguments. It returns a sequence number.\n    //\n    // The address calling this function should be a contract that inherits from the IEntropyConsumer interface.\n    // The `entropyCallback` method on that interface will receive a callback with the generated random number.\n    // `entropyCallback` will be run with the provider's default gas limit (see `getProviderInfo(provider).defaultGasLimit`).\n    // If your callback needs additional gas, please use `requestWithCallbackAndGasLimit`.\n    //\n    // This method will revert unless the caller provides a sufficient fee (at least `getFee(provider)`) as msg.value.\n    // Note that excess value is *not* refunded to the caller.\n    function requestWithCallback(\n        address provider,\n        bytes32 userRandomNumber\n    ) external payable returns (uint64 assignedSequenceNumber);\n\n    // Fulfill a request for a random number. This method validates the provided userRandomness and provider's proof\n    // against the corresponding commitments in the in-flight request. If both values are validated, this function returns\n    // the corresponding random number.\n    //\n    // Note that this function can only be called once per in-flight request. Calling this function deletes the stored\n    // request information (so that the contract doesn't use a linear amount of storage in the number of requests).\n    // If you need to use the returned random number more than once, you are responsible for storing it.\n    function reveal(\n        address provider,\n        uint64 sequenceNumber,\n        bytes32 userRevelation,\n        bytes32 providerRevelation\n    ) external returns (bytes32 randomNumber);\n\n    // Fulfill a request for a random number. This method validates the provided userRandomness\n    // and provider's revelation against the corresponding commitment in the in-flight request. If both values are validated\n    // and the requestor address is a contract address, this function calls the requester's entropyCallback method with the\n    // sequence number, provider address and the random number as arguments. Else if the requestor is an EOA, it won't call it.\n    //\n    // Note that this function can only be called once per in-flight request. Calling this function deletes the stored\n    // request information (so that the contract doesn't use a linear amount of storage in the number of requests).\n    // If you need to use the returned random number more than once, you are responsible for storing it.\n    //\n    // Anyone can call this method to fulfill a request, but the callback will only be made to the original requester.\n    function revealWithCallback(\n        address provider,\n        uint64 sequenceNumber,\n        bytes32 userRandomNumber,\n        bytes32 providerRevelation\n    ) external;\n\n    function getProviderInfo(\n        address provider\n    ) external view returns (EntropyStructs.ProviderInfo memory info);\n\n    function getRequest(\n        address provider,\n        uint64 sequenceNumber\n    ) external view returns (EntropyStructs.Request memory req);\n\n    // Get the fee charged by provider for a request with the default gasLimit (`request` or `requestWithCallback`).\n    // If you are calling any of the `requestV2` methods, please use `getFeeV2`.\n    function getFee(address provider) external view returns (uint128 feeAmount);\n\n    function getAccruedPythFees()\n        external\n        view\n        returns (uint128 accruedPythFeesInWei);\n\n    function setProviderFee(uint128 newFeeInWei) external;\n\n    function setProviderFeeAsFeeManager(\n        address provider,\n        uint128 newFeeInWei\n    ) external;\n\n    function setProviderUri(bytes calldata newUri) external;\n\n    // Set manager as the fee manager for the provider msg.sender.\n    // After calling this function, manager will be able to set the provider's fees and withdraw them.\n    // Only one address can be the fee manager for a provider at a time -- calling this function again with a new value\n    // will override the previous value. Call this function with the all-zero address to disable the fee manager role.\n    function setFeeManager(address manager) external;\n\n    // Set the maximum number of hashes to record in a request. This should be set according to the maximum gas limit\n    // the provider supports for callbacks.\n    function setMaxNumHashes(uint32 maxNumHashes) external;\n\n    // Set the default gas limit for a request. If 0, no\n    function setDefaultGasLimit(uint32 gasLimit) external;\n\n    // Advance the provider commitment and increase the sequence number.\n    // This is used to reduce the `numHashes` required for future requests which leads to reduced gas usage.\n    function advanceProviderCommitment(\n        address provider,\n        uint64 advancedSequenceNumber,\n        bytes32 providerRevelation\n    ) external;\n\n    function constructUserCommitment(\n        bytes32 userRandomness\n    ) external pure returns (bytes32 userCommitment);\n\n    function combineRandomValues(\n        bytes32 userRandomness,\n        bytes32 providerRandomness,\n        bytes32 blockHash\n    ) external pure returns (bytes32 combinedRandomness);\n}\n"
      },
      "npm/@pythnetwork/entropy-sdk-solidity@2.0.0/IEntropyConsumer.sol": {
        "content": "// SPDX-License-Identifier: Apache 2\npragma solidity ^0.8.0;\n\nabstract contract IEntropyConsumer {\n    // This method is called by Entropy to provide the random number to the consumer.\n    // It asserts that the msg.sender is the Entropy contract. It is not meant to be\n    // override by the consumer.\n    function _entropyCallback(\n        uint64 sequence,\n        address provider,\n        bytes32 randomNumber\n    ) external {\n        address entropy = getEntropy();\n        require(entropy != address(0), \"Entropy address not set\");\n        require(msg.sender == entropy, \"Only Entropy can call this function\");\n\n        entropyCallback(sequence, provider, randomNumber);\n    }\n\n    // getEntropy returns Entropy contract address. The method is being used to check that the\n    // callback is indeed from Entropy contract. The consumer is expected to implement this method.\n    // Entropy address can be found here - https://docs.pyth.network/entropy/contract-addresses\n    function getEntropy() internal view virtual returns (address);\n\n    // This method is expected to be implemented by the consumer to handle the random number.\n    // It will be called by _entropyCallback after _entropyCallback ensures that the call is\n    // indeed from Entropy contract.\n    function entropyCallback(\n        uint64 sequence,\n        address provider,\n        bytes32 randomNumber\n    ) internal virtual;\n}\n"
      },
      "npm/@pythnetwork/entropy-sdk-solidity@2.0.0/IEntropyV2.sol": {
        "content": "// SPDX-License-Identifier: Apache 2\npragma solidity ^0.8.0;\n\nimport \"./EntropyEvents.sol\";\nimport \"./EntropyEventsV2.sol\";\nimport \"./EntropyStructsV2.sol\";\n\ninterface IEntropyV2 is EntropyEventsV2 {\n    /// @notice Request a random number using the default provider with default gas limit\n    /// @return assignedSequenceNumber A unique identifier for this request\n    /// @dev The address calling this function should be a contract that inherits from the IEntropyConsumer interface.\n    /// The `entropyCallback` method on that interface will receive a callback with the returned sequence number and\n    /// the generated random number.\n    ///\n    /// `entropyCallback` will be run with the `gasLimit` provided to this function.\n    /// The `gasLimit` will be rounded up to a multiple of 10k (e.g., 19000 -> 20000), and furthermore is lower bounded\n    /// by the provider's configured default limit.\n    ///\n    /// This method will revert unless the caller provides a sufficient fee (at least `getFeeV2()`) as msg.value.\n    /// Note that the fee can change over time. Callers of this method should explicitly compute `getFeeV2()`\n    /// prior to each invocation (as opposed to hardcoding a value). Further note that excess value is *not* refunded to the caller.\n    ///\n    /// Note that this method uses an in-contract PRNG to generate the user's contribution to the random number.\n    /// This approach modifies the security guarantees such that a dishonest validator and provider can\n    /// collude to manipulate the result (as opposed to a malicious user and provider). That is, the user\n    /// now trusts the validator honestly draw a random number. If you wish to avoid this trust assumption,\n    /// call a variant of `requestV2` that accepts a `userRandomNumber` parameter.\n    function requestV2()\n        external\n        payable\n        returns (uint64 assignedSequenceNumber);\n\n    /// @notice Request a random number using the default provider with specified gas limit\n    /// @param gasLimit The gas limit for the callback function.\n    /// @return assignedSequenceNumber A unique identifier for this request\n    /// @dev The address calling this function should be a contract that inherits from the IEntropyConsumer interface.\n    /// The `entropyCallback` method on that interface will receive a callback with the returned sequence number and\n    /// the generated random number.\n    ///\n    /// `entropyCallback` will be run with the `gasLimit` provided to this function.\n    /// The `gasLimit` will be rounded up to a multiple of 10k (e.g., 19000 -> 20000), and furthermore is lower bounded\n    /// by the provider's configured default limit.\n    ///\n    /// This method will revert unless the caller provides a sufficient fee (at least `getFeeV2(gasLimit)`) as msg.value.\n    /// Note that the fee can change over time. Callers of this method should explicitly compute `getFeeV2(gasLimit)`\n    /// prior to each invocation (as opposed to hardcoding a value). Further note that excess value is *not* refunded to the caller.\n    ///\n    /// Note that this method uses an in-contract PRNG to generate the user's contribution to the random number.\n    /// This approach modifies the security guarantees such that a dishonest validator and provider can\n    /// collude to manipulate the result (as opposed to a malicious user and provider). That is, the user\n    /// now trusts the validator honestly draw a random number. If you wish to avoid this trust assumption,\n    /// call a variant of `requestV2` that accepts a `userRandomNumber` parameter.\n    function requestV2(\n        uint32 gasLimit\n    ) external payable returns (uint64 assignedSequenceNumber);\n\n    /// @notice Request a random number from a specific provider with specified gas limit\n    /// @param provider The address of the provider to request from\n    /// @param gasLimit The gas limit for the callback function\n    /// @return assignedSequenceNumber A unique identifier for this request\n    /// @dev The address calling this function should be a contract that inherits from the IEntropyConsumer interface.\n    /// The `entropyCallback` method on that interface will receive a callback with the returned sequence number and\n    /// the generated random number.\n    ///\n    /// `entropyCallback` will be run with the `gasLimit` provided to this function.\n    /// The `gasLimit` will be rounded up to a multiple of 10k (e.g., 19000 -> 20000), and furthermore is lower bounded\n    /// by the provider's configured default limit.\n    ///\n    /// This method will revert unless the caller provides a sufficient fee (at least `getFeeV2(provider, gasLimit)`) as msg.value.\n    /// Note that provider fees can change over time. Callers of this method should explicitly compute `getFeeV2(provider, gasLimit)`\n    /// prior to each invocation (as opposed to hardcoding a value). Further note that excess value is *not* refunded to the caller.\n    ///\n    /// Note that this method uses an in-contract PRNG to generate the user's contribution to the random number.\n    /// This approach modifies the security guarantees such that a dishonest validator and provider can\n    /// collude to manipulate the result (as opposed to a malicious user and provider). That is, the user\n    /// now trusts the validator honestly draw a random number. If you wish to avoid this trust assumption,\n    /// call a variant of `requestV2` that accepts a `userRandomNumber` parameter.\n    function requestV2(\n        address provider,\n        uint32 gasLimit\n    ) external payable returns (uint64 assignedSequenceNumber);\n\n    /// @notice Request a random number from a specific provider with a user-provided random number and gas limit\n    /// @param provider The address of the provider to request from\n    /// @param userRandomNumber A random number provided by the user for additional entropy\n    /// @param gasLimit The gas limit for the callback function. Pass 0 to get a sane default value -- see note below.\n    /// @return assignedSequenceNumber A unique identifier for this request\n    /// @dev The address calling this function should be a contract that inherits from the IEntropyConsumer interface.\n    /// The `entropyCallback` method on that interface will receive a callback with the returned sequence number and\n    /// the generated random number.\n    ///\n    /// `entropyCallback` will be run with the `gasLimit` provided to this function.\n    /// The `gasLimit` will be rounded up to a multiple of 10k (e.g., 19000 -> 20000), and furthermore is lower bounded\n    /// by the provider's configured default limit.\n    ///\n    /// This method will revert unless the caller provides a sufficient fee (at least `getFeeV2(provider, gasLimit)`) as msg.value.\n    /// Note that provider fees can change over time. Callers of this method should explicitly compute `getFeeV2(provider, gasLimit)`\n    /// prior to each invocation (as opposed to hardcoding a value). Further note that excess value is *not* refunded to the caller.\n    function requestV2(\n        address provider,\n        bytes32 userRandomNumber,\n        uint32 gasLimit\n    ) external payable returns (uint64 assignedSequenceNumber);\n\n    /// @notice Get information about a specific entropy provider\n    /// @param provider The address of the provider to query\n    /// @return info The provider information including configuration, fees, and operational status\n    /// @dev This method returns detailed information about a provider's configuration and capabilities.\n    /// The returned ProviderInfo struct contains information such as the provider's fee structure and gas limits.\n    function getProviderInfoV2(\n        address provider\n    ) external view returns (EntropyStructsV2.ProviderInfo memory info);\n\n    /// @notice Get the address of the default entropy provider\n    /// @return provider The address of the default provider\n    /// @dev This method returns the address of the provider that will be used when no specific provider is specified\n    /// in the requestV2 calls. The default provider can be used to get the base fee and gas limit information.\n    function getDefaultProvider() external view returns (address provider);\n\n    /// @notice Get information about a specific request\n    /// @param provider The address of the provider that handled the request\n    /// @param sequenceNumber The unique identifier of the request\n    /// @return req The request information including status, random number, and other metadata\n    /// @dev This method allows querying the state of a previously made request. The returned Request struct\n    /// contains information about whether the request was fulfilled, the generated random number (if available),\n    /// and other metadata about the request.\n    function getRequestV2(\n        address provider,\n        uint64 sequenceNumber\n    ) external view returns (EntropyStructsV2.Request memory req);\n\n    /// @notice Get the fee charged by the default provider for the default gas limit\n    /// @return feeAmount The fee amount in wei\n    /// @dev This method returns the base fee required to make a request using the default provider with\n    /// the default gas limit. This fee should be passed as msg.value when calling requestV2().\n    /// The fee can change over time, so this method should be called before each request.\n    function getFeeV2() external view returns (uint128 feeAmount);\n\n    /// @notice Get the fee charged by the default provider for a specific gas limit\n    /// @param gasLimit The gas limit for the callback function\n    /// @return feeAmount The fee amount in wei\n    /// @dev This method returns the fee required to make a request using the default provider with\n    /// the specified gas limit. This fee should be passed as msg.value when calling requestV2(gasLimit).\n    /// The fee can change over time, so this method should be called before each request.\n    function getFeeV2(\n        uint32 gasLimit\n    ) external view returns (uint128 feeAmount);\n\n    /// @notice Get the fee charged by a specific provider for a request with a given gas limit\n    /// @param provider The address of the provider to query\n    /// @param gasLimit The gas limit for the callback function\n    /// @return feeAmount The fee amount in wei\n    /// @dev This method returns the fee required to make a request using the specified provider with\n    /// the given gas limit. This fee should be passed as msg.value when calling requestV2(provider, gasLimit)\n    /// or requestV2(provider, userRandomNumber, gasLimit). The fee can change over time, so this method\n    /// should be called before each request.\n    function getFeeV2(\n        address provider,\n        uint32 gasLimit\n    ) external view returns (uint128 feeAmount);\n}\n"
      },
      "project/contracts/tournament/core/libraries/calculations/Calculations.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {TournamentCore} from \"./../../TournamentCore.sol\";\n\nlibrary TournamentCalculations {\n    function calculateExitCost(\n        uint256 initialCoins,\n        uint32 actualStartTime,\n        uint16 exitCostBasePercentBPS,\n        uint16 exitCostCompoundRateBPS,\n        uint32 gameInterval\n    ) internal view returns (uint256) {\n        uint32 currentTime = uint32(block.timestamp);\n\n        uint256 intervalsPassed = (currentTime - actualStartTime) /\n            gameInterval;\n        uint256 baseCost = (initialCoins * exitCostBasePercentBPS) / 10000;\n        uint256 multiplier = 10000 +\n            (exitCostCompoundRateBPS * intervalsPassed);\n        return (baseCost * multiplier) / 10000;\n    }\n\n    function calculateCurrentCoins(\n        uint256 storedCoins,\n        uint32 lastDecayTimestamp,\n        uint256 decayAmount,\n        uint32 gameInterval\n    ) internal view returns (uint256) {\n        // Cast block.timestamp to uint32 for consistent arithmetic\n        uint32 currentTime = uint32(block.timestamp);\n\n        if (currentTime <= lastDecayTimestamp) {\n            return storedCoins;\n        }\n\n        uint256 intervalsPassed = (currentTime - lastDecayTimestamp) /\n            gameInterval;\n        uint256 totalDecay = decayAmount * intervalsPassed;\n        return storedCoins > totalDecay ? storedCoins - totalDecay : 0;\n    }\n\n    function calculateForfeitPenalty(\n        uint256 stakeAmount,\n        uint32 endTime,\n        uint32 duration,\n        uint8 forfeitPenaltyType, // 0 = Fixed, 1 = TimeBased\n        uint8 forfeitMaxPenalty,\n        uint8 forfeitMinPenalty\n    ) internal view returns (uint256) {\n        uint256 penaltyPercent;\n\n        if (\n            forfeitPenaltyType == uint8(TournamentCore.ForfeitPenaltyType.Fixed)\n        ) {\n            // For fixed penalty, apply the minimum penalty\n            penaltyPercent = forfeitMinPenalty;\n        } else {\n            // For time-base penalty, calculate the percentage to apply\n            uint32 currentTime = uint32(block.timestamp);\n\n            uint32 timeRemaining = endTime > currentTime\n                ? endTime - currentTime\n                : 0;\n            penaltyPercent =\n                (uint256(forfeitMaxPenalty) * timeRemaining) /\n                duration;\n\n            if (penaltyPercent < forfeitMinPenalty) {\n                // Clamp to min penalty value in case calculated % is too low\n                penaltyPercent = forfeitMinPenalty;\n            }\n            if (penaltyPercent > forfeitMaxPenalty) {\n                // Clamp to max penalty value in case calculated % is too high\n                penaltyPercent = forfeitMaxPenalty;\n            }\n        }\n        return (stakeAmount * penaltyPercent) / 100;\n    }\n\n    function calculatePrizePerWinner(\n        uint256 totalStaked,\n        uint256 totalForfeitPenalties,\n        uint8 platformFeePercent,\n        uint8 creatorFeePercent,\n        uint256 winnerCount\n    ) internal pure returns (uint256) {\n        if (winnerCount == 0) return 0;\n\n        uint256 totalPrizePool = totalStaked + totalForfeitPenalties;\n        uint256 platformFee = (totalPrizePool * platformFeePercent) / 100;\n        uint256 creatorFee = (totalPrizePool * creatorFeePercent) / 100;\n        uint256 distributionPool = totalPrizePool - platformFee - creatorFee;\n\n        return distributionPool / winnerCount;\n    }\n}\n"
      },
      "project/contracts/tournament/core/libraries/lifecycle/Lifecycle.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {TournamentCore} from \"./../../TournamentCore.sol\";\nimport {TournamentRegistry} from \"./../../../infrastructure/registry/TournamentRegistry.sol\";\n\nlibrary TournamentLifecycle {\n    event TournamentLocked(uint32 timestamp);\n    event TournamentUnlocked(uint32 timestamp);\n    event TournamentPendingStart(uint32 timestamp);\n    event TournamentRevertedToOpen(uint32 timestamp);\n    event TournamentStarted(\n        uint32 startTime,\n        uint32 endTime,\n        uint32 exitWindowStart\n    );\n    event TournamentEnded(\n        uint256 winnerCount,\n        uint256 prizePool,\n        uint32 timestamp\n    );\n    event TournamentCancelled(uint32 timestamp);\n    event EmergencyCancellation(\n        address indexed platformAdmin,\n        uint256 timestamp\n    );\n\n    function transitionToLocked(TournamentRegistry registry) internal {\n        registry.updateTournamentStatus(TournamentCore.Status.Locked);\n        emit TournamentLocked(uint32(block.timestamp));\n    }\n\n    function transitionToOpen(TournamentRegistry registry) internal {\n        registry.updateTournamentStatus(TournamentCore.Status.Open);\n        emit TournamentUnlocked(uint32(block.timestamp));\n    }\n\n    function transitionToPendingStart(TournamentRegistry registry) internal {\n        registry.updateTournamentStatus(TournamentCore.Status.PendingStart);\n        emit TournamentPendingStart(uint32(block.timestamp));\n    }\n\n    function transitionToActive(\n        TournamentRegistry registry,\n        uint32 duration,\n        uint32 gameInterval\n    )\n        internal\n        returns (uint32 actualStartTime, uint32 endTime, uint32 exitWindowStart)\n    {\n        actualStartTime = uint32(block.timestamp);\n        endTime = actualStartTime + duration;\n        exitWindowStart = endTime - gameInterval;\n\n        registry.updateTournamentStatus(TournamentCore.Status.Active);\n        emit TournamentStarted(actualStartTime, endTime, exitWindowStart);\n\n        return (actualStartTime, endTime, exitWindowStart);\n    }\n\n    function transitionToEnded(\n        TournamentRegistry registry,\n        uint256 totalStaked,\n        uint256 totalForfeitPenalties,\n        uint256 winnerCount\n    ) internal {\n        registry.updateTournamentStatus(TournamentCore.Status.Ended);\n\n        uint256 prizePool = totalStaked + totalForfeitPenalties;\n        emit TournamentEnded(winnerCount, prizePool, uint32(block.timestamp));\n    }\n\n    function transitionToCancelled(TournamentRegistry registry) internal {\n        registry.updateTournamentStatus(TournamentCore.Status.Cancelled);\n        emit TournamentCancelled(uint32(block.timestamp));\n    }\n\n    function emergencyCancel(\n        TournamentRegistry registry,\n        address platformAdmin\n    ) internal {\n        registry.updateTournamentStatus(TournamentCore.Status.Cancelled);\n        emit EmergencyCancellation(platformAdmin, block.timestamp);\n    }\n\n    function emitRevertToOpen() internal {\n        emit TournamentRevertedToOpen(uint32(block.timestamp));\n    }\n\n    function checkAndTransition(\n        TournamentCore.Status currentStatus,\n        TournamentCore.Params memory params,\n        uint16 playerCount,\n        uint256 totalStaked,\n        TournamentRegistry registry\n    )\n        external\n        returns (\n            TournamentCore.Status newStatus,\n            uint32 actualStartTime,\n            uint32 endTime,\n            uint32 exitWindowStart\n        )\n    {\n        newStatus = currentStatus;\n\n        if (currentStatus == TournamentCore.Status.Open) {\n            if (params.maxPlayers > 0 && playerCount >= params.maxPlayers) {\n                newStatus = TournamentCore.Status.Locked;\n                transitionToLocked(registry);\n            }\n        }\n\n        if (\n            currentStatus == TournamentCore.Status.Open ||\n            currentStatus == TournamentCore.Status.Locked\n        ) {\n            if (block.timestamp >= params.startTimestamp) {\n                newStatus = TournamentCore.Status.PendingStart;\n                transitionToPendingStart(registry);\n\n                if (\n                    areStartConditionsMet(\n                        params.startPlayerCount,\n                        params.startPoolAmount,\n                        playerCount,\n                        totalStaked\n                    )\n                ) {\n                    newStatus = TournamentCore.Status.Active;\n                    (\n                        actualStartTime,\n                        endTime,\n                        exitWindowStart\n                    ) = transitionToActive(\n                        registry,\n                        params.duration,\n                        params.gameInterval\n                    );\n                } else {\n                    newStatus = TournamentCore.Status.Cancelled;\n                    transitionToCancelled(registry);\n                }\n            }\n        }\n    }\n\n    function areStartConditionsMet(\n        uint16 startPlayerCount,\n        uint256 startPoolAmount,\n        uint16 currentPlayerCount,\n        uint256 currentTotalStaked\n    ) public pure returns (bool) {\n        if (startPlayerCount > 0 && currentPlayerCount < startPlayerCount) {\n            return false;\n        }\n        if (startPoolAmount > 0 && currentTotalStaked < startPoolAmount) {\n            return false;\n        }\n        return true;\n    }\n}\n"
      },
      "project/contracts/tournament/core/libraries/player-actions/PlayerActions.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {TournamentCore} from \"./../../TournamentCore.sol\";\n\nlibrary TournamentPlayerActions {\n    using SafeERC20 for IERC20;\n\n    event PlayerJoined(\n        address indexed player,\n        uint256 stakeAmount,\n        uint256 initialCoins,\n        uint32 timestamp\n    );\n    event PlayerExited(address indexed player, uint32 timestamp);\n    event PlayerForfeited(\n        address indexed player,\n        uint256 penaltyAmount,\n        uint256 refundAmount,\n        uint32 timestamp\n    );\n    event DecayApplied(\n        address indexed player,\n        uint256 decayAmount,\n        uint256 remainingCoins\n    );\n\n    error StakeTooLow();\n    error StakeTooHigh();\n    error TournamentFull();\n\n    function validateEntry(\n        uint256 minStake,\n        uint256 maxStake,\n        uint16 maxPlayers,\n        uint256 stakeAmount,\n        uint16 playerCount\n    ) external pure {\n        if (minStake > 0 && stakeAmount < minStake) revert StakeTooLow();\n        if (maxStake > 0 && stakeAmount > maxStake) revert StakeTooHigh();\n        if (maxPlayers > 0 && playerCount >= maxPlayers)\n            revert TournamentFull();\n    }\n\n    function processJoin(\n        TournamentCore.PlayerResources storage player,\n        address stakeToken,\n        address sender,\n        uint256 stakeAmount,\n        uint40 coinConversionRate,\n        uint8 initialLives,\n        uint8 cardsPerType\n    ) external returns (uint256 initialCoins) {\n        IERC20(stakeToken).safeTransferFrom(sender, address(this), stakeAmount);\n\n        initialCoins = stakeAmount * coinConversionRate;\n        uint32 timestamp = uint32(block.timestamp);\n\n        player.initialCoins = initialCoins;\n        player.coins = initialCoins;\n        player.stakeAmount = stakeAmount;\n        player.lastDecayTimestamp = timestamp;\n        player.lives = initialLives;\n        player.totalCards = cardsPerType * 3;\n        player.status = TournamentCore.PlayerStatus.Active;\n        player.exists = true;\n        player.inCombat = false;\n\n        emit PlayerJoined(sender, stakeAmount, initialCoins, timestamp);\n    }\n\n    function processExit(\n        TournamentCore.PlayerResources storage player,\n        address sender\n    ) external {\n        player.status = TournamentCore.PlayerStatus.Exited;\n        emit PlayerExited(sender, uint32(block.timestamp));\n    }\n\n    function processForfeit(\n        TournamentCore.PlayerResources storage player,\n        address stakeToken,\n        address sender,\n        uint256 penaltyAmount\n    ) external returns (uint256 refundAmount) {\n        unchecked {\n            refundAmount = player.stakeAmount - penaltyAmount;\n        }\n        player.status = TournamentCore.PlayerStatus.Forfeited;\n\n        IERC20(stakeToken).safeTransfer(sender, refundAmount);\n        emit PlayerForfeited(\n            sender,\n            penaltyAmount,\n            refundAmount,\n            uint32(block.timestamp)\n        );\n    }\n\n    function applyDecay(\n        TournamentCore.PlayerResources storage player,\n        address sender,\n        uint256 decayAmount,\n        uint32 gameInterval\n    ) external {\n        uint32 timestamp = uint32(block.timestamp);\n        uint256 intervalsPassed;\n\n        unchecked {\n            // Safe: tournament duration limits + validated decayAmount\n            // make overflow mathematically impossible\n            intervalsPassed =\n                (timestamp - player.lastDecayTimestamp) /\n                gameInterval;\n        }\n\n        if (intervalsPassed > 0) {\n            uint256 currentCoins = player.coins;\n            uint256 totalDecay;\n            uint256 remainingCoins;\n\n            totalDecay = decayAmount * intervalsPassed;\n\n            // Clamp to available coins\n            if (currentCoins > totalDecay) {\n                unchecked {\n                    remainingCoins = currentCoins - totalDecay;\n                }\n            } else {\n                totalDecay = currentCoins; // Adjust to actual decay\n                remainingCoins = 0;\n            }\n\n            player.coins = remainingCoins;\n            player.lastDecayTimestamp = timestamp;\n\n            emit DecayApplied(sender, totalDecay, remainingCoins);\n        }\n    }\n}\n"
      },
      "project/contracts/tournament/core/libraries/refund/Refund.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {TournamentRegistry} from \"./../../../infrastructure/registry/TournamentRegistry.sol\";\nimport {TournamentCore} from \"./../../TournamentCore.sol\";\nimport {TournamentLifecycle} from \"./../lifecycle/Lifecycle.sol\";\n\nlibrary TournamentRefund {\n    using SafeERC20 for IERC20;\n\n    event RefundClaimed(address indexed player, uint256 amount);\n\n    struct RefundContext {\n        address stakeToken;\n        TournamentCore.Status status;\n        uint16 maxPlayers;\n        uint16 startPlayerCount;\n        uint256 startPoolAmount;\n    }\n\n    function processRefund(\n        TournamentCore.PlayerResources storage player,\n        RefundContext calldata context,\n        TournamentRegistry registry,\n        address sender,\n        uint16 playerCount,\n        uint256 totalStaked\n    )\n        external\n        returns (\n            bool shouldDecrementCount,\n            uint16 newPlayerCount,\n            uint256 newTotalStaked,\n            TournamentCore.Status newStatus\n        )\n    {\n        uint256 refundAmount = player.stakeAmount;\n        TournamentCore.Status currentStatus = context.status;\n\n        // Handle cancelled tournament (simple case)\n        if (currentStatus == TournamentCore.Status.Cancelled) {\n            newStatus = currentStatus;\n            newPlayerCount = playerCount;\n            newTotalStaked = totalStaked;\n            shouldDecrementCount = false;\n        }\n        // Handle voluntary withdrawal\n        else {\n            player.exists = false;\n            shouldDecrementCount = true;\n\n            unchecked {\n                newPlayerCount = playerCount - 1;\n                newTotalStaked = totalStaked - refundAmount;\n            }\n\n            // Determine new status based on current status\n            if (currentStatus == TournamentCore.Status.Locked) {\n                if (\n                    context.maxPlayers == 0 ||\n                    newPlayerCount < context.maxPlayers\n                ) {\n                    newStatus = TournamentCore.Status.Open;\n                    TournamentLifecycle.transitionToOpen(registry);\n                } else {\n                    newStatus = currentStatus;\n                }\n            } else if (currentStatus == TournamentCore.Status.PendingStart) {\n                if (\n                    !_areStartConditionsMet(\n                        context.startPlayerCount,\n                        context.startPoolAmount,\n                        newPlayerCount,\n                        newTotalStaked\n                    )\n                ) {\n                    newStatus = TournamentCore.Status.Open;\n                    TournamentLifecycle.transitionToOpen(registry);\n                    TournamentLifecycle.emitRevertToOpen();\n                } else {\n                    newStatus = currentStatus;\n                }\n            } else {\n                newStatus = currentStatus;\n            }\n        }\n\n        player.status = TournamentCore.PlayerStatus.Refunded;\n        IERC20(context.stakeToken).safeTransfer(sender, refundAmount);\n        emit RefundClaimed(sender, refundAmount);\n    }\n\n    function _areStartConditionsMet(\n        uint16 startPlayerCount,\n        uint256 startPoolAmount,\n        uint16 currentPlayerCount,\n        uint256 currentTotalStaked\n    ) internal pure returns (bool) {\n        if (startPlayerCount > 0 && currentPlayerCount < startPlayerCount) {\n            return false;\n        }\n        if (startPoolAmount > 0 && currentTotalStaked < startPoolAmount) {\n            return false;\n        }\n        return true;\n    }\n}\n"
      },
      "project/contracts/tournament/core/libraries/views/Views.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {TournamentCore} from \"./../../TournamentCore.sol\";\nimport {TournamentCalculations} from \"./../calculations/Calculations.sol\";\n\nlibrary TournamentViews {\n    error NotFound();\n\n    function getCurrentCoins(\n        TournamentCore.PlayerResources calldata player,\n        uint256 decayAmount,\n        uint32 gameInterval\n    ) external view returns (uint256) {\n        if (!player.exists) return 0;\n\n        return\n            TournamentCalculations.calculateCurrentCoins(\n                player.coins,\n                player.lastDecayTimestamp,\n                decayAmount,\n                gameInterval\n            );\n    }\n\n    function calculateExitCost(\n        TournamentCore.Status status,\n        TournamentCore.PlayerResources calldata player,\n        uint32 actualStartTime,\n        uint16 exitCostBasePercentBPS,\n        uint16 exitCostCompoundRateBPS,\n        uint32 gameInterval\n    ) external view returns (uint256) {\n        if (status != TournamentCore.Status.Active || !player.exists) return 0;\n\n        return\n            TournamentCalculations.calculateExitCost(\n                player.initialCoins,\n                actualStartTime,\n                exitCostBasePercentBPS,\n                exitCostCompoundRateBPS,\n                gameInterval\n            );\n    }\n\n    function canExit(\n        TournamentCore.Status status,\n        TournamentCore.PlayerResources calldata player,\n        uint256 currentCoins,\n        uint256 exitCost,\n        uint8 exitLivesRequired\n    ) external pure returns (bool) {\n        if (status != TournamentCore.Status.Active) return false;\n        if (player.status != TournamentCore.PlayerStatus.Active) return false;\n        if (!player.exists) return false;\n        if (player.lives < exitLivesRequired) return false;\n        if (player.totalCards != 0) return false;\n        if (currentCoins < exitCost) return false;\n\n        return true;\n    }\n\n    function calculateForfeitPenalty(\n        TournamentCore.PlayerResources calldata player,\n        uint32 endTime,\n        uint32 duration,\n        uint8 forfeitPenaltyType,\n        uint8 forfeitMaxPenalty,\n        uint8 forfeitMinPenalty\n    ) external view returns (uint256) {\n        if (!player.exists) return 0;\n\n        return\n            TournamentCalculations.calculateForfeitPenalty(\n                player.stakeAmount,\n                endTime,\n                duration,\n                forfeitPenaltyType,\n                forfeitMaxPenalty,\n                forfeitMinPenalty\n            );\n    }\n\n    function getCurrentPlayerResources(\n        TournamentCore.PlayerResources memory player,\n        uint256 currentCoins\n    ) external pure returns (TournamentCore.PlayerResources memory) {\n        player.coins = currentCoins;\n        return player;\n    }\n\n    function calculatePrizePerWinner(\n        uint256 totalStaked,\n        uint256 totalForfeitPenalties,\n        uint8 platformFeePercent,\n        uint8 creatorFeePercent,\n        uint256 winnersLength\n    ) external pure returns (uint256) {\n        return\n            TournamentCalculations.calculatePrizePerWinner(\n                totalStaked,\n                totalForfeitPenalties,\n                platformFeePercent,\n                creatorFeePercent,\n                winnersLength\n            );\n    }\n\n    function getExitWindow(\n        uint32 exitWindowStart,\n        uint32 endTime\n    )\n        external\n        view\n        returns (uint32 windowStart, uint32 windowEnd, bool isOpen)\n    {\n        windowStart = exitWindowStart;\n        windowEnd = endTime;\n\n        if (block.timestamp < exitWindowStart) {\n            isOpen = false;\n            return (windowStart, windowEnd, isOpen);\n        }\n\n        isOpen = block.timestamp < endTime;\n    }\n\n    function getCurrentCoinsFromStorage(\n        mapping(address => TournamentCore.PlayerResources) storage players,\n        TournamentCore.Params storage params,\n        address player\n    ) external view returns (uint256) {\n        return\n            TournamentCalculations.calculateCurrentCoins(\n                players[player].coins,\n                players[player].lastDecayTimestamp,\n                params.decayAmount,\n                params.gameInterval\n            );\n    }\n\n    function calculateExitCostFromStorage(\n        mapping(address => TournamentCore.PlayerResources) storage players,\n        TournamentCore.Params storage params,\n        TournamentCore.Status status,\n        uint32 actualStartTime,\n        address player\n    ) external view returns (uint256) {\n        if (status != TournamentCore.Status.Active) return 0;\n        if (!players[player].exists) return 0;\n\n        return\n            TournamentCalculations.calculateExitCost(\n                players[player].initialCoins,\n                actualStartTime,\n                params.exitCostBasePercentBPS,\n                params.exitCostCompoundRateBPS,\n                params.gameInterval\n            );\n    }\n\n    function canExitFromStorage(\n        mapping(address => TournamentCore.PlayerResources) storage players,\n        TournamentCore.Params storage params,\n        TournamentCore.Status status,\n        uint32 actualStartTime,\n        address player\n    ) external view returns (bool) {\n        if (status != TournamentCore.Status.Active) return false;\n\n        TournamentCore.PlayerResources storage playerData = players[player];\n        if (!playerData.exists) return false;\n        if (playerData.status != TournamentCore.PlayerStatus.Active)\n            return false;\n        if (playerData.lives < params.exitLivesRequired) return false;\n        if (playerData.totalCards != 0) return false;\n\n        uint256 currentCoins = TournamentCalculations.calculateCurrentCoins(\n            playerData.coins,\n            playerData.lastDecayTimestamp,\n            params.decayAmount,\n            params.gameInterval\n        );\n\n        uint256 exitCost = TournamentCalculations.calculateExitCost(\n            playerData.initialCoins,\n            actualStartTime,\n            params.exitCostBasePercentBPS,\n            params.exitCostCompoundRateBPS,\n            params.gameInterval\n        );\n\n        return currentCoins >= exitCost;\n    }\n\n    function calculateForfeitPenaltyFromStorage(\n        mapping(address => TournamentCore.PlayerResources) storage players,\n        TournamentCore.Params storage params,\n        uint32 endTime,\n        address player\n    ) external view returns (uint256) {\n        if (!players[player].exists) return 0;\n\n        return\n            TournamentCalculations.calculateForfeitPenalty(\n                players[player].stakeAmount,\n                endTime,\n                params.duration,\n                uint8(params.forfeitPenaltyType),\n                params.forfeitMaxPenalty,\n                params.forfeitMinPenalty\n            );\n    }\n\n    function getCurrentPlayerResourcesFromStorage(\n        mapping(address => TournamentCore.PlayerResources) storage players,\n        TournamentCore.Params storage params,\n        address player\n    ) external view returns (TournamentCore.PlayerResources memory) {\n        if (!players[player].exists) revert NotFound();\n\n        TournamentCore.PlayerResources memory playerData = players[player];\n\n        playerData.coins = TournamentCalculations.calculateCurrentCoins(\n            playerData.coins,\n            playerData.lastDecayTimestamp,\n            params.decayAmount,\n            params.gameInterval\n        );\n\n        return playerData;\n    }\n\n    function getPlayerFromStorage(\n        mapping(address => TournamentCore.PlayerResources) storage players,\n        address player\n    ) external view returns (TournamentCore.PlayerResources memory) {\n        if (!players[player].exists) revert NotFound();\n        return players[player];\n    }\n}\n"
      },
      "project/contracts/tournament/core/TournamentCore.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nlibrary TournamentCore {\n    enum Status {\n        Open,\n        Locked,\n        PendingStart,\n        Active,\n        Ended,\n        Cancelled\n    }\n\n    enum PlayerStatus {\n        Active,\n        Exited,\n        Forfeited,\n        PrizeClaimed,\n        Refunded\n    }\n\n    enum ForfeitPenaltyType {\n        Fixed,\n        TimeBased\n    }\n\n    struct Params {\n        uint32 startTimestamp;\n        uint32 duration;\n        uint32 gameInterval;\n        uint16 minPlayers;\n        uint16 maxPlayers;\n        uint16 startPlayerCount;\n        uint256 startPoolAmount;\n        address stakeToken;\n        uint256 minStake;\n        uint256 maxStake;\n        uint40 coinConversionRate;\n        uint256 decayAmount;\n        uint8 initialLives;\n        uint8 cardsPerType;\n        uint8 exitLivesRequired;\n        uint16 exitCostBasePercentBPS;\n        uint16 exitCostCompoundRateBPS;\n        uint8 creatorFeePercent;\n        uint8 platformFeePercent;\n        bool forfeitAllowed;\n        ForfeitPenaltyType forfeitPenaltyType;\n        uint8 forfeitMaxPenalty;\n        uint8 forfeitMinPenalty;\n        address deckCatalog;\n        uint8[] excludedCardIds;\n        uint256 deckDrawCost;\n        uint256 deckShuffleCost;\n        uint256 deckPeekCost;\n    }\n\n    struct PlayerResources {\n        uint256 initialCoins;\n        uint256 coins;\n        uint256 stakeAmount;\n        uint32 lastDecayTimestamp;\n        uint16 combatCount;\n        uint8 lives;\n        uint8 totalCards;\n        PlayerStatus status;\n        bool exists;\n        bool inCombat;\n    }\n\n    uint32 public constant RECOMMENDED_SECONDS_PER_CARD = 360;\n    uint32 public constant MIN_DURATION = 1200;\n    uint8 public constant MIN_CARDS_PER_TYPE = 1;\n    uint8 public constant MAX_CARDS_PER_TYPE = 10;\n    uint16 public constant MIN_PLAYERS_REQUIRED = 2;\n    uint16 public constant MAX_PLAYERS_LIMIT = 10000;\n    uint32 public constant MIN_GAME_INTERVAL = 60;\n    uint32 public constant MAX_GAME_INTERVAL = 3600;\n    uint8 public constant MAX_CREATOR_FEE_PERCENT = 5;\n    uint8 public constant MAX_PLATFORM_FEE = 5;\n    uint8 public constant MAX_COMBINED_FEE_PERCENT = 10;\n    uint8 public constant MIN_INTERVALS_REQUIRED = 3;\n}\n"
      },
      "project/contracts/tournament/infrastructure/deck-catalog/TournamentDeckCatalog.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract TournamentDeckCatalog is Ownable {\n    enum CardCategory {\n        Instant,\n        Modifier,\n        Combat\n    }\n\n    enum ModifierTrigger {\n        None,\n        OnNextFight,\n        OnNextWin,\n        OnNextLoss\n    }\n\n    enum CombatCard {\n        Rock,\n        Paper,\n        Scissors\n    }\n\n    enum MysteryGrantCard {\n        None,\n        Rock,\n        Paper,\n        Scissors\n    }\n\n    enum Objective {\n        ResourceLives,\n        ResourceCoins,\n        ResourceAll,\n        EliminationCount,\n        BattleRate,\n        WinStreak,\n        LoseStreak,\n        VictoryRate,\n        PerfectRecord,\n        TradeCount,\n        TradeVolume\n    }\n\n    struct CardDefinition {\n        bool exists;\n        bool paused;\n        uint8 cardId;\n        CardCategory category;\n        ModifierTrigger trigger;\n        MysteryGrantCard mysteryGrantCard;\n        uint16 baseWeight;\n        bytes effectData;\n    }\n\n    struct ObjectiveDefinition {\n        uint8 objectiveId;\n        Objective objectiveType;\n        bool exists;\n        bool paused;\n        bytes targetData;\n    }\n\n    uint16 public constant LIVES_MULT_1X = 100;\n    uint16 public constant LIVES_MULT_2X = 200;\n    uint16 public constant LIVES_MULT_3X = 300;\n    uint16 public constant MIN_COINS_MULTIPLIER = 50;\n    uint16 public constant MAX_COINS_MULTIPLIER = 300;\n    uint8 public constant STREAK_TIER_1 = 15;\n    uint8 public constant STREAK_TIER_2 = 25;\n    uint8 public constant STREAK_TIER_3 = 35;\n    uint8 public constant STREAK_TIER_4 = 50;\n    uint8 public constant ELIM_TIER_1 = 25;\n    uint8 public constant ELIM_TIER_2 = 50;\n    uint8 public constant ELIM_TIER_3 = 75;\n    uint8 public constant ELIM_TIER_4 = 100;\n    uint8 public constant MIN_BATTLE_RATE_PCT = 1;\n    uint8 public constant MAX_BATTLE_RATE_PCT = 30;\n    uint8 public constant MIN_VICTORY_RATE_PCT = 70;\n    uint8 public constant MAX_VICTORY_RATE_PCT = 100;\n    uint8 public constant MIN_TRADE_COUNT_PCT = 1;\n    uint8 public constant MAX_TRADE_COUNT_PCT = 30;\n    uint8 public constant MIN_TRADE_VOLUME_PCT = 1;\n    uint8 public constant MAX_TRADE_VOLUME_PCT = 150;\n\n    mapping(uint8 => CardDefinition) private _cards;\n    uint8 public cardCount;\n    uint8[] private _cardIds;\n\n    mapping(uint8 => ObjectiveDefinition) private _objectives;\n    uint8 public objectiveCount;\n    uint8[] private _objectiveIds;\n\n    mapping(CardCategory => uint8[]) private _cardsByCategory;\n    mapping(ModifierTrigger => uint8[]) private _cardsByTrigger;\n    mapping(MysteryGrantCard => uint8[]) private _cardsByResourceType;\n\n    event CardRegistered(\n        uint8 indexed cardId,\n        CardCategory category,\n        ModifierTrigger trigger,\n        MysteryGrantCard mysteryGrantCard,\n        uint16 baseWeight,\n        bytes effectData\n    );\n\n    event ObjectiveRegistered(\n        uint8 indexed objectiveId,\n        Objective objectiveType,\n        bytes targetData\n    );\n\n    event CardPaused(uint8 indexed cardId, uint32 timestamp);\n    event CardUnpaused(uint8 indexed cardId, uint32 timestamp);\n    event ObjectivePaused(uint8 indexed objectiveId, uint32 timestamp);\n    event ObjectiveUnpaused(uint8 indexed objectiveId, uint32 timestamp);\n\n    error CardIdTaken();\n    error CardNotFound();\n    error ObjectiveIdTaken();\n    error ObjectiveNotFound();\n    error InvalidCardCategory();\n    error InvalidModifierTrigger();\n    error InvalidResource();\n    error InvalidCardId();\n    error InvalidObjectiveId();\n    error InvalidBaseWeight();\n    error InvalidEffectData();\n    error CardAlreadyPaused();\n    error CardNotPaused();\n    error ObjectiveAlreadyPaused();\n    error ObjectiveNotPaused();\n    error InvalidObjective();\n    error InvalidTargetData();\n    error InvalidMultiplier();\n    error ExceedsMaxCards();\n    error ExceedsMaxObjectives();\n\n    constructor() Ownable(msg.sender) {}\n\n    modifier onlyExistingCards(uint8 cardId) {\n        if (!_cards[cardId].exists) revert CardNotFound();\n        _;\n    }\n\n    modifier onlyExistingObjectives(uint8 objectiveId) {\n        if (!_objectives[objectiveId].exists) revert ObjectiveNotFound();\n        _;\n    }\n\n    function registerCard(CardDefinition calldata card) external onlyOwner {\n        if (card.cardId == 0) revert InvalidCardId();\n        if (_cards[card.cardId].exists) revert CardIdTaken();\n\n        _validateCardDefinition(card);\n\n        _cards[card.cardId] = CardDefinition({\n            exists: true,\n            paused: false,\n            cardId: card.cardId,\n            category: card.category,\n            trigger: card.trigger,\n            mysteryGrantCard: card.mysteryGrantCard,\n            baseWeight: card.baseWeight,\n            effectData: card.effectData\n        });\n\n        _cardIds.push(card.cardId);\n        unchecked {\n            cardCount++;\n        }\n\n        _cardsByCategory[card.category].push(card.cardId);\n        if (card.category == CardCategory.Modifier) {\n            _cardsByTrigger[card.trigger].push(card.cardId);\n        }\n        if (card.category == CardCategory.Combat) {\n            _cardsByResourceType[card.mysteryGrantCard].push(card.cardId);\n        }\n\n        emit CardRegistered(\n            card.cardId,\n            card.category,\n            card.trigger,\n            card.mysteryGrantCard,\n            card.baseWeight,\n            card.effectData\n        );\n    }\n\n    function registerObjective(\n        ObjectiveDefinition calldata objective\n    ) external onlyOwner {\n        if (objective.objectiveId == 0) revert InvalidObjectiveId();\n        if (_objectives[objective.objectiveId].exists)\n            revert ObjectiveIdTaken();\n\n        _validateObjectiveDefinition(objective);\n\n        _objectives[objective.objectiveId] = ObjectiveDefinition({\n            objectiveId: objective.objectiveId,\n            objectiveType: objective.objectiveType,\n            exists: true,\n            paused: false,\n            targetData: objective.targetData\n        });\n\n        _objectiveIds.push(objective.objectiveId);\n        unchecked {\n            objectiveCount++;\n        }\n\n        emit ObjectiveRegistered(\n            objective.objectiveId,\n            objective.objectiveType,\n            objective.targetData\n        );\n    }\n\n    function pauseCard(uint8 card) external onlyOwner onlyExistingCards(card) {\n        if (_cards[card].paused) revert CardAlreadyPaused();\n        _cards[card].paused = true;\n        emit CardPaused(card, uint32(block.timestamp));\n    }\n\n    function unpauseCard(\n        uint8 cardId\n    ) external onlyOwner onlyExistingCards(cardId) {\n        if (!_cards[cardId].paused) revert CardNotPaused();\n        _cards[cardId].paused = false;\n        emit CardUnpaused(cardId, uint32(block.timestamp));\n    }\n\n    function pauseObjective(\n        uint8 objectiveId\n    ) external onlyOwner onlyExistingObjectives(objectiveId) {\n        if (_objectives[objectiveId].paused) revert ObjectiveAlreadyPaused();\n        _objectives[objectiveId].paused = true;\n        emit ObjectivePaused(objectiveId, uint32(block.timestamp));\n    }\n\n    function unpauseObjective(\n        uint8 objectiveId\n    ) external onlyOwner onlyExistingObjectives(objectiveId) {\n        if (!_objectives[objectiveId].paused) revert ObjectiveNotPaused();\n        _objectives[objectiveId].paused = false;\n        emit ObjectiveUnpaused(objectiveId, uint32(block.timestamp));\n    }\n\n    function getCard(\n        uint8 cardId\n    ) external view onlyExistingCards(cardId) returns (CardDefinition memory) {\n        return _cards[cardId];\n    }\n\n    function getAllCardIds() external view returns (uint8[] memory) {\n        return _cardIds;\n    }\n\n    function getCards(\n        uint8[] calldata cardIds\n    ) external view returns (CardDefinition[] memory cards) {\n        uint256 length = cardIds.length;\n        cards = new CardDefinition[](length);\n\n        for (uint256 i = 0; i < length; ) {\n            CardDefinition storage card = _cards[cardIds[i]];\n            if (!card.exists) revert CardNotFound();\n            cards[i] = card;\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function cardExists(uint8 cardId) external view returns (bool) {\n        return _cards[cardId].exists;\n    }\n\n    function isCardActive(uint8 cardId) external view returns (bool) {\n        return _cards[cardId].exists && !_cards[cardId].paused;\n    }\n\n    function isCardPaused(uint8 cardId) external view returns (bool) {\n        return _cards[cardId].paused;\n    }\n\n    function getObjective(\n        uint8 objectiveId\n    )\n        external\n        view\n        onlyExistingObjectives(objectiveId)\n        returns (ObjectiveDefinition memory)\n    {\n        return _objectives[objectiveId];\n    }\n\n    function getAllObjectiveIds() external view returns (uint8[] memory) {\n        return _objectiveIds;\n    }\n\n    function getObjectives(\n        uint8[] calldata objectiveIds\n    ) external view returns (ObjectiveDefinition[] memory objectives) {\n        uint256 length = objectiveIds.length;\n        objectives = new ObjectiveDefinition[](length);\n\n        for (uint256 i = 0; i < length; ) {\n            ObjectiveDefinition storage obj = _objectives[objectiveIds[i]];\n            if (!obj.exists) revert ObjectiveNotFound();\n            objectives[i] = obj;\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function objectiveExists(uint8 objectiveId) external view returns (bool) {\n        return _objectives[objectiveId].exists;\n    }\n\n    function isObjectiveActive(uint8 objectiveId) external view returns (bool) {\n        return\n            _objectives[objectiveId].exists && !_objectives[objectiveId].paused;\n    }\n\n    function isObjectivePaused(uint8 objectiveId) external view returns (bool) {\n        return _objectives[objectiveId].paused;\n    }\n\n    function _validateCardDefinition(\n        CardDefinition calldata card\n    ) internal pure {\n        if (card.baseWeight == 0) revert InvalidBaseWeight();\n        if (card.effectData.length == 0) revert InvalidEffectData();\n\n        CardCategory category = card.category;\n        ModifierTrigger trigger = card.trigger;\n        MysteryGrantCard mysteryGrantCard = card.mysteryGrantCard;\n\n        unchecked {\n            // Modifier: trigger != None, mysteryGrantCard == None\n            if (category == CardCategory.Modifier) {\n                if (trigger == ModifierTrigger.None)\n                    revert InvalidModifierTrigger();\n                if (mysteryGrantCard != MysteryGrantCard.None)\n                    revert InvalidResource();\n                return;\n            }\n\n            if (category == CardCategory.Combat) {\n                if (mysteryGrantCard == MysteryGrantCard.None)\n                    revert InvalidResource();\n                if (trigger != ModifierTrigger.None)\n                    revert InvalidModifierTrigger();\n                return;\n            }\n\n            if (category == CardCategory.Instant) {\n                if (trigger != ModifierTrigger.None)\n                    revert InvalidModifierTrigger();\n                if (mysteryGrantCard != MysteryGrantCard.None)\n                    revert InvalidResource();\n                return;\n            }\n\n            revert InvalidCardCategory();\n        }\n    }\n\n    function _validateObjectiveDefinition(\n        ObjectiveDefinition calldata objective\n    ) internal pure {\n        if (objective.targetData.length == 0) revert InvalidTargetData();\n\n        if (objective.objectiveType == Objective.ResourceLives) {\n            if (objective.targetData.length != 32) revert InvalidTargetData();\n            uint16 multiplier = abi.decode(objective.targetData, (uint16));\n            if (\n                multiplier != LIVES_MULT_1X &&\n                multiplier != LIVES_MULT_2X &&\n                multiplier != LIVES_MULT_3X\n            ) {\n                revert InvalidMultiplier();\n            }\n        } else if (objective.objectiveType == Objective.ResourceCoins) {\n            if (objective.targetData.length != 32) revert InvalidTargetData();\n            uint16 multiplier = abi.decode(objective.targetData, (uint16));\n            if (\n                multiplier < MIN_COINS_MULTIPLIER ||\n                multiplier > MAX_COINS_MULTIPLIER\n            ) {\n                revert InvalidMultiplier();\n            }\n        } else if (objective.objectiveType == Objective.ResourceAll) {\n            if (objective.targetData.length != 64) revert InvalidTargetData();\n            (uint16 livesMult, uint16 coinsMult) = abi.decode(\n                objective.targetData,\n                (uint16, uint16)\n            );\n\n            if (\n                livesMult != LIVES_MULT_1X &&\n                livesMult != LIVES_MULT_2X &&\n                livesMult != LIVES_MULT_3X\n            ) {\n                revert InvalidMultiplier();\n            }\n\n            if (\n                coinsMult < MIN_COINS_MULTIPLIER ||\n                coinsMult > MAX_COINS_MULTIPLIER\n            ) {\n                revert InvalidMultiplier();\n            }\n        } else if (\n            objective.objectiveType == Objective.WinStreak ||\n            objective.objectiveType == Objective.LoseStreak\n        ) {\n            if (objective.targetData.length != 32) revert InvalidTargetData();\n            uint8 percentage = abi.decode(objective.targetData, (uint8));\n            if (\n                percentage != STREAK_TIER_1 &&\n                percentage != STREAK_TIER_2 &&\n                percentage != STREAK_TIER_3 &&\n                percentage != STREAK_TIER_4\n            ) {\n                revert InvalidMultiplier();\n            }\n        } else if (objective.objectiveType == Objective.EliminationCount) {\n            if (objective.targetData.length != 32) revert InvalidTargetData();\n            uint8 percentage = abi.decode(objective.targetData, (uint8));\n            if (\n                percentage != ELIM_TIER_1 &&\n                percentage != ELIM_TIER_2 &&\n                percentage != ELIM_TIER_3 &&\n                percentage != ELIM_TIER_4\n            ) {\n                revert InvalidMultiplier();\n            }\n        } else if (objective.objectiveType == Objective.BattleRate) {\n            if (objective.targetData.length != 32) revert InvalidTargetData();\n            uint8 percentage = abi.decode(objective.targetData, (uint8));\n            if (\n                percentage < MIN_BATTLE_RATE_PCT ||\n                percentage > MAX_BATTLE_RATE_PCT\n            ) {\n                revert InvalidMultiplier();\n            }\n        } else if (objective.objectiveType == Objective.VictoryRate) {\n            if (objective.targetData.length != 32) revert InvalidTargetData();\n            uint8 percentage = abi.decode(objective.targetData, (uint8));\n            if (\n                percentage < MIN_VICTORY_RATE_PCT ||\n                percentage > MAX_VICTORY_RATE_PCT\n            ) {\n                revert InvalidMultiplier();\n            }\n        } else if (objective.objectiveType == Objective.PerfectRecord) {\n            if (objective.targetData.length != 32) revert InvalidTargetData();\n        } else if (objective.objectiveType == Objective.TradeCount) {\n            if (objective.targetData.length != 32) revert InvalidTargetData();\n            uint8 percentage = abi.decode(objective.targetData, (uint8));\n            if (\n                percentage < MIN_TRADE_COUNT_PCT ||\n                percentage > MAX_TRADE_COUNT_PCT\n            ) {\n                revert InvalidMultiplier();\n            }\n        } else if (objective.objectiveType == Objective.TradeVolume) {\n            if (objective.targetData.length != 32) revert InvalidTargetData();\n            uint8 percentage = abi.decode(objective.targetData, (uint8));\n            if (\n                percentage < MIN_TRADE_VOLUME_PCT ||\n                percentage > MAX_TRADE_VOLUME_PCT\n            ) {\n                revert InvalidMultiplier();\n            }\n        } else {\n            revert InvalidObjective();\n        }\n    }\n}\n"
      },
      "project/contracts/tournament/infrastructure/factory/libraries/deployment/FactoryDeployment.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {Clones} from \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport {TournamentCore} from \"./../../../../core/TournamentCore.sol\";\nimport {TournamentHub} from \"./../../../../modules/hub/TournamentHub.sol\";\nimport {TournamentCombat} from \"./../../../../modules/combat/TournamentCombat.sol\";\nimport {TournamentMysteryDeck} from \"./../../../../modules/mystery-deck/TournamentMysteryDeck.sol\";\nimport {TournamentTrading} from \"./../../../../modules/trading/TournamentTrading.sol\";\nimport {TournamentRandomizer} from \"./../../../../modules/randomizer/TournamentRandomizer.sol\";\n\nlibrary TournamentFactoryDeployment {\n    using Clones for address;\n\n    struct DeployedSystem {\n        address hub;\n        address combat;\n        address mysteryDeck;\n        address trading;\n        address randomizer;\n    }\n\n    struct InitConfig {\n        address registry;\n        address whitelist;\n        address deckCatalog;\n        address pythEntropy;\n        address entropyProvider;\n        address platformAdmin;\n        address gameOracle;\n    }\n\n    error InsufficientETHForSeed();\n\n    function deployContracts(\n        address hubImpl,\n        address combatImpl,\n        address mysteryDeckImpl,\n        address tradingImpl,\n        address randomizerImpl\n    ) external returns (DeployedSystem memory system) {\n        system.hub = hubImpl.clone();\n        system.combat = combatImpl.clone();\n        system.mysteryDeck = mysteryDeckImpl.clone();\n        system.trading = tradingImpl.clone();\n        system.randomizer = randomizerImpl.clone();\n    }\n\n    function initializeContracts(\n        DeployedSystem memory system,\n        TournamentCore.Params calldata params,\n        InitConfig memory config,\n        address creator\n    ) external {\n        TournamentHub(system.hub).initialize(\n            params,\n            creator,\n            system.combat,\n            system.mysteryDeck,\n            system.trading,\n            system.randomizer,\n            config.registry,\n            config.whitelist,\n            config.platformAdmin\n        );\n\n        TournamentCombat(system.combat).initialize(\n            system.hub,\n            config.gameOracle\n        );\n\n        TournamentMysteryDeck(system.mysteryDeck).initialize(\n            system.hub,\n            config.deckCatalog,\n            params.excludedCardIds,\n            params.deckDrawCost,\n            params.deckShuffleCost,\n            params.deckPeekCost,\n            config.gameOracle\n        );\n\n        TournamentTrading(system.trading).initialize(\n            system.hub,\n            config.gameOracle\n        );\n\n        initializeRandomizer(system, config);\n    }\n\n    function initializeRandomizer(\n        DeployedSystem memory system,\n        InitConfig memory config\n    ) public {\n        TournamentRandomizer(system.randomizer).initialize(\n            system.hub,\n            config.pythEntropy,\n            config.entropyProvider,\n            config.platformAdmin,\n            config.gameOracle\n        );\n\n        TournamentRandomizer(system.randomizer).setMysteryDeck(\n            system.mysteryDeck\n        );\n    }\n}\n"
      },
      "project/contracts/tournament/infrastructure/factory/libraries/validation/FactoryValidation.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {TournamentCore} from \"./../../../../core/TournamentCore.sol\";\nimport {TournamentTokenWhitelist} from \"./../../../token-whitelist/TournamentTokenWhitelist.sol\";\n\nlibrary TournamentFactoryValidation {\n    error InvalidAddress();\n    error InvalidStartTimestamp();\n    error InvalidCardsPerType();\n    error MinPlayersInvalid();\n    error MaxPlayersInvalid();\n    error InvalidStartPlayerCount();\n    error DurationTooShort();\n    error IntervalTooShort();\n    error DurationTooShortForInterval();\n    error CreatorFeeTooHigh();\n    error CombinedFeesTooHigh();\n    error InvalidStakeToken();\n    error MinStakeExceedsMaxStake();\n    error InvalidDecayAmount();\n    error InvalidExitCostBase();\n    error InvalidCoinConversionRate();\n    error InvalidInitialLives();\n    error InvalidExitLivesRequired();\n    error InvalidForfeitPenaltyBounds();\n    error ForfeitMinPenaltyExceedsMax();\n    error InvalidDeckCost();\n\n    function validateParams(\n        TournamentCore.Params calldata params,\n        TournamentTokenWhitelist whitelist\n    ) external view {\n        if (params.coinConversionRate == 0) revert InvalidCoinConversionRate();\n        if (params.decayAmount == 0) revert InvalidDecayAmount();\n        if (params.initialLives == 0) revert InvalidInitialLives();\n        if (params.exitLivesRequired == 0) revert InvalidExitLivesRequired();\n        if (params.exitCostBasePercentBPS == 0) revert InvalidExitCostBase();\n        if (params.deckDrawCost == 0) revert InvalidDeckCost();\n        if (params.deckShuffleCost == 0) revert InvalidDeckCost();\n        if (params.deckPeekCost == 0) revert InvalidDeckCost();\n        if (params.deckCatalog == address(0)) revert InvalidAddress();\n\n        validateTimingParams(params);\n        validatePlayerParams(params);\n        validateEconomicParams(params, whitelist);\n    }\n\n    function validateTimingParams(\n        TournamentCore.Params calldata params\n    ) public view {\n        if (params.startTimestamp <= block.timestamp)\n            revert InvalidStartTimestamp();\n        if (params.duration < TournamentCore.MIN_DURATION)\n            revert DurationTooShort();\n        if (params.gameInterval < TournamentCore.MIN_GAME_INTERVAL)\n            revert IntervalTooShort();\n\n        uint256 maxIntervals = params.duration / params.gameInterval;\n        if (maxIntervals < TournamentCore.MIN_INTERVALS_REQUIRED)\n            revert DurationTooShortForInterval();\n\n        if (params.decayAmount > type(uint128).max / maxIntervals) {\n            revert InvalidDecayAmount();\n        }\n    }\n\n    function validatePlayerParams(\n        TournamentCore.Params calldata params\n    ) public pure {\n        if (params.minPlayers < TournamentCore.MIN_PLAYERS_REQUIRED)\n            revert MinPlayersInvalid();\n\n        if (\n            params.minPlayers >= TournamentCore.MIN_PLAYERS_REQUIRED &&\n            params.startPlayerCount < params.minPlayers\n        ) {\n            revert InvalidStartPlayerCount();\n        }\n\n        if (params.maxPlayers > 0) {\n            if (params.maxPlayers < params.minPlayers)\n                revert MaxPlayersInvalid();\n            if (params.startPlayerCount > params.maxPlayers)\n                revert InvalidStartPlayerCount();\n        }\n\n        if (params.cardsPerType < TournamentCore.MIN_CARDS_PER_TYPE)\n            revert InvalidCardsPerType();\n\n        unchecked {\n            if (params.cardsPerType * 3 > 255) revert InvalidCardsPerType();\n        }\n    }\n\n    function validateEconomicParams(\n        TournamentCore.Params calldata params,\n        TournamentTokenWhitelist whitelist\n    ) public view {\n        if (\n            params.minStake > 0 &&\n            params.maxStake > 0 &&\n            params.minStake > params.maxStake\n        ) revert MinStakeExceedsMaxStake();\n\n        if (params.creatorFeePercent > TournamentCore.MAX_CREATOR_FEE_PERCENT)\n            revert CreatorFeeTooHigh();\n        if (\n            params.creatorFeePercent + params.platformFeePercent >\n            TournamentCore.MAX_COMBINED_FEE_PERCENT\n        ) revert CombinedFeesTooHigh();\n\n        if (params.forfeitAllowed) {\n            if (\n                params.forfeitMinPenalty > 100 || params.forfeitMaxPenalty > 100\n            ) revert InvalidForfeitPenaltyBounds();\n            if (params.forfeitMinPenalty > params.forfeitMaxPenalty)\n                revert ForfeitMinPenaltyExceedsMax();\n        } else {\n            if (params.forfeitMinPenalty > 0 || params.forfeitMaxPenalty > 0)\n                revert InvalidForfeitPenaltyBounds();\n        }\n\n        if (!whitelist.isWhitelisted(params.stakeToken))\n            revert InvalidStakeToken();\n    }\n}\n"
      },
      "project/contracts/tournament/infrastructure/factory/TournamentFactory.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {TournamentRegistry} from \"./../registry/TournamentRegistry.sol\";\nimport {TournamentTokenWhitelist} from \"./../token-whitelist/TournamentTokenWhitelist.sol\";\nimport {TournamentDeckCatalog} from \"./../deck-catalog/TournamentDeckCatalog.sol\";\nimport {TournamentCore} from \"./../../core/TournamentCore.sol\";\nimport {TournamentFactoryValidation} from \"./libraries/validation/FactoryValidation.sol\";\nimport {TournamentFactoryDeployment} from \"./libraries/deployment/FactoryDeployment.sol\";\n\ncontract TournamentFactory is Ownable {\n    struct FactoryConfig {\n        address hubImpl;\n        address combatImpl;\n        address mysteryDeckImpl;\n        address tradingImpl;\n        address randomizerImpl;\n        address registry;\n        address whitelist;\n        address deckCatalog;\n        address pythEntropy;\n        address entropyProvider;\n        address platformAdmin;\n        address gameOracle;\n        uint8 platformFeePercent;\n    }\n\n    address public immutable hubImplementation;\n    address public immutable combatImplementation;\n    address public immutable mysteryDeckImplementation;\n    address public immutable tradingImplementation;\n    address public immutable randomizerImplementation;\n\n    address public immutable platformAdmin;\n    TournamentRegistry public immutable registry;\n    TournamentTokenWhitelist public immutable whitelist;\n    TournamentDeckCatalog public immutable deckCatalog;\n\n    address public immutable pythEntropy;\n    address public immutable entropyProvider;\n    uint8 public platformFeePercent;\n\n    address public gameOracle;\n\n    event TournamentSystemCreated(\n        address indexed hub,\n        address indexed combat,\n        address mysteryDeck,\n        address trading,\n        address randomizer,\n        address indexed creator,\n        TournamentCore.Params params\n    );\n\n    event PlatformFeeUpdated(uint8 newFee);\n    event RngOracleUpdated(address indexed newOracle);\n    event ETHDeposited(address indexed from, uint256 amount);\n    event ETHWithdrawn(address indexed to, uint256 amount);\n\n    error InvalidAddress();\n    error PlatformFeeTooHigh();\n\n    constructor(FactoryConfig memory config) Ownable(msg.sender) {\n        if (\n            config.hubImpl == address(0) ||\n            config.combatImpl == address(0) ||\n            config.mysteryDeckImpl == address(0) ||\n            config.tradingImpl == address(0) ||\n            config.randomizerImpl == address(0) ||\n            config.registry == address(0) ||\n            config.whitelist == address(0) ||\n            config.deckCatalog == address(0) ||\n            config.pythEntropy == address(0) ||\n            config.entropyProvider == address(0)\n        ) revert InvalidAddress();\n\n        if (config.platformFeePercent > 5) revert PlatformFeeTooHigh();\n\n        hubImplementation = config.hubImpl;\n        combatImplementation = config.combatImpl;\n        mysteryDeckImplementation = config.mysteryDeckImpl;\n        tradingImplementation = config.tradingImpl;\n        randomizerImplementation = config.randomizerImpl;\n        registry = TournamentRegistry(config.registry);\n        whitelist = TournamentTokenWhitelist(config.whitelist);\n        deckCatalog = TournamentDeckCatalog(config.deckCatalog);\n        pythEntropy = config.pythEntropy;\n        entropyProvider = config.entropyProvider;\n\n        platformAdmin = config.platformAdmin == address(0)\n            ? msg.sender\n            : config.platformAdmin;\n        gameOracle = config.gameOracle == address(0)\n            ? msg.sender\n            : config.gameOracle;\n        platformFeePercent = config.platformFeePercent;\n    }\n\n    receive() external payable {\n        emit ETHDeposited(msg.sender, msg.value);\n    }\n\n    function createTournamentSystem(\n        TournamentCore.Params calldata params\n    ) external returns (address hub) {\n        TournamentFactoryValidation.validateParams(params, whitelist);\n\n        TournamentFactoryDeployment.DeployedSystem\n            memory system = TournamentFactoryDeployment.deployContracts(\n                hubImplementation,\n                combatImplementation,\n                mysteryDeckImplementation,\n                tradingImplementation,\n                randomizerImplementation\n            );\n\n        TournamentFactoryDeployment.InitConfig\n            memory initConfig = TournamentFactoryDeployment.InitConfig({\n                registry: address(registry),\n                whitelist: address(whitelist),\n                deckCatalog: address(deckCatalog),\n                pythEntropy: pythEntropy,\n                entropyProvider: entropyProvider,\n                platformAdmin: platformAdmin,\n                gameOracle: gameOracle\n            });\n\n        TournamentFactoryDeployment.initializeContracts(\n            system,\n            params,\n            initConfig,\n            msg.sender\n        );\n\n        // Register\n        registry.registerTournamentSystem(\n            system.hub,\n            system.combat,\n            system.mysteryDeck,\n            system.trading,\n            system.randomizer\n        );\n\n        emit TournamentSystemCreated(\n            system.hub,\n            system.combat,\n            system.mysteryDeck,\n            system.trading,\n            system.randomizer,\n            msg.sender,\n            params\n        );\n\n        return system.hub;\n    }\n\n    function setPlatformFee(uint8 newFee) external onlyOwner {\n        if (newFee > TournamentCore.MAX_PLATFORM_FEE)\n            revert PlatformFeeTooHigh();\n        platformFeePercent = newFee;\n        emit PlatformFeeUpdated(newFee);\n    }\n\n    function setGameOracle(address newOracle) external onlyOwner {\n        if (newOracle == address(0)) revert InvalidAddress();\n        gameOracle = newOracle;\n        emit RngOracleUpdated(newOracle);\n    }\n\n    function withdrawETH(uint256 amount) external onlyOwner {\n        (bool success, ) = payable(msg.sender).call{value: amount}(\"\");\n        require(success, \"ETH transfer failed\");\n        emit ETHWithdrawn(msg.sender, amount);\n    }\n\n    function getContractBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function getImplementations()\n        external\n        view\n        returns (\n            address hub,\n            address combat,\n            address mysteryDeck,\n            address trading,\n            address randomizer\n        )\n    {\n        return (\n            hubImplementation,\n            combatImplementation,\n            mysteryDeckImplementation,\n            tradingImplementation,\n            randomizerImplementation\n        );\n    }\n}\n"
      },
      "project/contracts/tournament/infrastructure/registry/TournamentRegistry.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {TournamentCore} from \"./../../core/TournamentCore.sol\";\n\n/**\n * Architecture:\n * - Each tournament = 5 contracts (Hub and 4 modules: Combat, Deck, Trading, Randomizer)\n * - Hub is the primary contract - owns player state, updates status\n * - Registry tracks complete systems and provides reverse lookups\n */\ncontract TournamentRegistry is Ownable {\n    struct TournamentSystem {\n        address hub;\n        address combat;\n        address mysteryDeck;\n        address trading;\n        address randomizer;\n        bool exists;\n    }\n\n    mapping(address => bool) private _hasFactoryRole;\n\n    // Tournament tracking (by hub address - primary)\n    address[] private _allTournaments;\n    mapping(address => TournamentSystem) private _tournamentSystems;\n    mapping(address => bool) private _isRegistered;\n\n    // Status tracking (by hub address)\n    mapping(address => TournamentCore.Status) private _tournamentStatus;\n    mapping(TournamentCore.Status => address[]) private _tournamentsByStatus;\n    mapping(address => mapping(TournamentCore.Status => uint256))\n        private _tournamentStatusIndex;\n\n    // Reverse lookups (module address => hub address)\n    mapping(address => address) private _moduleToHub;\n\n    event FactoryRoleGranted(address indexed factory);\n    event FactoryRoleRevoked(address indexed factory);\n    event TournamentSystemRegistered(\n        address indexed hub,\n        address indexed combat,\n        address mysteryDeck,\n        address trading,\n        address randomizer,\n        TournamentCore.Status initialStatus\n    );\n    event TournamentStatusUpdated(\n        address indexed hub,\n        TournamentCore.Status oldStatus,\n        TournamentCore.Status newStatus\n    );\n\n    error InvalidAddress();\n    error OnlyFactory();\n    error AlreadyRegistered();\n    error NotRegistered();\n    error ModuleAlreadyUsed();\n\n    modifier onlyRegisteredHub(address hub) {\n        if (!_isRegistered[hub]) revert NotRegistered();\n        _;\n    }\n\n    constructor() Ownable(msg.sender) {}\n\n    function grantFactoryRole(address factory) external onlyOwner {\n        if (factory == address(0)) revert InvalidAddress();\n        _hasFactoryRole[factory] = true;\n        emit FactoryRoleGranted(factory);\n    }\n\n    function revokeFactoryRole(address factory) external onlyOwner {\n        _hasFactoryRole[factory] = false;\n        emit FactoryRoleRevoked(factory);\n    }\n\n    function hasFactoryRole(address factory) external view returns (bool) {\n        return _hasFactoryRole[factory];\n    }\n\n    /**\n     * @notice Register a complete tournament system (5 contracts)\n     * @dev Called by TournamentFactory after deploying all 5 minimal proxies\n     * Validates all addresses and ensures no module is reused across tournaments\n     */\n    function registerTournamentSystem(\n        address hub,\n        address combat,\n        address mysteryDeck,\n        address trading,\n        address randomizer\n    ) external {\n        if (!_hasFactoryRole[msg.sender]) revert OnlyFactory();\n        if (_isRegistered[hub]) revert AlreadyRegistered();\n        if (\n            hub == address(0) ||\n            combat == address(0) ||\n            randomizer == address(0) ||\n            trading == address(0) ||\n            mysteryDeck == address(0)\n        ) revert InvalidAddress();\n\n        if (\n            _moduleToHub[combat] != address(0) ||\n            _moduleToHub[randomizer] != address(0) ||\n            _moduleToHub[mysteryDeck] != address(0) ||\n            _moduleToHub[trading] != address(0)\n        ) revert ModuleAlreadyUsed();\n\n        _tournamentSystems[hub] = TournamentSystem({\n            hub: hub,\n            combat: combat,\n            mysteryDeck: mysteryDeck,\n            trading: trading,\n            randomizer: randomizer,\n            exists: true\n        });\n\n        _isRegistered[hub] = true;\n        _allTournaments.push(hub);\n\n        // Setup reverse lookup\n        _moduleToHub[hub] = hub; // Hub points to itself\n        _moduleToHub[combat] = hub;\n        _moduleToHub[mysteryDeck] = hub;\n        _moduleToHub[trading] = hub;\n        _moduleToHub[randomizer] = hub;\n\n        // Status tracking\n        TournamentCore.Status initialStatus = TournamentCore.Status.Open;\n        _tournamentStatus[hub] = initialStatus;\n\n        uint256 statusArrayLength = _tournamentsByStatus[initialStatus].length;\n        _tournamentStatusIndex[hub][initialStatus] = statusArrayLength;\n        _tournamentsByStatus[initialStatus].push(hub);\n\n        emit TournamentSystemRegistered(\n            hub,\n            combat,\n            mysteryDeck,\n            trading,\n            randomizer,\n            initialStatus\n        );\n    }\n\n    function updateTournamentStatus(TournamentCore.Status newStatus) external {\n        address hub = msg.sender;\n\n        if (!_isRegistered[hub]) revert NotRegistered();\n\n        TournamentCore.Status oldStatus = _tournamentStatus[hub];\n\n        // Early exit if status hasn't changed\n        if (oldStatus == newStatus) return;\n\n        // Remove from old status array\n        _removeFromStatusArray(hub, oldStatus);\n\n        // Add to new status array\n        uint256 newStatusArrayLength = _tournamentsByStatus[newStatus].length;\n        _tournamentStatusIndex[hub][newStatus] = newStatusArrayLength;\n        _tournamentsByStatus[newStatus].push(hub);\n        _tournamentStatus[hub] = newStatus;\n\n        emit TournamentStatusUpdated(hub, oldStatus, newStatus);\n    }\n\n    function _removeFromStatusArray(\n        address hub,\n        TournamentCore.Status status\n    ) private onlyRegisteredHub(hub) {\n        uint256 indexToRemove = _tournamentStatusIndex[hub][status];\n\n        unchecked {\n            // Safe: array length is always > 0 when removing (hub is registered in this status)\n            uint256 lastIndex = _tournamentsByStatus[status].length - 1;\n\n            if (indexToRemove != lastIndex) {\n                address lastTournament = _tournamentsByStatus[status][\n                    lastIndex\n                ];\n                _tournamentsByStatus[status][indexToRemove] = lastTournament;\n                _tournamentStatusIndex[lastTournament][status] = indexToRemove;\n            }\n\n            _tournamentsByStatus[status].pop();\n        }\n    }\n\n    /**\n     * @notice Get complete tournament system by hub address\n     */\n    function getTournamentSystem(\n        address hub\n    ) external view onlyRegisteredHub(hub) returns (TournamentSystem memory) {\n        return _tournamentSystems[hub];\n    }\n\n    /**\n     * @notice Get hub address from any module address\n     * @dev Useful when you have a Combat/Deck/Trading/Randomizer address\n     */\n    function getHubAddress(\n        address moduleAddress\n    ) external view returns (address) {\n        address hub = _moduleToHub[moduleAddress];\n        if (hub == address(0)) revert NotRegistered();\n        return hub;\n    }\n\n    /**\n     * @notice Get tournament system by any module address\n     */\n    function getTournamentSystemByModule(\n        address moduleAddress\n    ) external view returns (TournamentSystem memory) {\n        address hub = _moduleToHub[moduleAddress];\n        if (hub == address(0)) revert NotRegistered();\n        return _tournamentSystems[hub];\n    }\n\n    /**\n     * @notice Get all tournament hub addresses\n     */\n    function getAllTournaments() external view returns (address[] memory) {\n        return _allTournaments;\n    }\n\n    /**\n     * @notice Get tournaments by status (returns hub addresses)\n     */\n    function getTournamentsByStatus(\n        TournamentCore.Status status\n    ) external view returns (address[] memory) {\n        return _tournamentsByStatus[status];\n    }\n\n    function getTournamentStatus(\n        address hub\n    ) external view onlyRegisteredHub(hub) returns (uint8) {\n        return uint8(_tournamentStatus[hub]);\n    }\n\n    function isTournamentRegistered(address hub) external view returns (bool) {\n        return _isRegistered[hub];\n    }\n\n    function isModuleRegistered(\n        address moduleAddress\n    ) external view returns (bool) {\n        return _moduleToHub[moduleAddress] != address(0);\n    }\n\n    function getTournamentCount() external view returns (uint256) {\n        return _allTournaments.length;\n    }\n}\n"
      },
      "project/contracts/tournament/infrastructure/token-whitelist/TournamentTokenWhitelist.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract TournamentTokenWhitelist is Ownable {\n    struct TokenInfo {\n        bool exists;\n        bool isPaused;\n        uint8 index;\n    }\n\n    uint8 public constant MAX_TOKENS = 255;\n\n    address[] private _tokens;\n    mapping(address => TokenInfo) private _tokenInfo;\n\n    event TokenWhitelisted(address indexed token);\n    event TokenPaused(address indexed token, string reason);\n    event TokenUnpaused(address indexed token);\n\n    error InvalidTokenAddress();\n    error AlreadyExists();\n    error NotFound();\n    error MaxTokensReached();\n\n    constructor() Ownable(msg.sender) {}\n\n    function addToken(address token) external onlyOwner {\n        if (token == address(0)) revert InvalidTokenAddress();\n\n        TokenInfo storage info = _tokenInfo[token];\n        if (info.exists) revert AlreadyExists();\n\n        uint256 currentLength = _tokens.length;\n        if (currentLength >= MAX_TOKENS) revert MaxTokensReached();\n\n        info.exists = true;\n        info.isPaused = false;\n        info.index = uint8(currentLength);\n\n        _tokens.push(token);\n\n        emit TokenWhitelisted(token);\n    }\n\n    function pauseToken(\n        address token,\n        string calldata reason\n    ) external onlyOwner {\n        TokenInfo storage info = _tokenInfo[token];\n        if (!info.exists) revert NotFound();\n\n        info.isPaused = true;\n        emit TokenPaused(token, reason);\n    }\n\n    function unpauseToken(address token) external onlyOwner {\n        TokenInfo storage info = _tokenInfo[token];\n        if (!info.exists) revert NotFound();\n\n        info.isPaused = false;\n        emit TokenUnpaused(token);\n    }\n\n    function isWhitelisted(address token) external view returns (bool) {\n        TokenInfo storage info = _tokenInfo[token];\n        return info.exists && !info.isPaused;\n    }\n\n    function isPaused(address token) external view returns (bool) {\n        return _tokenInfo[token].isPaused;\n    }\n\n    function isTokenRegistered(address token) external view returns (bool) {\n        return _tokenInfo[token].exists;\n    }\n\n    function getTokens() external view returns (address[] memory) {\n        return _tokens;\n    }\n\n    function getTokenCount() external view returns (uint256) {\n        return _tokens.length;\n    }\n\n    function getRemainingCapacity() external view returns (uint256) {\n        unchecked {\n            return MAX_TOKENS - _tokens.length;\n        }\n    }\n\n    function getToken(\n        address token\n    ) external view returns (bool whitelisted, bool paused, uint8 index) {\n        TokenInfo storage info = _tokenInfo[token];\n        return (info.exists, info.isPaused, info.index);\n    }\n}\n"
      },
      "project/contracts/tournament/modules/combat/TournamentCombat.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {Initializable} from \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport {TournamentCore} from \"./../../core/TournamentCore.sol\";\n\ninterface ITournamentHub {\n    function getPlayer(\n        address player\n    ) external view returns (TournamentCore.PlayerResources memory);\n    function updatePlayerResources(\n        address player,\n        TournamentCore.PlayerResources calldata resources\n    ) external;\n    function status() external view returns (TournamentCore.Status);\n}\n\ncontract TournamentCombat is Initializable {\n    address public hub;\n    uint96 public totalCombats;\n    address public gameOracle;\n    uint256 public nextCombatId;\n    uint32 public constant COMBAT_TIMEOUT = 300; // 5 minutes\n\n    enum Outcome {\n        P1Win,\n        P2Win,\n        Draw\n    }\n\n    struct CombatSession {\n        address player1;\n        address player2;\n        uint32 startedAt;\n        bool active;\n    }\n\n    struct Resolution {\n        uint256 combatId;\n        address player1;\n        address player2;\n        uint8 p1CardsBurned;\n        uint8 p2CardsBurned;\n        Outcome rpsOutcome;\n        Outcome decision;\n        bool modifierApplied;\n        int16 p1LifeDelta;\n        int16 p2LifeDelta;\n        int256 p1CoinDelta;\n        int256 p2CoinDelta;\n        bytes32 proofHash;\n    }\n\n    mapping(uint256 => CombatSession) public combats;\n\n    event CombatStarted(\n        uint256 indexed combatId,\n        address indexed p1,\n        address indexed p2,\n        uint32 timestamp\n    );\n    event CombatResolved(\n        Resolution resolution,\n        uint256 combatId,\n        uint32 timestamp\n    );\n    event CombatTimedOut(\n        uint256 indexed combatId,\n        address indexed p1,\n        address indexed p2,\n        uint32 timestamp\n    );\n\n    error InvalidAddress();\n    error OnlyGameOracle();\n    error PlayerNotFound();\n    error PlayerNotActive();\n    error PlayerAlreadyInCombat();\n    error PlayerNotInCombat();\n    error InvalidOutcome();\n    error SamePlayer();\n    error InsufficientCards();\n    error ResourceOverflow();\n    error TournamentNotActive();\n    error CombatNotFound();\n    error CombatNotActive();\n    error CombatNotTimedOut();\n    error PlayerMismatch();\n\n    modifier onlyGameOracle() {\n        if (msg.sender != gameOracle) revert OnlyGameOracle();\n        _;\n    }\n\n    modifier tournamentActive() {\n        if (ITournamentHub(hub).status() != TournamentCore.Status.Active)\n            revert TournamentNotActive();\n        _;\n    }\n\n    function initialize(\n        address _hub,\n        address _gameOracle\n    ) external initializer {\n        if (_hub == address(0) || _gameOracle == address(0))\n            revert InvalidAddress();\n        hub = _hub;\n        gameOracle = _gameOracle;\n        nextCombatId = 1;\n    }\n\n    function startCombat(\n        address p1,\n        address p2\n    ) external onlyGameOracle tournamentActive returns (uint256 combatId) {\n        if (p1 == p2) revert SamePlayer();\n\n        TournamentCore.PlayerResources memory player1 = ITournamentHub(hub)\n            .getPlayer(p1);\n        TournamentCore.PlayerResources memory player2 = ITournamentHub(hub)\n            .getPlayer(p2);\n\n        if (!player1.exists || !player2.exists) revert PlayerNotFound();\n        if (\n            player1.status != TournamentCore.PlayerStatus.Active ||\n            player2.status != TournamentCore.PlayerStatus.Active\n        ) revert PlayerNotActive();\n        if (player1.inCombat || player2.inCombat)\n            revert PlayerAlreadyInCombat();\n\n        combatId = nextCombatId;\n        unchecked {\n            nextCombatId++;\n        }\n\n        combats[combatId] = CombatSession({\n            player1: p1,\n            player2: p2,\n            startedAt: uint32(block.timestamp),\n            active: true\n        });\n\n        player1.inCombat = true;\n        player2.inCombat = true;\n\n        ITournamentHub(hub).updatePlayerResources(p1, player1);\n        ITournamentHub(hub).updatePlayerResources(p2, player2);\n\n        emit CombatStarted(combatId, p1, p2, uint32(block.timestamp));\n    }\n\n    function resolveCombat(\n        Resolution calldata r\n    ) external onlyGameOracle tournamentActive {\n        CombatSession storage combat = combats[r.combatId];\n\n        if (!combat.active) revert CombatNotActive();\n        if (combat.player1 != r.player1 || combat.player2 != r.player2)\n            revert PlayerMismatch();\n\n        address hubCache = hub;\n\n        TournamentCore.PlayerResources memory p1 = ITournamentHub(hubCache)\n            .getPlayer(r.player1);\n        TournamentCore.PlayerResources memory p2 = ITournamentHub(hubCache)\n            .getPlayer(r.player2);\n\n        if (!p1.exists || !p2.exists) revert PlayerNotFound();\n        if (\n            p1.status != TournamentCore.PlayerStatus.Active ||\n            p2.status != TournamentCore.PlayerStatus.Active\n        ) revert PlayerNotActive();\n        if (!p1.inCombat || !p2.inCombat) revert PlayerNotInCombat();\n\n        if (r.rpsOutcome > Outcome.Draw || r.decision > Outcome.Draw)\n            revert InvalidOutcome();\n        if (p1.totalCards < r.p1CardsBurned || p2.totalCards < r.p2CardsBurned)\n            revert InsufficientCards();\n\n        p1.lives = _applyLife(p1.lives, r.p1LifeDelta);\n        p2.lives = _applyLife(p2.lives, r.p2LifeDelta);\n        p1.coins = _applyCoin(p1.coins, r.p1CoinDelta);\n        p2.coins = _applyCoin(p2.coins, r.p2CoinDelta);\n\n        p1.inCombat = false;\n        p2.inCombat = false;\n\n        unchecked {\n            p1.totalCards -= r.p1CardsBurned;\n            p2.totalCards -= r.p2CardsBurned;\n            p1.combatCount++;\n            p2.combatCount++;\n            totalCombats++;\n        }\n\n        combat.active = false;\n\n        ITournamentHub(hubCache).updatePlayerResources(r.player1, p1);\n        ITournamentHub(hubCache).updatePlayerResources(r.player2, p2);\n\n        emit CombatResolved(r, r.combatId, uint32(block.timestamp));\n    }\n\n    function timeoutCombat(uint256 combatId) external {\n        CombatSession storage combat = combats[combatId];\n\n        if (!combat.active) revert CombatNotActive();\n        if (block.timestamp < combat.startedAt + COMBAT_TIMEOUT)\n            revert CombatNotTimedOut();\n\n        // Release players from combat\n        TournamentCore.PlayerResources memory p1 = ITournamentHub(hub)\n            .getPlayer(combat.player1);\n        TournamentCore.PlayerResources memory p2 = ITournamentHub(hub)\n            .getPlayer(combat.player2);\n\n        p1.inCombat = false;\n        p2.inCombat = false;\n\n        combat.active = false;\n\n        ITournamentHub(hub).updatePlayerResources(combat.player1, p1);\n        ITournamentHub(hub).updatePlayerResources(combat.player2, p2);\n\n        emit CombatTimedOut(\n            combatId,\n            combat.player1,\n            combat.player2,\n            uint32(block.timestamp)\n        );\n    }\n\n    function _applyLife(\n        uint8 current,\n        int16 delta\n    ) internal pure returns (uint8) {\n        if (delta >= 0) {\n            uint256 result = uint256(current) + uint256(uint16(delta));\n            if (result > type(uint8).max) revert ResourceOverflow();\n            return uint8(result);\n        }\n        uint16 abs = uint16(-delta);\n        return current < abs ? 0 : current - uint8(abs);\n    }\n\n    function _applyCoin(\n        uint256 current,\n        int256 delta\n    ) internal pure returns (uint256) {\n        if (delta >= 0) return current + uint256(delta);\n        uint256 abs = uint256(-delta);\n        return current < abs ? 0 : current - abs;\n    }\n\n    function getCombat(\n        uint256 combatId\n    ) external view returns (CombatSession memory) {\n        return combats[combatId];\n    }\n\n    function isCombatActive(uint256 combatId) external view returns (bool) {\n        return combats[combatId].active;\n    }\n}\n"
      },
      "project/contracts/tournament/modules/hub/libraries/player/Player.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {TournamentCore} from \"./../../../../core/TournamentCore.sol\";\nimport {TournamentPlayerActions} from \"./../../../../core/libraries/player-actions/PlayerActions.sol\";\nimport {TournamentLifecycle} from \"./../../../../core/libraries/lifecycle/Lifecycle.sol\";\nimport {TournamentRegistry} from \"./../../../../infrastructure/registry/TournamentRegistry.sol\";\n\nlibrary TournamentHubPlayer {\n    event ExitWindowOpened(uint32 windowStart, uint32 windowEnd);\n\n    error InvalidStatus();\n    error AlreadyJoined();\n    error CannotExit();\n    error ExitWindowNotOpen();\n    error ForfeitNotAllowed();\n    error AlreadyForfeited();\n    error AlreadyExited();\n\n    struct JoinResult {\n        TournamentCore.Status newStatus;\n        uint32 newActualStartTime;\n        uint32 newEndTime;\n        uint32 newExitWindowStart;\n    }\n\n    function processJoin(\n        mapping(address => TournamentCore.PlayerResources) storage players,\n        TournamentCore.Params storage params,\n        TournamentCore.Status status,\n        uint16 playerCount,\n        uint256 totalStaked,\n        TournamentRegistry registry,\n        address sender,\n        uint256 stakeAmount\n    ) external returns (JoinResult memory result) {\n        if (status != TournamentCore.Status.Open) revert InvalidStatus();\n        if (players[sender].exists) revert AlreadyJoined();\n\n        TournamentPlayerActions.validateEntry(\n            params.minStake,\n            params.maxStake,\n            params.maxPlayers,\n            stakeAmount,\n            playerCount\n        );\n\n        TournamentPlayerActions.processJoin(\n            players[sender],\n            params.stakeToken,\n            sender,\n            stakeAmount,\n            params.coinConversionRate,\n            params.initialLives,\n            params.cardsPerType\n        );\n\n        (\n            result.newStatus,\n            result.newActualStartTime,\n            result.newEndTime,\n            result.newExitWindowStart\n        ) = TournamentLifecycle.checkAndTransition(\n            status,\n            params,\n            playerCount + 1,\n            totalStaked + stakeAmount,\n            registry\n        );\n    }\n\n    function processExit(\n        mapping(address => TournamentCore.PlayerResources) storage players,\n        address[] storage winners,\n        TournamentCore.Status status,\n        uint32 exitWindowStart,\n        address sender,\n        bool canExit\n    ) external {\n        if (status != TournamentCore.Status.Active) revert InvalidStatus();\n        if (block.timestamp < exitWindowStart) revert ExitWindowNotOpen();\n        if (!canExit) revert CannotExit();\n\n        TournamentPlayerActions.processExit(players[sender], sender);\n        winners.push(sender);\n    }\n\n    function processForfeit(\n        mapping(address => TournamentCore.PlayerResources) storage players,\n        TournamentCore.Params storage params,\n        TournamentCore.Status status,\n        address sender,\n        uint256 penaltyAmount\n    ) external {\n        if (status != TournamentCore.Status.Active) revert InvalidStatus();\n        if (!params.forfeitAllowed) revert ForfeitNotAllowed();\n\n        TournamentCore.PlayerResources storage player = players[sender];\n        if (player.status == TournamentCore.PlayerStatus.Forfeited)\n            revert AlreadyForfeited();\n        if (player.status == TournamentCore.PlayerStatus.Exited)\n            revert AlreadyExited();\n\n        TournamentPlayerActions.processForfeit(\n            player,\n            params.stakeToken,\n            sender,\n            penaltyAmount\n        );\n    }\n}\n"
      },
      "project/contracts/tournament/modules/hub/libraries/prize/Prize.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {TournamentCore} from \"./../../../../core/TournamentCore.sol\";\nimport {TournamentViews} from \"./../../../../core/libraries/views/Views.sol\";\n\nlibrary TournamentHubPrize {\n    using SafeERC20 for IERC20;\n\n    event PrizeClaimed(address indexed player, uint256 amount);\n    event CreatorFeesCollected(address indexed creator, uint256 amount);\n\n    error NotWinner();\n    error AlreadyClaimed();\n    error InvalidStatus();\n    error NoWinners();\n    error OnlyCreator();\n\n    function claimPrize(\n        mapping(address => TournamentCore.PlayerResources) storage players,\n        TournamentCore.Params storage params,\n        TournamentCore.Status status,\n        uint256 totalStaked,\n        uint256 totalForfeitPenalties,\n        uint256 winnersLength,\n        address sender\n    ) external {\n        if (status != TournamentCore.Status.Ended) revert InvalidStatus();\n        if (winnersLength == 0) revert NoWinners();\n\n        TournamentCore.PlayerResources storage player = players[sender];\n        if (player.status == TournamentCore.PlayerStatus.PrizeClaimed)\n            revert AlreadyClaimed();\n        if (player.status != TournamentCore.PlayerStatus.Exited)\n            revert NotWinner();\n\n        uint256 prizePerWinner = TournamentViews.calculatePrizePerWinner(\n            totalStaked,\n            totalForfeitPenalties,\n            params.platformFeePercent,\n            params.creatorFeePercent,\n            winnersLength\n        );\n\n        player.status = TournamentCore.PlayerStatus.PrizeClaimed;\n\n        IERC20(params.stakeToken).safeTransfer(sender, prizePerWinner);\n        emit PrizeClaimed(sender, prizePerWinner);\n    }\n\n    function collectCreatorFees(\n        TournamentCore.Params storage params,\n        TournamentCore.Status status,\n        uint256 totalStaked,\n        uint256 totalForfeitPenalties,\n        address creator,\n        address sender\n    ) external returns (bool) {\n        if (sender != creator) revert OnlyCreator();\n        if (status != TournamentCore.Status.Ended) revert InvalidStatus();\n\n        uint256 totalPrizePool = totalStaked + totalForfeitPenalties;\n\n        unchecked {\n            uint256 creatorFee = (totalPrizePool * params.creatorFeePercent) /\n                100;\n            IERC20(params.stakeToken).safeTransfer(creator, creatorFee);\n            emit CreatorFeesCollected(creator, creatorFee);\n        }\n\n        return true;\n    }\n}\n"
      },
      "project/contracts/tournament/modules/hub/libraries/status/Status.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {TournamentCore} from \"./../../../../core/TournamentCore.sol\";\nimport {TournamentLifecycle} from \"./../../../../core/libraries/lifecycle/Lifecycle.sol\";\nimport {TournamentPlayerActions} from \"./../../../../core/libraries/player-actions/PlayerActions.sol\";\nimport {TournamentRegistry} from \"./../../../../infrastructure/registry/TournamentRegistry.sol\";\n\nlibrary TournamentHubStatus {\n    struct StatusUpdateResult {\n        TournamentCore.Status newStatus;\n        uint32 newActualStartTime;\n        uint32 newEndTime;\n        uint32 newExitWindowStart;\n        bool shouldEmitExitWindow;\n        bool shouldTransitionToEnded;\n    }\n\n    function applyDecayAndUpdateStatus(\n        mapping(address => TournamentCore.PlayerResources) storage players,\n        TournamentCore.Params storage params,\n        TournamentCore.Status currentStatus,\n        uint16 playerCount,\n        uint256 totalStaked,\n        uint256 totalForfeitPenalties,\n        uint256 endTime,\n        uint256 winnersLength,\n        TournamentRegistry registry,\n        address sender\n    ) external returns (StatusUpdateResult memory result) {\n        // Apply decay first\n        TournamentPlayerActions.applyDecay(\n            players[sender],\n            sender,\n            params.decayAmount,\n            params.gameInterval\n        );\n\n        // Check and transition status\n        (\n            result.newStatus,\n            result.newActualStartTime,\n            result.newEndTime,\n            result.newExitWindowStart\n        ) = TournamentLifecycle.checkAndTransition(\n            currentStatus,\n            params,\n            playerCount,\n            totalStaked,\n            registry\n        );\n\n        result.shouldEmitExitWindow = result.newExitWindowStart > 0;\n\n        // Check if should transition to ended\n        if (\n            result.newStatus == TournamentCore.Status.Active &&\n            block.timestamp >= endTime\n        ) {\n            TournamentLifecycle.transitionToEnded(\n                registry,\n                totalStaked,\n                totalForfeitPenalties,\n                winnersLength\n            );\n            result.newStatus = TournamentCore.Status.Ended;\n            result.shouldTransitionToEnded = true;\n        }\n    }\n\n    function updateStatusOnly(\n        TournamentCore.Params storage params,\n        TournamentCore.Status currentStatus,\n        uint16 playerCount,\n        uint256 totalStaked,\n        uint256 totalForfeitPenalties,\n        uint256 endTime,\n        uint256 winnersLength,\n        TournamentRegistry registry\n    ) external returns (StatusUpdateResult memory result) {\n        (\n            result.newStatus,\n            result.newActualStartTime,\n            result.newEndTime,\n            result.newExitWindowStart\n        ) = TournamentLifecycle.checkAndTransition(\n            currentStatus,\n            params,\n            playerCount,\n            totalStaked,\n            registry\n        );\n\n        result.shouldEmitExitWindow = result.newExitWindowStart > 0;\n\n        if (\n            result.newStatus == TournamentCore.Status.Active &&\n            block.timestamp >= endTime\n        ) {\n            TournamentLifecycle.transitionToEnded(\n                registry,\n                totalStaked,\n                totalForfeitPenalties,\n                winnersLength\n            );\n            result.newStatus = TournamentCore.Status.Ended;\n            result.shouldTransitionToEnded = true;\n        }\n    }\n\n    function checkEarlyEnd(\n        uint16 activePlayerCount,\n        uint256 totalStaked,\n        uint256 totalForfeitPenalties,\n        uint256 winnersLength,\n        TournamentRegistry registry\n    ) external returns (bool shouldEnd) {\n        if (activePlayerCount == 0) {\n            TournamentLifecycle.transitionToEnded(\n                registry,\n                totalStaked,\n                totalForfeitPenalties,\n                winnersLength\n            );\n            return true;\n        }\n        return false;\n    }\n}\n"
      },
      "project/contracts/tournament/modules/hub/TournamentHub.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {Initializable} from \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport {TournamentCore} from \"./../../core/TournamentCore.sol\";\nimport {TournamentLifecycle} from \"./../../core/libraries/lifecycle/Lifecycle.sol\";\nimport {TournamentViews} from \"./../../core/libraries/views/Views.sol\";\nimport {TournamentRefund} from \"./../../core/libraries/refund/Refund.sol\";\nimport {TournamentHubPrize} from \"./libraries/prize/Prize.sol\";\nimport {TournamentHubPlayer} from \"./libraries/player/Player.sol\";\nimport {TournamentHubStatus} from \"./libraries/status/Status.sol\";\nimport {TournamentTokenWhitelist} from \"./../../infrastructure/token-whitelist/TournamentTokenWhitelist.sol\";\nimport {TournamentRegistry} from \"./../../infrastructure/registry/TournamentRegistry.sol\";\n\ncontract TournamentHub is Initializable {\n    address public admin;\n    bool public emergencyCancelled;\n    TournamentCore.Status public status;\n    uint16 public playerCount;\n    uint16 public activePlayerCount;\n    bool public creatorFeesCollected;\n\n    address public creator;\n    uint32 public actualStartTime;\n    uint32 public endTime;\n    uint32 public exitWindowStart;\n\n    address public combat;\n    address public mysteryDeck;\n    address public trading;\n    address public randomizer;\n\n    uint256 public totalStaked;\n    uint256 public totalForfeitPenalties;\n\n    mapping(address => bool) private _hasModuleRole;\n    mapping(address => TournamentCore.PlayerResources) internal players;\n\n    address[] public winners;\n\n    TournamentTokenWhitelist public tokenWhitelist;\n    TournamentCore.Params internal params;\n    TournamentRegistry public registry;\n\n    event ExitWindowOpened(uint32 windowStart, uint32 windowEnd);\n    event PlayerResourcesUpdated(\n        address indexed player,\n        address indexed module\n    );\n    event EmergencyCancellation(address indexed admin, uint32 calledAtTime);\n    event RandomnessFailure(uint32 timestamp);\n\n    error EmergencyCancelled();\n    error OnlyPlatformAdmin();\n    error NotFound();\n    error CannotRefundAfterStart();\n    error AlreadyClaimed();\n    error InvalidStatus();\n    error InvalidAddress();\n    error UnauthorizedRandomizer();\n    error UnauthorizedHub();\n    error AlreadyCancelled();\n    error AlreadyEnded();\n\n    modifier notEmergencyCancelled() {\n        if (emergencyCancelled) revert EmergencyCancelled();\n        _;\n    }\n\n    modifier onlyPlayer() {\n        if (!players[msg.sender].exists) revert NotFound();\n        _;\n    }\n\n    function initialize(\n        TournamentCore.Params calldata _p,\n        address _creator,\n        address _combat,\n        address _deck,\n        address _trading,\n        address _rand,\n        address _registry,\n        address _tokens,\n        address _admin\n    ) external initializer {\n        if (\n            _combat == address(0) ||\n            _deck == address(0) ||\n            _trading == address(0) ||\n            _rand == address(0)\n        ) revert InvalidAddress();\n\n        combat = _combat;\n        mysteryDeck = _deck;\n        trading = _trading;\n        randomizer = _rand;\n\n        _hasModuleRole[_combat] = true;\n        _hasModuleRole[_deck] = true;\n        _hasModuleRole[_trading] = true;\n\n        params = _p;\n        creator = _creator;\n        tokenWhitelist = TournamentTokenWhitelist(_tokens);\n        registry = TournamentRegistry(_registry);\n        status = TournamentCore.Status.Open;\n        admin = _admin;\n    }\n\n    function updatePlayerResources(\n        address p,\n        TournamentCore.PlayerResources calldata resources\n    ) external {\n        if (!_hasModuleRole[msg.sender]) revert UnauthorizedHub();\n        players[p] = resources;\n        emit PlayerResourcesUpdated(p, msg.sender);\n    }\n\n    function emergencyCancel() external {\n        if (msg.sender != admin) revert OnlyPlatformAdmin();\n        if (status == TournamentCore.Status.Ended) revert AlreadyEnded();\n        if (emergencyCancelled) revert AlreadyCancelled();\n\n        emergencyCancelled = true;\n        status = TournamentCore.Status.Cancelled;\n        TournamentLifecycle.emergencyCancel(registry, admin);\n        emit EmergencyCancellation(admin, uint32(block.timestamp));\n    }\n\n    function handleFailedRandomness() external {\n        if (msg.sender != randomizer) revert UnauthorizedRandomizer();\n        if (\n            status != TournamentCore.Status.Open &&\n            status != TournamentCore.Status.Locked\n        ) revert InvalidStatus();\n\n        status = TournamentCore.Status.Cancelled;\n        TournamentLifecycle.emergencyCancel(registry, randomizer);\n        emit RandomnessFailure(uint32(block.timestamp));\n    }\n\n    function joinTournament(uint256 stake) external notEmergencyCancelled {\n        TournamentHubPlayer.JoinResult memory r = TournamentHubPlayer\n            .processJoin(\n                players,\n                params,\n                status,\n                playerCount,\n                totalStaked,\n                registry,\n                msg.sender,\n                stake\n            );\n\n        unchecked {\n            playerCount++;\n            activePlayerCount++;\n        }\n        totalStaked += stake;\n\n        status = r.newStatus;\n        if (r.newActualStartTime > 0) actualStartTime = r.newActualStartTime;\n        if (r.newEndTime > 0) endTime = r.newEndTime;\n        if (r.newExitWindowStart > 0) {\n            exitWindowStart = r.newExitWindowStart;\n            emit ExitWindowOpened(exitWindowStart, endTime);\n        }\n    }\n\n    function exit() external onlyPlayer notEmergencyCancelled {\n        if (status != TournamentCore.Status.Active) revert InvalidStatus();\n\n        TournamentHubStatus.StatusUpdateResult memory r = TournamentHubStatus\n            .applyDecayAndUpdateStatus(\n                players,\n                params,\n                status,\n                playerCount,\n                totalStaked,\n                totalForfeitPenalties,\n                endTime,\n                winners.length,\n                registry,\n                msg.sender\n            );\n\n        _applyStatusUpdate(r);\n\n        TournamentHubPlayer.processExit(\n            players,\n            winners,\n            status,\n            exitWindowStart,\n            msg.sender,\n            TournamentViews.canExitFromStorage(\n                players,\n                params,\n                status,\n                actualStartTime,\n                msg.sender\n            )\n        );\n\n        unchecked {\n            activePlayerCount--;\n        }\n\n        if (\n            TournamentHubStatus.checkEarlyEnd(\n                activePlayerCount,\n                totalStaked,\n                totalForfeitPenalties,\n                winners.length,\n                registry\n            )\n        ) {\n            status = TournamentCore.Status.Ended;\n        }\n    }\n\n    function forfeit() external onlyPlayer {\n        if (status != TournamentCore.Status.Active) revert InvalidStatus();\n\n        TournamentHubStatus.StatusUpdateResult memory r = TournamentHubStatus\n            .applyDecayAndUpdateStatus(\n                players,\n                params,\n                status,\n                playerCount,\n                totalStaked,\n                totalForfeitPenalties,\n                endTime,\n                winners.length,\n                registry,\n                msg.sender\n            );\n\n        _applyStatusUpdate(r);\n\n        uint256 penalty = TournamentViews.calculateForfeitPenaltyFromStorage(\n            players,\n            params,\n            endTime,\n            msg.sender\n        );\n\n        TournamentHubPlayer.processForfeit(\n            players,\n            params,\n            status,\n            msg.sender,\n            penalty\n        );\n\n        unchecked {\n            activePlayerCount--;\n        }\n        totalForfeitPenalties += penalty;\n\n        if (\n            TournamentHubStatus.checkEarlyEnd(\n                activePlayerCount,\n                totalStaked,\n                totalForfeitPenalties,\n                winners.length,\n                registry\n            )\n        ) {\n            status = TournamentCore.Status.Ended;\n        }\n    }\n\n    function claimPrize() external onlyPlayer {\n        TournamentHubStatus.StatusUpdateResult memory r = TournamentHubStatus\n            .updateStatusOnly(\n                params,\n                status,\n                playerCount,\n                totalStaked,\n                totalForfeitPenalties,\n                endTime,\n                winners.length,\n                registry\n            );\n\n        _applyStatusUpdate(r);\n\n        TournamentHubPrize.claimPrize(\n            players,\n            params,\n            status,\n            totalStaked,\n            totalForfeitPenalties,\n            winners.length,\n            msg.sender\n        );\n    }\n\n    function claimRefund() external onlyPlayer {\n        TournamentCore.Status s = status;\n\n        if (\n            s == TournamentCore.Status.Active ||\n            s == TournamentCore.Status.Ended\n        ) revert CannotRefundAfterStart();\n\n        TournamentCore.PlayerResources storage p = players[msg.sender];\n        if (p.status == TournamentCore.PlayerStatus.Refunded)\n            revert AlreadyClaimed();\n\n        (\n            bool shouldDec,\n            uint16 newPC,\n            uint256 newTS,\n            TournamentCore.Status newS\n        ) = TournamentRefund.processRefund(\n                p,\n                TournamentRefund.RefundContext({\n                    stakeToken: params.stakeToken,\n                    status: s,\n                    maxPlayers: params.maxPlayers,\n                    startPlayerCount: params.startPlayerCount,\n                    startPoolAmount: params.startPoolAmount\n                }),\n                registry,\n                msg.sender,\n                playerCount,\n                totalStaked\n            );\n\n        if (shouldDec) {\n            unchecked {\n                playerCount = newPC;\n                totalStaked = newTS;\n            }\n        }\n\n        if (newS != s) status = newS;\n    }\n\n    function collectCreatorFees() external {\n        TournamentHubStatus.StatusUpdateResult memory r = TournamentHubStatus\n            .updateStatusOnly(\n                params,\n                status,\n                playerCount,\n                totalStaked,\n                totalForfeitPenalties,\n                endTime,\n                winners.length,\n                registry\n            );\n\n        _applyStatusUpdate(r);\n\n        if (creatorFeesCollected) revert AlreadyClaimed();\n\n        creatorFeesCollected = TournamentHubPrize.collectCreatorFees(\n            params,\n            status,\n            totalStaked,\n            totalForfeitPenalties,\n            creator,\n            msg.sender\n        );\n    }\n\n    function updateStatus() external {\n        TournamentHubStatus.StatusUpdateResult memory r = TournamentHubStatus\n            .updateStatusOnly(\n                params,\n                status,\n                playerCount,\n                totalStaked,\n                totalForfeitPenalties,\n                endTime,\n                winners.length,\n                registry\n            );\n\n        _applyStatusUpdate(r);\n    }\n\n    function _applyStatusUpdate(\n        TournamentHubStatus.StatusUpdateResult memory r\n    ) private {\n        status = r.newStatus;\n        if (r.newActualStartTime > 0) actualStartTime = r.newActualStartTime;\n        if (r.newEndTime > 0) endTime = r.newEndTime;\n        if (r.shouldEmitExitWindow) {\n            exitWindowStart = r.newExitWindowStart;\n            emit ExitWindowOpened(exitWindowStart, endTime);\n        }\n    }\n\n    function getCurrentCoins(address p) public view returns (uint256) {\n        return TournamentViews.getCurrentCoinsFromStorage(players, params, p);\n    }\n\n    function calculateExitCost(address p) public view returns (uint256) {\n        return\n            TournamentViews.calculateExitCostFromStorage(\n                players,\n                params,\n                status,\n                actualStartTime,\n                p\n            );\n    }\n\n    function canExit(address p) public view returns (bool) {\n        return\n            TournamentViews.canExitFromStorage(\n                players,\n                params,\n                status,\n                actualStartTime,\n                p\n            );\n    }\n\n    function calculateForfeitPenalty(address p) public view returns (uint256) {\n        return\n            TournamentViews.calculateForfeitPenaltyFromStorage(\n                players,\n                params,\n                endTime,\n                p\n            );\n    }\n\n    function getCurrentPlayerResources(\n        address p\n    ) external view returns (TournamentCore.PlayerResources memory) {\n        return\n            TournamentViews.getCurrentPlayerResourcesFromStorage(\n                players,\n                params,\n                p\n            );\n    }\n\n    function getPlayer(\n        address p\n    ) external view returns (TournamentCore.PlayerResources memory) {\n        return TournamentViews.getPlayerFromStorage(players, p);\n    }\n\n    function getParams() external view returns (TournamentCore.Params memory) {\n        return params;\n    }\n\n    function getExitWindow()\n        external\n        view\n        returns (uint32 windowStart, uint32 windowEnd, bool isOpen)\n    {\n        return TournamentViews.getExitWindow(exitWindowStart, endTime);\n    }\n\n    function hasModuleRole(address m) external view returns (bool) {\n        return _hasModuleRole[m];\n    }\n}\n"
      },
      "project/contracts/tournament/modules/mystery-deck/TournamentMysteryDeck.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {Initializable} from \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport {TournamentCore} from \"./../../core/TournamentCore.sol\";\nimport {TournamentDeckCatalog} from \"./../../infrastructure/deck-catalog/TournamentDeckCatalog.sol\";\n\ninterface ITournamentHub {\n    function getPlayer(\n        address player\n    ) external view returns (TournamentCore.PlayerResources memory);\n    function getCurrentPlayerResources(\n        address player\n    ) external view returns (TournamentCore.PlayerResources memory);\n    function updatePlayerResources(\n        address player,\n        TournamentCore.PlayerResources calldata resources\n    ) external;\n    function status() external view returns (TournamentCore.Status);\n}\n\ncontract TournamentMysteryDeck is Initializable {\n    address public hub;\n    uint32 public drawCount;\n    uint32 public shuffleCount;\n    uint32 public lastShuffleTime;\n\n    address public catalog;\n    bool public initialized;\n    address public gameOracle;\n\n    uint256 public initialSize;\n    uint256 public cardsRemaining;\n\n    uint256 public drawCost;\n    uint256 public shuffleCost;\n    uint256 public peekCost;\n\n    uint256 public currentShuffleSeed;\n    bytes32 public backendSecretHash;\n\n    uint8[] public excludedCardIds;\n\n    uint8 public constant MAX_EXCLUDED_CARDS = 50;\n    uint8 public constant MAX_PEEK_CARDS = 5;\n    uint256 public constant ADD_REMOVE_COST_MULTIPLIER = 105;\n\n    event DeckInitialized(\n        uint256 indexed deckSize,\n        uint64 indexed sequenceNumber,\n        uint32 timestamp\n    );\n    event CardDrawn(\n        address indexed player,\n        uint256 costPaid,\n        uint256 newDrawCount,\n        uint256 cardsRemaining,\n        uint32 timestamp\n    );\n    event DeckShuffled(\n        address indexed player,\n        uint256 costPaid,\n        uint256 newShuffleCount,\n        uint32 timestamp\n    );\n    event CardsPeeked(\n        address indexed player,\n        uint8 cardCount,\n        uint256 costPaid,\n        uint32 timestamp\n    );\n    event CardsAdded(\n        address indexed player,\n        uint8 cardCount,\n        uint256 costPaid,\n        uint256 newCardsRemaining,\n        uint32 timestamp\n    );\n    event CardsRemoved(\n        address indexed player,\n        uint8 cardCount,\n        uint256 costPaid,\n        uint256 newCardsRemaining,\n        uint32 timestamp\n    );\n    event ShuffleSeedUpdated(\n        uint256 indexed newSeed,\n        bytes32 backendSecretHash,\n        uint32 timestamp\n    );\n\n    error InvalidAddress();\n    error InvalidCost();\n    error TooManyExcludedCards();\n    error DeckAlreadyInitialized();\n    error DeckNotInitialized();\n    error InsufficientCoins();\n    error NotEnoughCardsRemaining();\n    error InvalidPeekCount();\n    error OnlyHub();\n    error OnlyGameOracle();\n    error PlayerNotFound();\n    error PlayerNotActive();\n    error PlayerInCombat();\n    error InvalidCount();\n    error TournamentNotActive();\n    error ResourceOverflow();\n\n    modifier onlyHub() {\n        if (msg.sender != hub) revert OnlyHub();\n        _;\n    }\n\n    modifier onlyGameOracle() {\n        if (msg.sender != gameOracle) revert OnlyGameOracle();\n        _;\n    }\n\n    modifier deckInitialized() {\n        if (!initialized) revert DeckNotInitialized();\n        _;\n    }\n\n    modifier tournamentActive() {\n        if (ITournamentHub(hub).status() != TournamentCore.Status.Active)\n            revert TournamentNotActive();\n        _;\n    }\n\n    modifier onlyActivePlayer() {\n        TournamentCore.PlayerResources memory player = ITournamentHub(hub)\n            .getPlayer(msg.sender);\n        if (!player.exists) revert PlayerNotFound();\n        if (player.status != TournamentCore.PlayerStatus.Active)\n            revert PlayerNotActive();\n        if (player.inCombat) revert PlayerInCombat();\n        _;\n    }\n\n    function initialize(\n        address _hub,\n        address _catalog,\n        uint8[] calldata _excludedCards,\n        uint256 _drawCost,\n        uint256 _shuffleCost,\n        uint256 _peekCost,\n        address _gameOracle\n    ) external initializer {\n        if (\n            _hub == address(0) ||\n            _catalog == address(0) ||\n            _gameOracle == address(0)\n        ) {\n            revert InvalidAddress();\n        }\n\n        if (_drawCost == 0 || _shuffleCost == 0 || _peekCost == 0) {\n            revert InvalidCost();\n        }\n\n        if (_excludedCards.length > MAX_EXCLUDED_CARDS) {\n            revert TooManyExcludedCards();\n        }\n\n        hub = _hub;\n        catalog = _catalog;\n        gameOracle = _gameOracle;\n\n        drawCost = _drawCost;\n        shuffleCost = _shuffleCost;\n        peekCost = _peekCost;\n\n        excludedCardIds = _excludedCards;\n    }\n\n    function initializeDeck() external onlyHub {\n        if (initialized) revert DeckAlreadyInitialized();\n\n        uint8[] memory allCardIds = TournamentDeckCatalog(catalog)\n            .getAllCardIds();\n        uint256 deckSize = _calculateDeckSize(allCardIds) * 50;\n\n        uint64 sequenceNumber = uint64(block.number);\n\n        initialSize = deckSize;\n        cardsRemaining = deckSize;\n        lastShuffleTime = uint32(block.timestamp);\n        initialized = true;\n\n        emit DeckInitialized(deckSize, sequenceNumber, uint32(block.timestamp));\n    }\n\n    function drawCard()\n        external\n        deckInitialized\n        tournamentActive\n        onlyActivePlayer\n    {\n        if (cardsRemaining == 0) revert NotEnoughCardsRemaining();\n\n        address hubCache = hub;\n        TournamentCore.PlayerResources memory player = ITournamentHub(hubCache)\n            .getCurrentPlayerResources(msg.sender);\n\n        if (player.coins < drawCost) revert InsufficientCoins();\n\n        unchecked {\n            player.coins -= drawCost;\n            cardsRemaining--;\n            drawCount++;\n        }\n\n        ITournamentHub(hubCache).updatePlayerResources(msg.sender, player);\n        emit CardDrawn(\n            msg.sender,\n            drawCost,\n            drawCount,\n            cardsRemaining,\n            uint32(block.timestamp)\n        );\n    }\n\n    function shuffleDeck()\n        external\n        deckInitialized\n        tournamentActive\n        onlyActivePlayer\n    {\n        if (cardsRemaining == 0) revert NotEnoughCardsRemaining();\n\n        address hubCache = hub;\n        uint256 costCache = shuffleCost;\n\n        TournamentCore.PlayerResources memory player = ITournamentHub(hubCache)\n            .getCurrentPlayerResources(msg.sender);\n\n        if (player.coins < costCache) revert InsufficientCoins();\n\n        uint32 timestamp = uint32(block.timestamp);\n        unchecked {\n            player.coins -= costCache;\n            shuffleCount++;\n        }\n        lastShuffleTime = timestamp;\n\n        ITournamentHub(hubCache).updatePlayerResources(msg.sender, player);\n        emit DeckShuffled(msg.sender, costCache, shuffleCount, timestamp);\n    }\n\n    function peekCards(\n        uint8 count\n    ) external deckInitialized tournamentActive onlyActivePlayer {\n        if (count == 0 || count > MAX_PEEK_CARDS) revert InvalidPeekCount();\n        if (cardsRemaining < count) revert NotEnoughCardsRemaining();\n\n        address hubCache = hub;\n        uint256 totalCost = peekCost * count;\n\n        TournamentCore.PlayerResources memory player = ITournamentHub(hubCache)\n            .getCurrentPlayerResources(msg.sender);\n\n        if (player.coins < totalCost) revert InsufficientCoins();\n\n        unchecked {\n            player.coins -= totalCost;\n        }\n\n        ITournamentHub(hubCache).updatePlayerResources(msg.sender, player);\n        emit CardsPeeked(msg.sender, count, totalCost, uint32(block.timestamp));\n    }\n\n    function addCards(\n        uint8 count\n    ) external deckInitialized tournamentActive onlyActivePlayer {\n        if (count == 0) revert InvalidCount();\n        if (cardsRemaining + count < cardsRemaining) revert ResourceOverflow();\n\n        address hubCache = hub;\n        uint256 totalCost = (drawCost * ADD_REMOVE_COST_MULTIPLIER * count) /\n            100;\n\n        TournamentCore.PlayerResources memory player = ITournamentHub(hubCache)\n            .getCurrentPlayerResources(msg.sender);\n\n        if (player.coins < totalCost) revert InsufficientCoins();\n\n        uint32 timestamp = uint32(block.timestamp);\n        unchecked {\n            player.coins -= totalCost;\n            cardsRemaining += count;\n        }\n\n        ITournamentHub(hubCache).updatePlayerResources(msg.sender, player);\n        emit CardsAdded(\n            msg.sender,\n            count,\n            totalCost,\n            cardsRemaining,\n            timestamp\n        );\n    }\n\n    function removeCards(\n        uint8 count\n    ) external deckInitialized tournamentActive onlyActivePlayer {\n        if (count == 0) revert InvalidCount();\n        if (cardsRemaining < count) revert NotEnoughCardsRemaining();\n\n        address hubCache = hub;\n        uint256 totalCost = (drawCost * ADD_REMOVE_COST_MULTIPLIER * count) /\n            100;\n\n        TournamentCore.PlayerResources memory player = ITournamentHub(hubCache)\n            .getCurrentPlayerResources(msg.sender);\n\n        if (player.coins < totalCost) revert InsufficientCoins();\n\n        unchecked {\n            player.coins -= totalCost;\n            cardsRemaining -= count;\n        }\n\n        ITournamentHub(hubCache).updatePlayerResources(msg.sender, player);\n        emit CardsRemoved(\n            msg.sender,\n            count,\n            totalCost,\n            cardsRemaining,\n            uint32(block.timestamp)\n        );\n    }\n\n    function updateShuffleSeed(\n        uint256 seed,\n        bytes32 secretHash\n    ) external onlyGameOracle {\n        currentShuffleSeed = seed;\n        backendSecretHash = secretHash;\n\n        emit ShuffleSeedUpdated(seed, secretHash, uint32(block.timestamp));\n    }\n\n    function _calculateDeckSize(\n        uint8[] memory allCardIds\n    ) internal view returns (uint256 size) {\n        uint256 totalCards = allCardIds.length;\n        uint256 excludedCount = excludedCardIds.length;\n\n        if (excludedCount == 0) {\n            return totalCards;\n        }\n\n        for (uint256 i = 0; i < totalCards; ) {\n            bool isExcluded = false;\n\n            for (uint256 j = 0; j < excludedCount; ) {\n                if (allCardIds[i] == excludedCardIds[j]) {\n                    isExcluded = true;\n                    break;\n                }\n                unchecked {\n                    j++;\n                }\n            }\n\n            if (!isExcluded) {\n                unchecked {\n                    size++;\n                }\n            }\n\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    function getDeckState()\n        external\n        view\n        returns (\n            uint256 _initialSize,\n            uint256 _cardsRemaining,\n            uint32 _drawCount,\n            uint32 _shuffleCount\n        )\n    {\n        return (initialSize, cardsRemaining, drawCount, shuffleCount);\n    }\n\n    function calculateAddRemoveCost(\n        uint8 count\n    ) external view returns (uint256 cost) {\n        return (drawCost * ADD_REMOVE_COST_MULTIPLIER * count) / 100;\n    }\n}\n"
      },
      "project/contracts/tournament/modules/randomizer/TournamentRandomizer.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {Initializable} from \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport {IEntropyConsumer} from \"@pythnetwork/entropy-sdk-solidity/IEntropyConsumer.sol\";\nimport {IEntropy} from \"@pythnetwork/entropy-sdk-solidity/IEntropy.sol\";\n\ncontract TournamentRandomizer is Initializable, IEntropyConsumer {\n    address public hub;\n    address public mysteryDeck;\n    address public platformAdmin;\n    IEntropy public entropy;\n    address public entropyProvider;\n\n    uint256 public seedCount;\n    bytes32 public revealedCompleteSeed;\n    bytes32 public revealedBackendSecret;\n    bool public isRevealed;\n\n    mapping(address => bool) public hasOracleRole;\n    mapping(uint64 => SeedRequest) public seedRequests;\n\n    struct SeedRequest {\n        address requester;\n        uint32 timestamp;\n        bool fulfilled;\n        bool cancelled;\n    }\n\n    uint32 public constant SEED_REQUEST_TIMEOUT = 3600;\n\n    event SeedRequested(\n        uint64 indexed sequenceNumber,\n        address indexed requester,\n        uint256 seedIndex,\n        uint32 timestamp\n    );\n\n    event SeedGenerated(\n        uint64 indexed sequenceNumber,\n        uint256 seedIndex,\n        bytes32 indexed seed,\n        uint32 timestamp\n    );\n\n    event CompleteSeedRevealed(\n        bytes32 completeSeed,\n        bytes32 backendSecret,\n        uint32 timestamp\n    );\n\n    event SeedRequestCancelled(uint64 indexed sequenceNumber, uint32 timestamp);\n\n    event OracleRoleGranted(address indexed oracle);\n    event OracleRoleRevoked(address indexed oracle);\n    event MysteryDeckSet(address indexed mysteryDeck);\n\n    error InvalidAddress();\n    error RandomizerUnauthorized();\n    error RandomizerOnlyPlatformAdmin();\n    error RandomizerOnlyOracle();\n    error RandomizerOnlyHub();\n    error RandomizerMysteryDeckAlreadySet();\n\n    error TournamentNotEnded();\n    error AlreadyRevealed();\n    error RequestNotFound();\n    error RequestAlreadyFulfilled();\n    error RequestAlreadyCancelled();\n    error TimeoutNotReached();\n    error InsufficientFee();\n\n    modifier onlyPlatformAdmin() {\n        if (msg.sender != platformAdmin) revert RandomizerOnlyPlatformAdmin();\n        _;\n    }\n\n    modifier onlyOracle() {\n        if (!hasOracleRole[msg.sender]) revert RandomizerOnlyOracle();\n        _;\n    }\n\n    modifier onlyAuthorizedCaller() {\n        if (msg.sender != hub && msg.sender != mysteryDeck) {\n            revert RandomizerUnauthorized();\n        }\n        _;\n    }\n\n    function initialize(\n        address _hub,\n        address _pythEntropy,\n        address _entropyProvider,\n        address _admin,\n        address _oracle\n    ) external initializer {\n        if (\n            _hub == address(0) ||\n            _pythEntropy == address(0) ||\n            _entropyProvider == address(0)\n        ) {\n            revert InvalidAddress();\n        }\n\n        hub = _hub;\n        entropy = IEntropy(_pythEntropy);\n        entropyProvider = _entropyProvider;\n        platformAdmin = _admin == address(0) ? msg.sender : _admin;\n\n        if (_oracle != address(0)) {\n            hasOracleRole[_oracle] = true;\n            emit OracleRoleGranted(_oracle);\n        }\n    }\n\n    function setMysteryDeck(address _mysteryDeck) external {\n        if (_mysteryDeck == address(0)) revert InvalidAddress();\n        if (mysteryDeck != address(0)) revert RandomizerMysteryDeckAlreadySet();\n\n        mysteryDeck = _mysteryDeck;\n        emit MysteryDeckSet(_mysteryDeck);\n    }\n\n    function requestSeed(\n        address requester\n    ) external payable onlyAuthorizedCaller returns (uint64 sequenceNumber) {\n        uint256 fee = entropy.getFee(entropyProvider);\n        if (msg.value < fee) revert InsufficientFee();\n\n        bytes32 userRandomNumber = keccak256(\n            abi.encodePacked(\n                block.timestamp,\n                block.prevrandao,\n                requester,\n                seedCount\n            )\n        );\n\n        sequenceNumber = entropy.request{value: fee}(\n            entropyProvider,\n            userRandomNumber,\n            true\n        );\n\n        seedRequests[sequenceNumber] = SeedRequest({\n            requester: requester,\n            timestamp: uint32(block.timestamp),\n            fulfilled: false,\n            cancelled: false\n        });\n\n        emit SeedRequested(\n            sequenceNumber,\n            requester,\n            seedCount,\n            uint32(block.timestamp)\n        );\n\n        return sequenceNumber;\n    }\n\n    function entropyCallback(\n        uint64 sequenceNumber,\n        address,\n        bytes32 randomNumber\n    ) internal override {\n        SeedRequest storage request = seedRequests[sequenceNumber];\n\n        if (request.timestamp == 0) return;\n        if (request.fulfilled || request.cancelled) return;\n\n        request.fulfilled = true;\n\n        unchecked {\n            seedCount++;\n        }\n\n        emit SeedGenerated(\n            sequenceNumber,\n            seedCount - 1,\n            randomNumber,\n            uint32(block.timestamp)\n        );\n    }\n\n    function cancelFailedSeedRequest(uint64 sequenceNumber) external {\n        SeedRequest storage request = seedRequests[sequenceNumber];\n\n        if (request.timestamp == 0) revert RequestNotFound();\n        if (request.fulfilled) revert RequestAlreadyFulfilled();\n        if (request.cancelled) revert RequestAlreadyCancelled();\n        if (block.timestamp < request.timestamp + SEED_REQUEST_TIMEOUT) {\n            revert TimeoutNotReached();\n        }\n\n        request.cancelled = true;\n\n        if (seedCount == 0) {\n            ITournamentHub(hub).handleFailedRandomness();\n        }\n\n        emit SeedRequestCancelled(sequenceNumber, uint32(block.timestamp));\n    }\n\n    function revealCompleteSeed(\n        bytes32 seed,\n        bytes32 secret\n    ) external onlyOracle {\n        if (isRevealed) revert AlreadyRevealed();\n\n        (bool success, bytes memory data) = hub.staticcall(\n            abi.encodeWithSignature(\"status()\")\n        );\n        if (!success) revert TournamentNotEnded();\n\n        uint8 status = abi.decode(data, (uint8));\n        if (status != 4) revert TournamentNotEnded();\n\n        (success, data) = hub.staticcall(abi.encodeWithSignature(\"endTime()\"));\n        if (!success) revert TournamentNotEnded();\n\n        uint32 endTime = abi.decode(data, (uint32));\n        if (block.timestamp < endTime) revert TournamentNotEnded();\n\n        isRevealed = true;\n        revealedCompleteSeed = seed;\n        revealedBackendSecret = secret;\n\n        emit CompleteSeedRevealed(seed, secret, uint32(block.timestamp));\n    }\n\n    function grantOracleRole(address o) external onlyPlatformAdmin {\n        if (o == address(0)) revert InvalidAddress();\n        hasOracleRole[o] = true;\n        emit OracleRoleGranted(o);\n    }\n\n    function revokeOracleRole(address o) external onlyPlatformAdmin {\n        hasOracleRole[o] = false;\n        emit OracleRoleRevoked(o);\n    }\n\n    function getFee() external view returns (uint256) {\n        return entropy.getFee(entropyProvider);\n    }\n\n    function getSeedCount() external view returns (uint256) {\n        return seedCount;\n    }\n\n    function getSeedRequest(\n        uint64 sequenceNumber\n    ) external view returns (SeedRequest memory) {\n        return seedRequests[sequenceNumber];\n    }\n\n    function getEntropy() internal view override returns (address) {\n        return address(entropy);\n    }\n}\n\ninterface ITournamentHub {\n    function handleFailedRandomness() external;\n    function status() external view returns (uint8);\n    function endTime() external view returns (uint32);\n}\n"
      },
      "project/contracts/tournament/modules/trading/TournamentTrading.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {Initializable} from \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport {TournamentCore} from \"./../../core/TournamentCore.sol\";\n\ninterface ITournamentHub {\n    function getPlayer(\n        address player\n    ) external view returns (TournamentCore.PlayerResources memory);\n    function updatePlayerResources(\n        address player,\n        TournamentCore.PlayerResources calldata resources\n    ) external;\n    function getParams() external view returns (TournamentCore.Params memory);\n    function status() external view returns (TournamentCore.Status);\n}\n\ncontract TournamentTrading is Initializable {\n    address public hub;\n    address public gameOracle;\n\n    uint256 public nextOfferId;\n    uint256 public totalTradesExecuted;\n\n    enum OfferStatus {\n        Open,\n        Cancelled,\n        Executed\n    }\n\n    struct ResourceBundle {\n        uint8 lives;\n        uint256 coins;\n        uint8 rockCards;\n        uint8 paperCards;\n        uint8 scissorsCards;\n    }\n\n    struct TradeOffer {\n        address creator;\n        uint32 expiresAt;\n        OfferStatus status;\n        bool exists;\n        ResourceBundle offered;\n        ResourceBundle requested;\n    }\n\n    mapping(uint256 => TradeOffer) public offers;\n    mapping(address => uint256[]) private playerOffers;\n\n    event OfferCreated(\n        uint256 indexed offerId,\n        address indexed creator,\n        ResourceBundle offered,\n        ResourceBundle requested,\n        uint32 expiresAt,\n        uint32 createdAt\n    );\n\n    event OfferCancelled(\n        uint256 indexed offerId,\n        address indexed creator,\n        uint32 timestamp\n    );\n\n    event TradeExecuted(\n        uint256 indexed offerId,\n        address indexed creator,\n        address indexed acceptor,\n        uint8 creatorTotalCardsDelta,\n        uint8 acceptorTotalCardsDelta,\n        uint32 timestamp\n    );\n\n    error InvalidAddress();\n    error OnlyGameOracle();\n    error PlayerNotFound();\n    error PlayerNotActive();\n    error PlayerInCombat();\n    error OfferNotFound();\n    error OfferExpired();\n    error OfferNotActive();\n    error NotOfferCreator();\n    error InsufficientResources();\n    error ResourceOverflow();\n    error TournamentNotActive();\n    error InvalidCardDeltas();\n\n    modifier onlyGameOracle() {\n        if (msg.sender != gameOracle) revert OnlyGameOracle();\n        _;\n    }\n\n    modifier onlyActivePlayer() {\n        TournamentCore.PlayerResources memory player = ITournamentHub(hub)\n            .getPlayer(msg.sender);\n        if (!player.exists) revert PlayerNotFound();\n        if (player.status != TournamentCore.PlayerStatus.Active)\n            revert PlayerNotActive();\n        if (player.inCombat) revert PlayerInCombat();\n        _;\n    }\n\n    modifier tournamentActive() {\n        if (ITournamentHub(hub).status() != TournamentCore.Status.Active)\n            revert TournamentNotActive();\n        _;\n    }\n\n    function initialize(\n        address _hub,\n        address _gameOracle\n    ) external initializer {\n        if (_hub == address(0) || _gameOracle == address(0))\n            revert InvalidAddress();\n        hub = _hub;\n        gameOracle = _gameOracle;\n        nextOfferId = 1;\n    }\n\n    function createOffer(\n        ResourceBundle calldata offered,\n        ResourceBundle calldata requested\n    ) external onlyActivePlayer tournamentActive returns (uint256 offerId) {\n        TournamentCore.Params memory params = ITournamentHub(hub).getParams();\n        uint32 expiresAt = uint32(block.timestamp) + params.gameInterval;\n\n        offerId = nextOfferId;\n        unchecked {\n            nextOfferId++;\n        }\n\n        offers[offerId] = TradeOffer({\n            creator: msg.sender,\n            expiresAt: expiresAt,\n            status: OfferStatus.Open,\n            exists: true,\n            offered: offered,\n            requested: requested\n        });\n\n        playerOffers[msg.sender].push(offerId);\n\n        emit OfferCreated(\n            offerId,\n            msg.sender,\n            offered,\n            requested,\n            expiresAt,\n            uint32(block.timestamp)\n        );\n    }\n\n    function cancelOffer(\n        uint256 offerId\n    ) external onlyActivePlayer tournamentActive {\n        TradeOffer storage offer = offers[offerId];\n\n        if (!offer.exists) revert OfferNotFound();\n        if (offer.creator != msg.sender) revert NotOfferCreator();\n        if (offer.status != OfferStatus.Open) revert OfferNotActive();\n\n        offer.status = OfferStatus.Cancelled;\n\n        emit OfferCancelled(offerId, msg.sender, uint32(block.timestamp));\n    }\n\n    function executeTradeResolution(\n        uint256 offerId,\n        address acceptor,\n        uint8 creatorTotalCardsDelta,\n        uint8 acceptorTotalCardsDelta\n    ) external onlyGameOracle tournamentActive {\n        TradeOffer storage offer = offers[offerId];\n\n        if (!offer.exists) revert OfferNotFound();\n        if (offer.status != OfferStatus.Open) revert OfferNotActive();\n        if (block.timestamp >= offer.expiresAt) revert OfferExpired();\n\n        // Validate deltas match bundles\n        uint8 offeredTotal = offer.offered.rockCards +\n            offer.offered.paperCards +\n            offer.offered.scissorsCards;\n        uint8 requestedTotal = offer.requested.rockCards +\n            offer.requested.paperCards +\n            offer.requested.scissorsCards;\n\n        if (\n            creatorTotalCardsDelta != offeredTotal ||\n            acceptorTotalCardsDelta != requestedTotal\n        ) revert InvalidCardDeltas();\n\n        TournamentCore.PlayerResources memory creator = ITournamentHub(hub)\n            .getPlayer(offer.creator);\n        TournamentCore.PlayerResources memory acceptorData = ITournamentHub(hub)\n            .getPlayer(acceptor);\n\n        if (!creator.exists || !acceptorData.exists) revert PlayerNotFound();\n        if (\n            creator.status != TournamentCore.PlayerStatus.Active ||\n            acceptorData.status != TournamentCore.PlayerStatus.Active\n        ) revert PlayerNotActive();\n        if (creator.inCombat || acceptorData.inCombat) revert PlayerInCombat();\n\n        if (creator.lives < offer.offered.lives) revert InsufficientResources();\n        if (creator.coins < offer.offered.coins) revert InsufficientResources();\n        if (creator.totalCards < creatorTotalCardsDelta)\n            revert InsufficientResources();\n\n        if (acceptorData.lives < offer.requested.lives)\n            revert InsufficientResources();\n        if (acceptorData.coins < offer.requested.coins)\n            revert InsufficientResources();\n        if (acceptorData.totalCards < acceptorTotalCardsDelta)\n            revert InsufficientResources();\n\n        // Validate uint8 overflow on additions\n        if (\n            creator.totalCards -\n                creatorTotalCardsDelta +\n                acceptorTotalCardsDelta >\n            type(uint8).max\n        ) revert ResourceOverflow();\n        if (\n            acceptorData.totalCards -\n                acceptorTotalCardsDelta +\n                creatorTotalCardsDelta >\n            type(uint8).max\n        ) revert ResourceOverflow();\n\n        creator.lives = _sub(creator.lives, offer.offered.lives);\n        creator.coins -= offer.offered.coins;\n        creator.totalCards -= creatorTotalCardsDelta;\n\n        creator.lives = _add(creator.lives, offer.requested.lives);\n        creator.coins += offer.requested.coins;\n        creator.totalCards += acceptorTotalCardsDelta;\n\n        acceptorData.lives = _sub(acceptorData.lives, offer.requested.lives);\n        acceptorData.coins -= offer.requested.coins;\n        acceptorData.totalCards -= acceptorTotalCardsDelta;\n\n        acceptorData.lives = _add(acceptorData.lives, offer.offered.lives);\n        acceptorData.coins += offer.offered.coins;\n        acceptorData.totalCards += creatorTotalCardsDelta;\n\n        offer.status = OfferStatus.Executed;\n        unchecked {\n            totalTradesExecuted++;\n        }\n\n        ITournamentHub(hub).updatePlayerResources(offer.creator, creator);\n        ITournamentHub(hub).updatePlayerResources(acceptor, acceptorData);\n\n        emit TradeExecuted(\n            offerId,\n            offer.creator,\n            acceptor,\n            creatorTotalCardsDelta,\n            acceptorTotalCardsDelta,\n            uint32(block.timestamp)\n        );\n    }\n\n    function _sub(uint8 a, uint8 b) internal pure returns (uint8) {\n        return a >= b ? a - b : 0;\n    }\n\n    function _add(uint8 a, uint8 b) internal pure returns (uint8) {\n        uint256 result = uint256(a) + uint256(b);\n        if (result > type(uint8).max) revert ResourceOverflow();\n        return uint8(result);\n    }\n\n    function getOffer(\n        uint256 offerId\n    ) external view returns (TradeOffer memory) {\n        return offers[offerId];\n    }\n\n    function getOfferStatus(\n        uint256 offerId\n    ) external view returns (OfferStatus) {\n        if (!offers[offerId].exists) revert OfferNotFound();\n        return offers[offerId].status;\n    }\n\n    function getPlayerOffers(\n        address player\n    ) external view returns (uint256[] memory) {\n        return playerOffers[player];\n    }\n\n    function isOfferActive(uint256 offerId) external view returns (bool) {\n        TradeOffer memory offer = offers[offerId];\n        return\n            offer.exists &&\n            offer.status == OfferStatus.Open &&\n            block.timestamp < offer.expiresAt;\n    }\n}\n"
      }
    }
  }
}