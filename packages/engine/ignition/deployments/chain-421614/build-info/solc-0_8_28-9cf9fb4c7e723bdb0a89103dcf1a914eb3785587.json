{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-9cf9fb4c7e723bdb0a89103dcf1a914eb3785587",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/tournament/infrastructure/token-whitelist/TournamentTokenWhitelist.sol": "project/contracts/tournament/infrastructure/token-whitelist/TournamentTokenWhitelist.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ],
      "viaIR": true
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "project/contracts/tournament/infrastructure/token-whitelist/TournamentTokenWhitelist.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract TournamentTokenWhitelist is Ownable {\n    struct TokenInfo {\n        bool exists;\n        bool isPaused;\n        uint8 index;\n    }\n\n    uint8 public constant MAX_TOKENS = 255;\n\n    address[] private _tokens;\n    mapping(address => TokenInfo) private _tokenInfo;\n\n    event TokenWhitelisted(address indexed token);\n    event TokenPaused(address indexed token, string reason);\n    event TokenUnpaused(address indexed token);\n\n    error InvalidTokenAddress();\n    error AlreadyExists();\n    error NotFound();\n    error MaxTokensReached();\n\n    constructor() Ownable(msg.sender) {}\n\n    function addToken(address token) external onlyOwner {\n        if (token == address(0)) revert InvalidTokenAddress();\n\n        TokenInfo storage info = _tokenInfo[token];\n        if (info.exists) revert AlreadyExists();\n\n        uint256 currentLength = _tokens.length;\n        if (currentLength >= MAX_TOKENS) revert MaxTokensReached();\n\n        info.exists = true;\n        info.isPaused = false;\n        info.index = uint8(currentLength);\n\n        _tokens.push(token);\n\n        emit TokenWhitelisted(token);\n    }\n\n    function pauseToken(\n        address token,\n        string calldata reason\n    ) external onlyOwner {\n        TokenInfo storage info = _tokenInfo[token];\n        if (!info.exists) revert NotFound();\n\n        info.isPaused = true;\n        emit TokenPaused(token, reason);\n    }\n\n    function unpauseToken(address token) external onlyOwner {\n        TokenInfo storage info = _tokenInfo[token];\n        if (!info.exists) revert NotFound();\n\n        info.isPaused = false;\n        emit TokenUnpaused(token);\n    }\n\n    function isWhitelisted(address token) external view returns (bool) {\n        TokenInfo storage info = _tokenInfo[token];\n        return info.exists && !info.isPaused;\n    }\n\n    function isPaused(address token) external view returns (bool) {\n        return _tokenInfo[token].isPaused;\n    }\n\n    function isTokenRegistered(address token) external view returns (bool) {\n        return _tokenInfo[token].exists;\n    }\n\n    function getTokens() external view returns (address[] memory) {\n        return _tokens;\n    }\n\n    function getTokenCount() external view returns (uint256) {\n        return _tokens.length;\n    }\n\n    function getRemainingCapacity() external view returns (uint256) {\n        unchecked {\n            return MAX_TOKENS - _tokens.length;\n        }\n    }\n\n    function getToken(\n        address token\n    ) external view returns (bool whitelisted, bool paused, uint8 index) {\n        TokenInfo storage info = _tokenInfo[token];\n        return (info.exists, info.isPaused, info.index);\n    }\n}\n"
      }
    }
  }
}